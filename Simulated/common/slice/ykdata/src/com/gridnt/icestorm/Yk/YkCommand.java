// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `ykdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.Yk;

/**
 * 操作员在调度员工作站上执行一项操作(选择/执行/撤销)，应用服务器
 * 将此命令转给前置机，前置机再将命令发送给终端。
 **/
public class YkCommand implements java.lang.Cloneable, java.io.Serializable
{
    public YkStep step;

    public YkType type;

    public int requestId;

    public String rID;

    public short unitNo;

    public short ykNo;

    public short yxIndex;

    public YkValue value;

    public YkCommand()
    {
        step = YkStep.Select;
        type = YkType.SelectBeforeOperate;
        rID = "";
        value = YkValue.Open;
    }

    public YkCommand(YkStep step, YkType type, int requestId, String rID, short unitNo, short ykNo, short yxIndex, YkValue value)
    {
        this.step = step;
        this.type = type;
        this.requestId = requestId;
        this.rID = rID;
        this.unitNo = unitNo;
        this.ykNo = ykNo;
        this.yxIndex = yxIndex;
        this.value = value;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        YkCommand _r = null;
        if(rhs instanceof YkCommand)
        {
            _r = (YkCommand)rhs;
        }

        if(_r != null)
        {
            if(step != _r.step)
            {
                if(step == null || _r.step == null || !step.equals(_r.step))
                {
                    return false;
                }
            }
            if(type != _r.type)
            {
                if(type == null || _r.type == null || !type.equals(_r.type))
                {
                    return false;
                }
            }
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(rID != _r.rID)
            {
                if(rID == null || _r.rID == null || !rID.equals(_r.rID))
                {
                    return false;
                }
            }
            if(unitNo != _r.unitNo)
            {
                return false;
            }
            if(ykNo != _r.ykNo)
            {
                return false;
            }
            if(yxIndex != _r.yxIndex)
            {
                return false;
            }
            if(value != _r.value)
            {
                if(value == null || _r.value == null || !value.equals(_r.value))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Yk::YkCommand");
        __h = IceInternal.HashUtil.hashAdd(__h, step);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, rID);
        __h = IceInternal.HashUtil.hashAdd(__h, unitNo);
        __h = IceInternal.HashUtil.hashAdd(__h, ykNo);
        __h = IceInternal.HashUtil.hashAdd(__h, yxIndex);
        __h = IceInternal.HashUtil.hashAdd(__h, value);
        return __h;
    }

    public YkCommand
    clone()
    {
        YkCommand c = null;
        try
        {
            c = (YkCommand)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        YkStep.__write(__os, step);
        YkType.__write(__os, type);
        __os.writeInt(requestId);
        __os.writeString(rID);
        __os.writeShort(unitNo);
        __os.writeShort(ykNo);
        __os.writeShort(yxIndex);
        YkValue.__write(__os, value);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        step = YkStep.__read(__is);
        type = YkType.__read(__is);
        requestId = __is.readInt();
        rID = __is.readString();
        unitNo = __is.readShort();
        ykNo = __is.readShort();
        yxIndex = __is.readShort();
        value = YkValue.__read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, YkCommand __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public YkCommand
    __read(IceInternal.BasicStream __is, YkCommand __v)
    {
        if(__v == null)
        {
             __v = new YkCommand();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final YkCommand __nullMarshalValue = new YkCommand();

    public static final long serialVersionUID = 1374637061L;
}
