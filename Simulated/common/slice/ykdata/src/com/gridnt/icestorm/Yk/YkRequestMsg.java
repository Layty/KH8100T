// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `ykdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.Yk;

/**
 * 遥控审核发给监管机
 **/
public class YkRequestMsg implements java.lang.Cloneable, java.io.Serializable
{
    public int requestId;

    public short unitNo;

    public YkStep step;

    public String breakerRid;

    public short breakerControlID;

    public YkValue breakerNormalValue;

    public String oper;

    public boolean isAgree;

    public String yxType;

    public YkRequestMsg()
    {
        step = YkStep.Select;
        breakerRid = "";
        breakerNormalValue = YkValue.Open;
        oper = "";
        yxType = "";
    }

    public YkRequestMsg(int requestId, short unitNo, YkStep step, String breakerRid, short breakerControlID, YkValue breakerNormalValue, String oper, boolean isAgree, String yxType)
    {
        this.requestId = requestId;
        this.unitNo = unitNo;
        this.step = step;
        this.breakerRid = breakerRid;
        this.breakerControlID = breakerControlID;
        this.breakerNormalValue = breakerNormalValue;
        this.oper = oper;
        this.isAgree = isAgree;
        this.yxType = yxType;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        YkRequestMsg _r = null;
        if(rhs instanceof YkRequestMsg)
        {
            _r = (YkRequestMsg)rhs;
        }

        if(_r != null)
        {
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(unitNo != _r.unitNo)
            {
                return false;
            }
            if(step != _r.step)
            {
                if(step == null || _r.step == null || !step.equals(_r.step))
                {
                    return false;
                }
            }
            if(breakerRid != _r.breakerRid)
            {
                if(breakerRid == null || _r.breakerRid == null || !breakerRid.equals(_r.breakerRid))
                {
                    return false;
                }
            }
            if(breakerControlID != _r.breakerControlID)
            {
                return false;
            }
            if(breakerNormalValue != _r.breakerNormalValue)
            {
                if(breakerNormalValue == null || _r.breakerNormalValue == null || !breakerNormalValue.equals(_r.breakerNormalValue))
                {
                    return false;
                }
            }
            if(oper != _r.oper)
            {
                if(oper == null || _r.oper == null || !oper.equals(_r.oper))
                {
                    return false;
                }
            }
            if(isAgree != _r.isAgree)
            {
                return false;
            }
            if(yxType != _r.yxType)
            {
                if(yxType == null || _r.yxType == null || !yxType.equals(_r.yxType))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Yk::YkRequestMsg");
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, unitNo);
        __h = IceInternal.HashUtil.hashAdd(__h, step);
        __h = IceInternal.HashUtil.hashAdd(__h, breakerRid);
        __h = IceInternal.HashUtil.hashAdd(__h, breakerControlID);
        __h = IceInternal.HashUtil.hashAdd(__h, breakerNormalValue);
        __h = IceInternal.HashUtil.hashAdd(__h, oper);
        __h = IceInternal.HashUtil.hashAdd(__h, isAgree);
        __h = IceInternal.HashUtil.hashAdd(__h, yxType);
        return __h;
    }

    public YkRequestMsg
    clone()
    {
        YkRequestMsg c = null;
        try
        {
            c = (YkRequestMsg)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(requestId);
        __os.writeShort(unitNo);
        YkStep.__write(__os, step);
        __os.writeString(breakerRid);
        __os.writeShort(breakerControlID);
        YkValue.__write(__os, breakerNormalValue);
        __os.writeString(oper);
        __os.writeBool(isAgree);
        __os.writeString(yxType);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        requestId = __is.readInt();
        unitNo = __is.readShort();
        step = YkStep.__read(__is);
        breakerRid = __is.readString();
        breakerControlID = __is.readShort();
        breakerNormalValue = YkValue.__read(__is);
        oper = __is.readString();
        isAgree = __is.readBool();
        yxType = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, YkRequestMsg __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public YkRequestMsg
    __read(IceInternal.BasicStream __is, YkRequestMsg __v)
    {
        if(__v == null)
        {
             __v = new YkRequestMsg();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final YkRequestMsg __nullMarshalValue = new YkRequestMsg();

    public static final long serialVersionUID = 1290739831L;
}
