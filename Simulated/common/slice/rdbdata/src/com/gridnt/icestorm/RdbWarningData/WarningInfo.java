// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbWarningData;

public class WarningInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String id;

    public RdbWarningType warnType;

    public long timeStamp;

    public RdbWarningLevel warningLevel;

    public String warnSource;

    public int columnNum;

    public java.util.List<java.lang.String> contents;

    public WarningInfo()
    {
        id = "";
        warnType = RdbWarningType.LimitEvent;
        warningLevel = RdbWarningLevel.Critical;
        warnSource = "";
    }

    public WarningInfo(String id, RdbWarningType warnType, long timeStamp, RdbWarningLevel warningLevel, String warnSource, int columnNum, java.util.List<java.lang.String> contents)
    {
        this.id = id;
        this.warnType = warnType;
        this.timeStamp = timeStamp;
        this.warningLevel = warningLevel;
        this.warnSource = warnSource;
        this.columnNum = columnNum;
        this.contents = contents;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        WarningInfo _r = null;
        if(rhs instanceof WarningInfo)
        {
            _r = (WarningInfo)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                if(id == null || _r.id == null || !id.equals(_r.id))
                {
                    return false;
                }
            }
            if(warnType != _r.warnType)
            {
                if(warnType == null || _r.warnType == null || !warnType.equals(_r.warnType))
                {
                    return false;
                }
            }
            if(timeStamp != _r.timeStamp)
            {
                return false;
            }
            if(warningLevel != _r.warningLevel)
            {
                if(warningLevel == null || _r.warningLevel == null || !warningLevel.equals(_r.warningLevel))
                {
                    return false;
                }
            }
            if(warnSource != _r.warnSource)
            {
                if(warnSource == null || _r.warnSource == null || !warnSource.equals(_r.warnSource))
                {
                    return false;
                }
            }
            if(columnNum != _r.columnNum)
            {
                return false;
            }
            if(contents != _r.contents)
            {
                if(contents == null || _r.contents == null || !contents.equals(_r.contents))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbWarningData::WarningInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, warnType);
        __h = IceInternal.HashUtil.hashAdd(__h, timeStamp);
        __h = IceInternal.HashUtil.hashAdd(__h, warningLevel);
        __h = IceInternal.HashUtil.hashAdd(__h, warnSource);
        __h = IceInternal.HashUtil.hashAdd(__h, columnNum);
        __h = IceInternal.HashUtil.hashAdd(__h, contents);
        return __h;
    }

    public WarningInfo
    clone()
    {
        WarningInfo c = null;
        try
        {
            c = (WarningInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(id);
        RdbWarningType.__write(__os, warnType);
        __os.writeLong(timeStamp);
        RdbWarningLevel.__write(__os, warningLevel);
        __os.writeString(warnSource);
        __os.writeInt(columnNum);
        StringsHelper.write(__os, contents);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readString();
        warnType = RdbWarningType.__read(__is);
        timeStamp = __is.readLong();
        warningLevel = RdbWarningLevel.__read(__is);
        warnSource = __is.readString();
        columnNum = __is.readInt();
        contents = StringsHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, WarningInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public WarningInfo
    __read(IceInternal.BasicStream __is, WarningInfo __v)
    {
        if(__v == null)
        {
             __v = new WarningInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final WarningInfo __nullMarshalValue = new WarningInfo();

    public static final long serialVersionUID = 377781030L;
}
