// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public class RequestTopoDataSeq implements java.lang.Cloneable, java.io.Serializable
{
    public long id;

    public long requestId;

    public String requestNode;

    public boolean isStop;

    public int refreshFreq;

    public java.util.List<java.lang.String> ridSeq;

    public RequestTopoDataSeq()
    {
        requestNode = "";
    }

    public RequestTopoDataSeq(long id, long requestId, String requestNode, boolean isStop, int refreshFreq, java.util.List<java.lang.String> ridSeq)
    {
        this.id = id;
        this.requestId = requestId;
        this.requestNode = requestNode;
        this.isStop = isStop;
        this.refreshFreq = refreshFreq;
        this.ridSeq = ridSeq;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RequestTopoDataSeq _r = null;
        if(rhs instanceof RequestTopoDataSeq)
        {
            _r = (RequestTopoDataSeq)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(requestNode != _r.requestNode)
            {
                if(requestNode == null || _r.requestNode == null || !requestNode.equals(_r.requestNode))
                {
                    return false;
                }
            }
            if(isStop != _r.isStop)
            {
                return false;
            }
            if(refreshFreq != _r.refreshFreq)
            {
                return false;
            }
            if(ridSeq != _r.ridSeq)
            {
                if(ridSeq == null || _r.ridSeq == null || !ridSeq.equals(_r.ridSeq))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbRealData::RequestTopoDataSeq");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, requestNode);
        __h = IceInternal.HashUtil.hashAdd(__h, isStop);
        __h = IceInternal.HashUtil.hashAdd(__h, refreshFreq);
        __h = IceInternal.HashUtil.hashAdd(__h, ridSeq);
        return __h;
    }

    public RequestTopoDataSeq
    clone()
    {
        RequestTopoDataSeq c = null;
        try
        {
            c = (RequestTopoDataSeq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(id);
        __os.writeLong(requestId);
        __os.writeString(requestNode);
        __os.writeBool(isStop);
        __os.writeInt(refreshFreq);
        StringsHelper.write(__os, ridSeq);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readLong();
        requestId = __is.readLong();
        requestNode = __is.readString();
        isStop = __is.readBool();
        refreshFreq = __is.readInt();
        ridSeq = StringsHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, RequestTopoDataSeq __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RequestTopoDataSeq
    __read(IceInternal.BasicStream __is, RequestTopoDataSeq __v)
    {
        if(__v == null)
        {
             __v = new RequestTopoDataSeq();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RequestTopoDataSeq __nullMarshalValue = new RequestTopoDataSeq();

    public static final long serialVersionUID = 451681744L;
}
