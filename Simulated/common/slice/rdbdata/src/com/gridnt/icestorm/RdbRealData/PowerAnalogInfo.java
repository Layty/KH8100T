// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public class PowerAnalogInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String analogRID;

    public String analogName;

    public double analogValue;

    public PowerAnalogInfo()
    {
        analogRID = "";
        analogName = "";
    }

    public PowerAnalogInfo(String analogRID, String analogName, double analogValue)
    {
        this.analogRID = analogRID;
        this.analogName = analogName;
        this.analogValue = analogValue;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PowerAnalogInfo _r = null;
        if(rhs instanceof PowerAnalogInfo)
        {
            _r = (PowerAnalogInfo)rhs;
        }

        if(_r != null)
        {
            if(analogRID != _r.analogRID)
            {
                if(analogRID == null || _r.analogRID == null || !analogRID.equals(_r.analogRID))
                {
                    return false;
                }
            }
            if(analogName != _r.analogName)
            {
                if(analogName == null || _r.analogName == null || !analogName.equals(_r.analogName))
                {
                    return false;
                }
            }
            if(analogValue != _r.analogValue)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbRealData::PowerAnalogInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, analogRID);
        __h = IceInternal.HashUtil.hashAdd(__h, analogName);
        __h = IceInternal.HashUtil.hashAdd(__h, analogValue);
        return __h;
    }

    public PowerAnalogInfo
    clone()
    {
        PowerAnalogInfo c = null;
        try
        {
            c = (PowerAnalogInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(analogRID);
        __os.writeString(analogName);
        __os.writeDouble(analogValue);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        analogRID = __is.readString();
        analogName = __is.readString();
        analogValue = __is.readDouble();
    }

    static public void
    __write(IceInternal.BasicStream __os, PowerAnalogInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public PowerAnalogInfo
    __read(IceInternal.BasicStream __is, PowerAnalogInfo __v)
    {
        if(__v == null)
        {
             __v = new PowerAnalogInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final PowerAnalogInfo __nullMarshalValue = new PowerAnalogInfo();

    public static final long serialVersionUID = -927450352L;
}
