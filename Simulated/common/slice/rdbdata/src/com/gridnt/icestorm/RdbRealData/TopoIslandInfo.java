// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public class TopoIslandInfo implements java.lang.Cloneable, java.io.Serializable
{
    public int islandID;

    public java.util.List<ConnectivityNodeInfo> nodeInfoes;

    public java.util.List<PowerInfo> powerInfoes;

    public boolean powerStatus;

    public TopoIslandInfo()
    {
    }

    public TopoIslandInfo(int islandID, java.util.List<ConnectivityNodeInfo> nodeInfoes, java.util.List<PowerInfo> powerInfoes, boolean powerStatus)
    {
        this.islandID = islandID;
        this.nodeInfoes = nodeInfoes;
        this.powerInfoes = powerInfoes;
        this.powerStatus = powerStatus;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        TopoIslandInfo _r = null;
        if(rhs instanceof TopoIslandInfo)
        {
            _r = (TopoIslandInfo)rhs;
        }

        if(_r != null)
        {
            if(islandID != _r.islandID)
            {
                return false;
            }
            if(nodeInfoes != _r.nodeInfoes)
            {
                if(nodeInfoes == null || _r.nodeInfoes == null || !nodeInfoes.equals(_r.nodeInfoes))
                {
                    return false;
                }
            }
            if(powerInfoes != _r.powerInfoes)
            {
                if(powerInfoes == null || _r.powerInfoes == null || !powerInfoes.equals(_r.powerInfoes))
                {
                    return false;
                }
            }
            if(powerStatus != _r.powerStatus)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbRealData::TopoIslandInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, islandID);
        __h = IceInternal.HashUtil.hashAdd(__h, nodeInfoes);
        __h = IceInternal.HashUtil.hashAdd(__h, powerInfoes);
        __h = IceInternal.HashUtil.hashAdd(__h, powerStatus);
        return __h;
    }

    public TopoIslandInfo
    clone()
    {
        TopoIslandInfo c = null;
        try
        {
            c = (TopoIslandInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(islandID);
        ConnectivityNodeInfoSeqHelper.write(__os, nodeInfoes);
        PowerInfoSeqHelper.write(__os, powerInfoes);
        __os.writeBool(powerStatus);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        islandID = __is.readInt();
        nodeInfoes = ConnectivityNodeInfoSeqHelper.read(__is);
        powerInfoes = PowerInfoSeqHelper.read(__is);
        powerStatus = __is.readBool();
    }

    static public void
    __write(IceInternal.BasicStream __os, TopoIslandInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public TopoIslandInfo
    __read(IceInternal.BasicStream __is, TopoIslandInfo __v)
    {
        if(__v == null)
        {
             __v = new TopoIslandInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final TopoIslandInfo __nullMarshalValue = new TopoIslandInfo();

    public static final long serialVersionUID = 1431816230L;
}
