// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public class ReceiveTopoDataSeq implements java.lang.Cloneable, java.io.Serializable
{
    public long id;

    public long requestId;

    public String requestNode;

    public java.util.List<ConNodeState> cnStateSeq;

    public ReceiveTopoDataSeq()
    {
        requestNode = "";
    }

    public ReceiveTopoDataSeq(long id, long requestId, String requestNode, java.util.List<ConNodeState> cnStateSeq)
    {
        this.id = id;
        this.requestId = requestId;
        this.requestNode = requestNode;
        this.cnStateSeq = cnStateSeq;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ReceiveTopoDataSeq _r = null;
        if(rhs instanceof ReceiveTopoDataSeq)
        {
            _r = (ReceiveTopoDataSeq)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(requestNode != _r.requestNode)
            {
                if(requestNode == null || _r.requestNode == null || !requestNode.equals(_r.requestNode))
                {
                    return false;
                }
            }
            if(cnStateSeq != _r.cnStateSeq)
            {
                if(cnStateSeq == null || _r.cnStateSeq == null || !cnStateSeq.equals(_r.cnStateSeq))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbRealData::ReceiveTopoDataSeq");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, requestNode);
        __h = IceInternal.HashUtil.hashAdd(__h, cnStateSeq);
        return __h;
    }

    public ReceiveTopoDataSeq
    clone()
    {
        ReceiveTopoDataSeq c = null;
        try
        {
            c = (ReceiveTopoDataSeq)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(id);
        __os.writeLong(requestId);
        __os.writeString(requestNode);
        ConNodeStateSeqHelper.write(__os, cnStateSeq);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readLong();
        requestId = __is.readLong();
        requestNode = __is.readString();
        cnStateSeq = ConNodeStateSeqHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, ReceiveTopoDataSeq __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ReceiveTopoDataSeq
    __read(IceInternal.BasicStream __is, ReceiveTopoDataSeq __v)
    {
        if(__v == null)
        {
             __v = new ReceiveTopoDataSeq();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ReceiveTopoDataSeq __nullMarshalValue = new ReceiveTopoDataSeq();

    public static final long serialVersionUID = 1756489200L;
}
