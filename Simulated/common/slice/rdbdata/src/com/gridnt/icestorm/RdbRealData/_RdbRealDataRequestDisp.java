// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public abstract class _RdbRealDataRequestDisp extends Ice.ObjectImpl implements RdbRealDataRequest
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RdbRealData::RdbRealDataRequest"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final void RequestCompleteData(RequestCompleteDataSeq seq)
    {
        RequestCompleteData(seq, null);
    }

    public final void RequestDefaultData(RequestDefaultDataSeq seq)
    {
        RequestDefaultData(seq, null);
    }

    public final void RequestSpecificData(RequestSpecficDataSeq seq)
    {
        RequestSpecificData(seq, null);
    }

    public final void SendTopoDataRequest(RequestTopoDataSeq seq)
    {
        SendTopoDataRequest(seq, null);
    }

    public static Ice.DispatchStatus ___RequestDefaultData(RdbRealDataRequest __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        RequestDefaultDataSeq seq = null;
        seq = RequestDefaultDataSeq.__read(__is, seq);
        __inS.endReadParams();
        __obj.RequestDefaultData(seq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RequestSpecificData(RdbRealDataRequest __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        RequestSpecficDataSeq seq = null;
        seq = RequestSpecficDataSeq.__read(__is, seq);
        __inS.endReadParams();
        __obj.RequestSpecificData(seq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___RequestCompleteData(RdbRealDataRequest __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        RequestCompleteDataSeq seq = null;
        seq = RequestCompleteDataSeq.__read(__is, seq);
        __inS.endReadParams();
        __obj.RequestCompleteData(seq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___SendTopoDataRequest(RdbRealDataRequest __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        RequestTopoDataSeq seq = null;
        seq = RequestTopoDataSeq.__read(__is, seq);
        __inS.endReadParams();
        __obj.SendTopoDataRequest(seq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "RequestCompleteData",
        "RequestDefaultData",
        "RequestSpecificData",
        "SendTopoDataRequest",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___RequestCompleteData(this, in, __current);
            }
            case 1:
            {
                return ___RequestDefaultData(this, in, __current);
            }
            case 2:
            {
                return ___RequestSpecificData(this, in, __current);
            }
            case 3:
            {
                return ___SendTopoDataRequest(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
