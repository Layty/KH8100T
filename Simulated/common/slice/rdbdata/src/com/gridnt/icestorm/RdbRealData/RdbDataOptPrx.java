// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public interface RdbDataOptPrx extends Ice.ObjectPrx
{
    public boolean InsertData(RespondCompleteDataSeq dataSeq, RespondCompleteDataSequenceHolder errorSeq);

    public boolean InsertData(RespondCompleteDataSeq dataSeq, RespondCompleteDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, Callback_RdbDataOpt_InsertData __cb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_InsertData __cb);

    public interface FunctionalCallback_RdbDataOpt_InsertData_Response
    {
        void apply(boolean __ret, java.util.List<RespondCompleteData> errorSeq);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_InsertData(RespondCompleteDataSequenceHolder errorSeq, Ice.AsyncResult __result);

    public boolean SelectDefaultData(RequestDefaultDataSeq reqSeq, RespondDefaultDataSeqHolder repSeq);

    public boolean SelectDefaultData(RequestDefaultDataSeq reqSeq, RespondDefaultDataSeqHolder repSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, Callback_RdbDataOpt_SelectDefaultData __cb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectDefaultData __cb);

    public interface FunctionalCallback_RdbDataOpt_SelectDefaultData_Response
    {
        void apply(boolean __ret, RespondDefaultDataSeq repSeq);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   java.util.Map<String, String> __ctx, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   java.util.Map<String, String> __ctx, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_SelectDefaultData(RespondDefaultDataSeqHolder repSeq, Ice.AsyncResult __result);

    public boolean SelectSpecificData(RequestSpecficDataSeq reqSeq, RespondSpecficDataSeqHolder repSeq);

    public boolean SelectSpecificData(RequestSpecficDataSeq reqSeq, RespondSpecficDataSeqHolder repSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, Callback_RdbDataOpt_SelectSpecificData __cb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectSpecificData __cb);

    public interface FunctionalCallback_RdbDataOpt_SelectSpecificData_Response
    {
        void apply(boolean __ret, RespondSpecficDataSeq repSeq);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_SelectSpecificData(RespondSpecficDataSeqHolder repSeq, Ice.AsyncResult __result);

    public boolean SelectCompleteData(RequestCompleteDataSeq reqSeq, RespondCompleteDataSeqHolder repSeq);

    public boolean SelectCompleteData(RequestCompleteDataSeq reqSeq, RespondCompleteDataSeqHolder repSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, Callback_RdbDataOpt_SelectCompleteData __cb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectCompleteData __cb);

    public interface FunctionalCallback_RdbDataOpt_SelectCompleteData_Response
    {
        void apply(boolean __ret, RespondCompleteDataSeq repSeq);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_SelectCompleteData(RespondCompleteDataSeqHolder repSeq, Ice.AsyncResult __result);

    public boolean SelectDataCount(RequestDefaultDataSeq reqSeq, RespondDataCountSequenceHolder repSeq);

    public boolean SelectDataCount(RequestDefaultDataSeq reqSeq, RespondDataCountSequenceHolder repSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, Callback_RdbDataOpt_SelectDataCount __cb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectDataCount __cb);

    public interface FunctionalCallback_RdbDataOpt_SelectDataCount_Response
    {
        void apply(boolean __ret, java.util.List<RespondDataCount> repSeq);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_SelectDataCount(RespondDataCountSequenceHolder repSeq, Ice.AsyncResult __result);

    public boolean UpdateCompleteData(RespondCompleteDataSeq reqSeq, RespondCompleteDataSequenceHolder repSeq);

    public boolean UpdateCompleteData(RespondCompleteDataSeq reqSeq, RespondCompleteDataSequenceHolder repSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, Callback_RdbDataOpt_UpdateCompleteData __cb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_UpdateCompleteData __cb);

    public interface FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response
    {
        void apply(boolean __ret, java.util.List<RespondCompleteData> repSeq);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_UpdateCompleteData(RespondCompleteDataSequenceHolder repSeq, Ice.AsyncResult __result);

    public boolean DeleteRdbData(RequestDefaultDataSeq dataSeq, RequestDefaultDataSequenceHolder errorSeq);

    public boolean DeleteRdbData(RequestDefaultDataSeq dataSeq, RequestDefaultDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, Callback_RdbDataOpt_DeleteRdbData __cb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_DeleteRdbData __cb);

    public interface FunctionalCallback_RdbDataOpt_DeleteRdbData_Response
    {
        void apply(boolean __ret, java.util.List<RequestDefaultData> errorSeq);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_DeleteRdbData(RequestDefaultDataSequenceHolder errorSeq, Ice.AsyncResult __result);

    public boolean GetEquipTree(String deviceType, String deviceRid, EquipTreeSequenceHolder treeSeq);

    public boolean GetEquipTree(String deviceType, String deviceRid, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, Callback_RdbDataOpt_GetEquipTree __cb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetEquipTree __cb);

    public interface FunctionalCallback_RdbDataOpt_GetEquipTree_Response
    {
        void apply(boolean __ret, java.util.List<EquipTree> treeSeq);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              java.util.Map<String, String> __ctx, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              java.util.Map<String, String> __ctx, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_GetEquipTree(EquipTreeSequenceHolder treeSeq, Ice.AsyncResult __result);

    public boolean GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, EquipTreeSequenceHolder treeSeq);

    public boolean GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, Callback_RdbDataOpt_GetSpecificEquipTree __cb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetSpecificEquipTree __cb);

    public interface FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response
    {
        void apply(boolean __ret, java.util.List<EquipTree> treeSeq);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_GetSpecificEquipTree(EquipTreeSequenceHolder treeSeq, Ice.AsyncResult __result);

    public boolean GetEquipLineAndStationInfo(String deviceType, String deviceRid, LineAndStationInfoHolder info);

    public boolean GetEquipLineAndStationInfo(String deviceType, String deviceRid, LineAndStationInfoHolder info, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, Callback_RdbDataOpt_GetEquipLineAndStationInfo __cb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetEquipLineAndStationInfo __cb);

    public interface FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response
    {
        void apply(boolean __ret, LineAndStationInfo info);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                            IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            java.util.Map<String, String> __ctx, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            java.util.Map<String, String> __ctx, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                            IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_GetEquipLineAndStationInfo(LineAndStationInfoHolder info, Ice.AsyncResult __result);

    public boolean isOrphanNode(String dataType, String dataRid);

    public boolean isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, Ice.Callback __cb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, Callback_RdbDataOpt_isOrphanNode __cb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_isOrphanNode __cb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_isOrphanNode(Ice.AsyncResult __result);

    public boolean isEmptyNode(String dataType, String dataRid);

    public boolean isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, Ice.Callback __cb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, Callback_RdbDataOpt_isEmptyNode __cb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_isEmptyNode __cb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_isEmptyNode(Ice.AsyncResult __result);

    public boolean IsInvalidDbData(String tableName, String dataRID);

    public boolean IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, Ice.Callback __cb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, Callback_RdbDataOpt_IsInvalidDbData __cb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_IsInvalidDbData __cb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_IsInvalidDbData(Ice.AsyncResult __result);

    public boolean GetTopoData(RequestTopoDataSeq inDataSeq, ReceiveTopoDataSeqHolder outDataSeq);

    public boolean GetTopoData(RequestTopoDataSeq inDataSeq, ReceiveTopoDataSeqHolder outDataSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, Callback_RdbDataOpt_GetTopoData __cb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetTopoData __cb);

    public interface FunctionalCallback_RdbDataOpt_GetTopoData_Response
    {
        void apply(boolean __ret, ReceiveTopoDataSeq outDataSeq);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb);

    public boolean end_GetTopoData(ReceiveTopoDataSeqHolder outDataSeq, Ice.AsyncResult __result);

    public void GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes);

    public void GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetTopoIslandInfo();

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_GetTopoIslandInfo(Ice.Callback __cb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(Callback_RdbDataOpt_GetTopoIslandInfo __cb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetTopoIslandInfo __cb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb);

    public void end_GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes, Ice.AsyncResult __result);

    public void UpdateTopoData();

    public void UpdateTopoData(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UpdateTopoData();

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_UpdateTopoData(Ice.Callback __cb);

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_UpdateTopoData(Callback_RdbDataOpt_UpdateTopoData __cb);

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, Callback_RdbDataOpt_UpdateTopoData __cb);

    public Ice.AsyncResult begin_UpdateTopoData(IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_UpdateTopoData(IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    public void end_UpdateTopoData(Ice.AsyncResult __result);
}
