// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

public class RespondSpecficData implements java.lang.Cloneable, java.io.Serializable
{
    public String tableName;

    public java.util.List<java.lang.String> fieldSeq;

    public String dataRid;

    public java.util.List<java.lang.String> dataValues;

    public RespondSpecficData()
    {
        tableName = "";
        dataRid = "";
    }

    public RespondSpecficData(String tableName, java.util.List<java.lang.String> fieldSeq, String dataRid, java.util.List<java.lang.String> dataValues)
    {
        this.tableName = tableName;
        this.fieldSeq = fieldSeq;
        this.dataRid = dataRid;
        this.dataValues = dataValues;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RespondSpecficData _r = null;
        if(rhs instanceof RespondSpecficData)
        {
            _r = (RespondSpecficData)rhs;
        }

        if(_r != null)
        {
            if(tableName != _r.tableName)
            {
                if(tableName == null || _r.tableName == null || !tableName.equals(_r.tableName))
                {
                    return false;
                }
            }
            if(fieldSeq != _r.fieldSeq)
            {
                if(fieldSeq == null || _r.fieldSeq == null || !fieldSeq.equals(_r.fieldSeq))
                {
                    return false;
                }
            }
            if(dataRid != _r.dataRid)
            {
                if(dataRid == null || _r.dataRid == null || !dataRid.equals(_r.dataRid))
                {
                    return false;
                }
            }
            if(dataValues != _r.dataValues)
            {
                if(dataValues == null || _r.dataValues == null || !dataValues.equals(_r.dataValues))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::RdbRealData::RespondSpecficData");
        __h = IceInternal.HashUtil.hashAdd(__h, tableName);
        __h = IceInternal.HashUtil.hashAdd(__h, fieldSeq);
        __h = IceInternal.HashUtil.hashAdd(__h, dataRid);
        __h = IceInternal.HashUtil.hashAdd(__h, dataValues);
        return __h;
    }

    public RespondSpecficData
    clone()
    {
        RespondSpecficData c = null;
        try
        {
            c = (RespondSpecficData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(tableName);
        StringsHelper.write(__os, fieldSeq);
        __os.writeString(dataRid);
        StringsHelper.write(__os, dataValues);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        tableName = __is.readString();
        fieldSeq = StringsHelper.read(__is);
        dataRid = __is.readString();
        dataValues = StringsHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, RespondSpecficData __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RespondSpecficData
    __read(IceInternal.BasicStream __is, RespondSpecficData __v)
    {
        if(__v == null)
        {
             __v = new RespondSpecficData();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RespondSpecficData __nullMarshalValue = new RespondSpecficData();

    public static final long serialVersionUID = 1709936390L;
}
