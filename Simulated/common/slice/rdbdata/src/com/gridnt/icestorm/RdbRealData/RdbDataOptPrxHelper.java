// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `rdbdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.icestorm.RdbRealData;

/**
 * Provides type-specific helper functions.
 **/
public final class RdbDataOptPrxHelper extends Ice.ObjectPrxHelperBase implements RdbDataOptPrx
{
    private static final String __DeleteRdbData_name = "DeleteRdbData";

    public boolean DeleteRdbData(RequestDefaultDataSeq dataSeq, RequestDefaultDataSequenceHolder errorSeq)
    {
        return DeleteRdbData(dataSeq, errorSeq, null, false);
    }

    public boolean DeleteRdbData(RequestDefaultDataSeq dataSeq, RequestDefaultDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx)
    {
        return DeleteRdbData(dataSeq, errorSeq, __ctx, true);
    }

    private boolean DeleteRdbData(RequestDefaultDataSeq dataSeq, RequestDefaultDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__DeleteRdbData_name);
        return end_DeleteRdbData(errorSeq, begin_DeleteRdbData(dataSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq)
    {
        return begin_DeleteRdbData(dataSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx)
    {
        return begin_DeleteRdbData(dataSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, Ice.Callback __cb)
    {
        return begin_DeleteRdbData(dataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_DeleteRdbData(dataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, Callback_RdbDataOpt_DeleteRdbData __cb)
    {
        return begin_DeleteRdbData(dataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_DeleteRdbData __cb)
    {
        return begin_DeleteRdbData(dataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteRdbData(dataSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteRdbData(dataSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_DeleteRdbData(dataSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                               java.util.Map<String, String> __ctx, 
                                               FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_DeleteRdbData(dataSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_DeleteRdbData
        {
            public CB(FunctionalCallback_RdbDataOpt_DeleteRdbData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<RequestDefaultData> errorSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, errorSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__DeleteRdbData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_DeleteRdbData_Response __responseCb;
        }
        return begin_DeleteRdbData(dataSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_DeleteRdbData(RequestDefaultDataSeq dataSeq, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__DeleteRdbData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__DeleteRdbData_name, __cb);
        try
        {
            __result.prepare(__DeleteRdbData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestDefaultDataSeq.__write(__os, dataSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_DeleteRdbData(RequestDefaultDataSequenceHolder errorSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __DeleteRdbData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            errorSeq.value = RequestDefaultDataSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __DeleteRdbData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_DeleteRdbData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RequestDefaultDataSequenceHolder errorSeq = new RequestDefaultDataSequenceHolder();
        try
        {
            __ret = __proxy.end_DeleteRdbData(errorSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, errorSeq.value);
    }

    private static final String __GetEquipLineAndStationInfo_name = "GetEquipLineAndStationInfo";

    public boolean GetEquipLineAndStationInfo(String deviceType, String deviceRid, LineAndStationInfoHolder info)
    {
        return GetEquipLineAndStationInfo(deviceType, deviceRid, info, null, false);
    }

    public boolean GetEquipLineAndStationInfo(String deviceType, String deviceRid, LineAndStationInfoHolder info, java.util.Map<String, String> __ctx)
    {
        return GetEquipLineAndStationInfo(deviceType, deviceRid, info, __ctx, true);
    }

    private boolean GetEquipLineAndStationInfo(String deviceType, String deviceRid, LineAndStationInfoHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetEquipLineAndStationInfo_name);
        return end_GetEquipLineAndStationInfo(info, begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, Ice.Callback __cb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, Callback_RdbDataOpt_GetEquipLineAndStationInfo __cb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetEquipLineAndStationInfo __cb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            java.util.Map<String, String> __ctx, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                            String deviceRid, 
                                                            java.util.Map<String, String> __ctx, 
                                                            FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                             String deviceRid, 
                                                             java.util.Map<String, String> __ctx, 
                                                             boolean __explicitCtx, 
                                                             boolean __synchronous, 
                                                             FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb, 
                                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetEquipLineAndStationInfo
        {
            public CB(FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, LineAndStationInfo info)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, info);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__GetEquipLineAndStationInfo_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_GetEquipLineAndStationInfo_Response __responseCb;
        }
        return begin_GetEquipLineAndStationInfo(deviceType, deviceRid, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_GetEquipLineAndStationInfo(String deviceType, 
                                                             String deviceRid, 
                                                             java.util.Map<String, String> __ctx, 
                                                             boolean __explicitCtx, 
                                                             boolean __synchronous, 
                                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetEquipLineAndStationInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetEquipLineAndStationInfo_name, __cb);
        try
        {
            __result.prepare(__GetEquipLineAndStationInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceType);
            __os.writeString(deviceRid);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_GetEquipLineAndStationInfo(LineAndStationInfoHolder info, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetEquipLineAndStationInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            info.value = LineAndStationInfo.__read(__is, info.value);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetEquipLineAndStationInfo_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetEquipLineAndStationInfo __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        LineAndStationInfoHolder info = new LineAndStationInfoHolder();
        try
        {
            __ret = __proxy.end_GetEquipLineAndStationInfo(info, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, info.value);
    }

    private static final String __GetEquipTree_name = "GetEquipTree";

    public boolean GetEquipTree(String deviceType, String deviceRid, EquipTreeSequenceHolder treeSeq)
    {
        return GetEquipTree(deviceType, deviceRid, treeSeq, null, false);
    }

    public boolean GetEquipTree(String deviceType, String deviceRid, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx)
    {
        return GetEquipTree(deviceType, deviceRid, treeSeq, __ctx, true);
    }

    private boolean GetEquipTree(String deviceType, String deviceRid, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetEquipTree_name);
        return end_GetEquipTree(treeSeq, begin_GetEquipTree(deviceType, deviceRid, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid)
    {
        return begin_GetEquipTree(deviceType, deviceRid, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx)
    {
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, Ice.Callback __cb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, Callback_RdbDataOpt_GetEquipTree __cb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, String deviceRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetEquipTree __cb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              java.util.Map<String, String> __ctx, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                              String deviceRid, 
                                              java.util.Map<String, String> __ctx, 
                                              FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                               String deviceRid, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetEquipTree
        {
            public CB(FunctionalCallback_RdbDataOpt_GetEquipTree_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<EquipTree> treeSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, treeSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__GetEquipTree_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_GetEquipTree_Response __responseCb;
        }
        return begin_GetEquipTree(deviceType, deviceRid, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_GetEquipTree(String deviceType, 
                                               String deviceRid, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetEquipTree_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetEquipTree_name, __cb);
        try
        {
            __result.prepare(__GetEquipTree_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceType);
            __os.writeString(deviceRid);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_GetEquipTree(EquipTreeSequenceHolder treeSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetEquipTree_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            treeSeq.value = EquipTreeSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetEquipTree_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetEquipTree __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        EquipTreeSequenceHolder treeSeq = new EquipTreeSequenceHolder();
        try
        {
            __ret = __proxy.end_GetEquipTree(treeSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, treeSeq.value);
    }

    private static final String __GetSpecificEquipTree_name = "GetSpecificEquipTree";

    public boolean GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, EquipTreeSequenceHolder treeSeq)
    {
        return GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, treeSeq, null, false);
    }

    public boolean GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx)
    {
        return GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, treeSeq, __ctx, true);
    }

    private boolean GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, EquipTreeSequenceHolder treeSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetSpecificEquipTree_name);
        return end_GetSpecificEquipTree(treeSeq, begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, Ice.Callback __cb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, Callback_RdbDataOpt_GetSpecificEquipTree __cb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, String deviceRid, String specDeviceType, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetSpecificEquipTree __cb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                      String deviceRid, 
                                                      String specDeviceType, 
                                                      java.util.Map<String, String> __ctx, 
                                                      FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                       String deviceRid, 
                                                       String specDeviceType, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetSpecificEquipTree
        {
            public CB(FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<EquipTree> treeSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, treeSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__GetSpecificEquipTree_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_GetSpecificEquipTree_Response __responseCb;
        }
        return begin_GetSpecificEquipTree(deviceType, deviceRid, specDeviceType, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_GetSpecificEquipTree(String deviceType, 
                                                       String deviceRid, 
                                                       String specDeviceType, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetSpecificEquipTree_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetSpecificEquipTree_name, __cb);
        try
        {
            __result.prepare(__GetSpecificEquipTree_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceType);
            __os.writeString(deviceRid);
            __os.writeString(specDeviceType);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_GetSpecificEquipTree(EquipTreeSequenceHolder treeSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetSpecificEquipTree_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            treeSeq.value = EquipTreeSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetSpecificEquipTree_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetSpecificEquipTree __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        EquipTreeSequenceHolder treeSeq = new EquipTreeSequenceHolder();
        try
        {
            __ret = __proxy.end_GetSpecificEquipTree(treeSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, treeSeq.value);
    }

    private static final String __GetTopoData_name = "GetTopoData";

    public boolean GetTopoData(RequestTopoDataSeq inDataSeq, ReceiveTopoDataSeqHolder outDataSeq)
    {
        return GetTopoData(inDataSeq, outDataSeq, null, false);
    }

    public boolean GetTopoData(RequestTopoDataSeq inDataSeq, ReceiveTopoDataSeqHolder outDataSeq, java.util.Map<String, String> __ctx)
    {
        return GetTopoData(inDataSeq, outDataSeq, __ctx, true);
    }

    private boolean GetTopoData(RequestTopoDataSeq inDataSeq, ReceiveTopoDataSeqHolder outDataSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetTopoData_name);
        return end_GetTopoData(outDataSeq, begin_GetTopoData(inDataSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq)
    {
        return begin_GetTopoData(inDataSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx)
    {
        return begin_GetTopoData(inDataSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, Ice.Callback __cb)
    {
        return begin_GetTopoData(inDataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetTopoData(inDataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, Callback_RdbDataOpt_GetTopoData __cb)
    {
        return begin_GetTopoData(inDataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetTopoData __cb)
    {
        return begin_GetTopoData(inDataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetTopoData(inDataSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetTopoData(inDataSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetTopoData(inDataSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetTopoData(inDataSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetTopoData
        {
            public CB(FunctionalCallback_RdbDataOpt_GetTopoData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, ReceiveTopoDataSeq outDataSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, outDataSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__GetTopoData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_GetTopoData_Response __responseCb;
        }
        return begin_GetTopoData(inDataSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_GetTopoData(RequestTopoDataSeq inDataSeq, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetTopoData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetTopoData_name, __cb);
        try
        {
            __result.prepare(__GetTopoData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestTopoDataSeq.__write(__os, inDataSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_GetTopoData(ReceiveTopoDataSeqHolder outDataSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetTopoData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            outDataSeq.value = ReceiveTopoDataSeq.__read(__is, outDataSeq.value);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetTopoData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_GetTopoData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        ReceiveTopoDataSeqHolder outDataSeq = new ReceiveTopoDataSeqHolder();
        try
        {
            __ret = __proxy.end_GetTopoData(outDataSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, outDataSeq.value);
    }

    private static final String __GetTopoIslandInfo_name = "GetTopoIslandInfo";

    public void GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes)
    {
        GetTopoIslandInfo(islandInfoes, null, false);
    }

    public void GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes, java.util.Map<String, String> __ctx)
    {
        GetTopoIslandInfo(islandInfoes, __ctx, true);
    }

    private void GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__GetTopoIslandInfo_name);
        end_GetTopoIslandInfo(islandInfoes, begin_GetTopoIslandInfo(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo()
    {
        return begin_GetTopoIslandInfo(null, false, false, null);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx)
    {
        return begin_GetTopoIslandInfo(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(Ice.Callback __cb)
    {
        return begin_GetTopoIslandInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetTopoIslandInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(Callback_RdbDataOpt_GetTopoIslandInfo __cb)
    {
        return begin_GetTopoIslandInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, Callback_RdbDataOpt_GetTopoIslandInfo __cb)
    {
        return begin_GetTopoIslandInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetTopoIslandInfo(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetTopoIslandInfo(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetTopoIslandInfo(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetTopoIslandInfo(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<java.util.List<TopoIslandInfo>> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetTopoIslandInfo(__ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<java.util.List<com.gridnt.icestorm.RdbRealData.TopoIslandInfo>>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   RdbDataOptPrxHelper.__GetTopoIslandInfo_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_GetTopoIslandInfo(java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetTopoIslandInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetTopoIslandInfo_name, __cb);
        try
        {
            __result.prepare(__GetTopoIslandInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_GetTopoIslandInfo(TopoIslandInfoSeqHolder islandInfoes, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetTopoIslandInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            islandInfoes.value = TopoIslandInfoSeqHelper.read(__is);
            __result.endReadParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetTopoIslandInfo_completed(Ice.TwowayCallbackArg1<java.util.List<TopoIslandInfo>> __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        TopoIslandInfoSeqHolder islandInfoes = new TopoIslandInfoSeqHolder();
        try
        {
            __proxy.end_GetTopoIslandInfo(islandInfoes, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(islandInfoes.value);
    }

    private static final String __InsertData_name = "InsertData";

    public boolean InsertData(RespondCompleteDataSeq dataSeq, RespondCompleteDataSequenceHolder errorSeq)
    {
        return InsertData(dataSeq, errorSeq, null, false);
    }

    public boolean InsertData(RespondCompleteDataSeq dataSeq, RespondCompleteDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx)
    {
        return InsertData(dataSeq, errorSeq, __ctx, true);
    }

    private boolean InsertData(RespondCompleteDataSeq dataSeq, RespondCompleteDataSequenceHolder errorSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__InsertData_name);
        return end_InsertData(errorSeq, begin_InsertData(dataSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq)
    {
        return begin_InsertData(dataSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx)
    {
        return begin_InsertData(dataSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, Ice.Callback __cb)
    {
        return begin_InsertData(dataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_InsertData(dataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, Callback_RdbDataOpt_InsertData __cb)
    {
        return begin_InsertData(dataSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_InsertData __cb)
    {
        return begin_InsertData(dataSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_InsertData(dataSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_InsertData(dataSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_InsertData(dataSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_InsertData(dataSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_InsertData
        {
            public CB(FunctionalCallback_RdbDataOpt_InsertData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<RespondCompleteData> errorSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, errorSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__InsertData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_InsertData_Response __responseCb;
        }
        return begin_InsertData(dataSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_InsertData(RespondCompleteDataSeq dataSeq, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__InsertData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__InsertData_name, __cb);
        try
        {
            __result.prepare(__InsertData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RespondCompleteDataSeq.__write(__os, dataSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_InsertData(RespondCompleteDataSequenceHolder errorSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __InsertData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            errorSeq.value = RespondCompleteDataSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __InsertData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_InsertData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondCompleteDataSequenceHolder errorSeq = new RespondCompleteDataSequenceHolder();
        try
        {
            __ret = __proxy.end_InsertData(errorSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, errorSeq.value);
    }

    private static final String __IsInvalidDbData_name = "IsInvalidDbData";

    public boolean IsInvalidDbData(String tableName, String dataRID)
    {
        return IsInvalidDbData(tableName, dataRID, null, false);
    }

    public boolean IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx)
    {
        return IsInvalidDbData(tableName, dataRID, __ctx, true);
    }

    private boolean IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__IsInvalidDbData_name);
        return end_IsInvalidDbData(begin_IsInvalidDbData(tableName, dataRID, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID)
    {
        return begin_IsInvalidDbData(tableName, dataRID, null, false, false, null);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, Ice.Callback __cb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, Callback_RdbDataOpt_IsInvalidDbData __cb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, String dataRID, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_IsInvalidDbData __cb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                 String dataRID, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                  String dataRID, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_IsInvalidDbData(tableName, dataRID, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 RdbDataOptPrxHelper.__IsInvalidDbData_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_IsInvalidDbData(String tableName, 
                                                  String dataRID, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__IsInvalidDbData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__IsInvalidDbData_name, __cb);
        try
        {
            __result.prepare(__IsInvalidDbData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(tableName);
            __os.writeString(dataRID);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_IsInvalidDbData(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __IsInvalidDbData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __IsInvalidDbData_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_IsInvalidDbData(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __SelectCompleteData_name = "SelectCompleteData";

    public boolean SelectCompleteData(RequestCompleteDataSeq reqSeq, RespondCompleteDataSeqHolder repSeq)
    {
        return SelectCompleteData(reqSeq, repSeq, null, false);
    }

    public boolean SelectCompleteData(RequestCompleteDataSeq reqSeq, RespondCompleteDataSeqHolder repSeq, java.util.Map<String, String> __ctx)
    {
        return SelectCompleteData(reqSeq, repSeq, __ctx, true);
    }

    private boolean SelectCompleteData(RequestCompleteDataSeq reqSeq, RespondCompleteDataSeqHolder repSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__SelectCompleteData_name);
        return end_SelectCompleteData(repSeq, begin_SelectCompleteData(reqSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq)
    {
        return begin_SelectCompleteData(reqSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx)
    {
        return begin_SelectCompleteData(reqSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, Ice.Callback __cb)
    {
        return begin_SelectCompleteData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SelectCompleteData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, Callback_RdbDataOpt_SelectCompleteData __cb)
    {
        return begin_SelectCompleteData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectCompleteData __cb)
    {
        return begin_SelectCompleteData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectCompleteData(reqSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectCompleteData(reqSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectCompleteData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectCompleteData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectCompleteData
        {
            public CB(FunctionalCallback_RdbDataOpt_SelectCompleteData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, RespondCompleteDataSeq repSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, repSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__SelectCompleteData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_SelectCompleteData_Response __responseCb;
        }
        return begin_SelectCompleteData(reqSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_SelectCompleteData(RequestCompleteDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SelectCompleteData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__SelectCompleteData_name, __cb);
        try
        {
            __result.prepare(__SelectCompleteData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestCompleteDataSeq.__write(__os, reqSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_SelectCompleteData(RespondCompleteDataSeqHolder repSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __SelectCompleteData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            repSeq.value = RespondCompleteDataSeq.__read(__is, repSeq.value);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __SelectCompleteData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectCompleteData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondCompleteDataSeqHolder repSeq = new RespondCompleteDataSeqHolder();
        try
        {
            __ret = __proxy.end_SelectCompleteData(repSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, repSeq.value);
    }

    private static final String __SelectDataCount_name = "SelectDataCount";

    public boolean SelectDataCount(RequestDefaultDataSeq reqSeq, RespondDataCountSequenceHolder repSeq)
    {
        return SelectDataCount(reqSeq, repSeq, null, false);
    }

    public boolean SelectDataCount(RequestDefaultDataSeq reqSeq, RespondDataCountSequenceHolder repSeq, java.util.Map<String, String> __ctx)
    {
        return SelectDataCount(reqSeq, repSeq, __ctx, true);
    }

    private boolean SelectDataCount(RequestDefaultDataSeq reqSeq, RespondDataCountSequenceHolder repSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__SelectDataCount_name);
        return end_SelectDataCount(repSeq, begin_SelectDataCount(reqSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq)
    {
        return begin_SelectDataCount(reqSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx)
    {
        return begin_SelectDataCount(reqSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, Ice.Callback __cb)
    {
        return begin_SelectDataCount(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SelectDataCount(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, Callback_RdbDataOpt_SelectDataCount __cb)
    {
        return begin_SelectDataCount(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectDataCount __cb)
    {
        return begin_SelectDataCount(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectDataCount(reqSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectDataCount(reqSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectDataCount(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                 java.util.Map<String, String> __ctx, 
                                                 FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectDataCount(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectDataCount
        {
            public CB(FunctionalCallback_RdbDataOpt_SelectDataCount_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<RespondDataCount> repSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, repSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__SelectDataCount_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_SelectDataCount_Response __responseCb;
        }
        return begin_SelectDataCount(reqSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_SelectDataCount(RequestDefaultDataSeq reqSeq, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SelectDataCount_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__SelectDataCount_name, __cb);
        try
        {
            __result.prepare(__SelectDataCount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestDefaultDataSeq.__write(__os, reqSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_SelectDataCount(RespondDataCountSequenceHolder repSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __SelectDataCount_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            repSeq.value = RespondDataCountSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __SelectDataCount_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectDataCount __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondDataCountSequenceHolder repSeq = new RespondDataCountSequenceHolder();
        try
        {
            __ret = __proxy.end_SelectDataCount(repSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, repSeq.value);
    }

    private static final String __SelectDefaultData_name = "SelectDefaultData";

    public boolean SelectDefaultData(RequestDefaultDataSeq reqSeq, RespondDefaultDataSeqHolder repSeq)
    {
        return SelectDefaultData(reqSeq, repSeq, null, false);
    }

    public boolean SelectDefaultData(RequestDefaultDataSeq reqSeq, RespondDefaultDataSeqHolder repSeq, java.util.Map<String, String> __ctx)
    {
        return SelectDefaultData(reqSeq, repSeq, __ctx, true);
    }

    private boolean SelectDefaultData(RequestDefaultDataSeq reqSeq, RespondDefaultDataSeqHolder repSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__SelectDefaultData_name);
        return end_SelectDefaultData(repSeq, begin_SelectDefaultData(reqSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq)
    {
        return begin_SelectDefaultData(reqSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx)
    {
        return begin_SelectDefaultData(reqSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, Ice.Callback __cb)
    {
        return begin_SelectDefaultData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SelectDefaultData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, Callback_RdbDataOpt_SelectDefaultData __cb)
    {
        return begin_SelectDefaultData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectDefaultData __cb)
    {
        return begin_SelectDefaultData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectDefaultData(reqSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectDefaultData(reqSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   java.util.Map<String, String> __ctx, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectDefaultData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                   java.util.Map<String, String> __ctx, 
                                                   FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectDefaultData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectDefaultData
        {
            public CB(FunctionalCallback_RdbDataOpt_SelectDefaultData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, RespondDefaultDataSeq repSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, repSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__SelectDefaultData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_SelectDefaultData_Response __responseCb;
        }
        return begin_SelectDefaultData(reqSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_SelectDefaultData(RequestDefaultDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SelectDefaultData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__SelectDefaultData_name, __cb);
        try
        {
            __result.prepare(__SelectDefaultData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestDefaultDataSeq.__write(__os, reqSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_SelectDefaultData(RespondDefaultDataSeqHolder repSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __SelectDefaultData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            repSeq.value = RespondDefaultDataSeq.__read(__is, repSeq.value);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __SelectDefaultData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectDefaultData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondDefaultDataSeqHolder repSeq = new RespondDefaultDataSeqHolder();
        try
        {
            __ret = __proxy.end_SelectDefaultData(repSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, repSeq.value);
    }

    private static final String __SelectSpecificData_name = "SelectSpecificData";

    public boolean SelectSpecificData(RequestSpecficDataSeq reqSeq, RespondSpecficDataSeqHolder repSeq)
    {
        return SelectSpecificData(reqSeq, repSeq, null, false);
    }

    public boolean SelectSpecificData(RequestSpecficDataSeq reqSeq, RespondSpecficDataSeqHolder repSeq, java.util.Map<String, String> __ctx)
    {
        return SelectSpecificData(reqSeq, repSeq, __ctx, true);
    }

    private boolean SelectSpecificData(RequestSpecficDataSeq reqSeq, RespondSpecficDataSeqHolder repSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__SelectSpecificData_name);
        return end_SelectSpecificData(repSeq, begin_SelectSpecificData(reqSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq)
    {
        return begin_SelectSpecificData(reqSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx)
    {
        return begin_SelectSpecificData(reqSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, Ice.Callback __cb)
    {
        return begin_SelectSpecificData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_SelectSpecificData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, Callback_RdbDataOpt_SelectSpecificData __cb)
    {
        return begin_SelectSpecificData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_SelectSpecificData __cb)
    {
        return begin_SelectSpecificData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectSpecificData(reqSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectSpecificData(reqSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_SelectSpecificData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_SelectSpecificData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectSpecificData
        {
            public CB(FunctionalCallback_RdbDataOpt_SelectSpecificData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, RespondSpecficDataSeq repSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, repSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__SelectSpecificData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_SelectSpecificData_Response __responseCb;
        }
        return begin_SelectSpecificData(reqSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_SelectSpecificData(RequestSpecficDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__SelectSpecificData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__SelectSpecificData_name, __cb);
        try
        {
            __result.prepare(__SelectSpecificData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RequestSpecficDataSeq.__write(__os, reqSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_SelectSpecificData(RespondSpecficDataSeqHolder repSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __SelectSpecificData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            repSeq.value = RespondSpecficDataSeq.__read(__is, repSeq.value);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __SelectSpecificData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_SelectSpecificData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondSpecficDataSeqHolder repSeq = new RespondSpecficDataSeqHolder();
        try
        {
            __ret = __proxy.end_SelectSpecificData(repSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, repSeq.value);
    }

    private static final String __UpdateCompleteData_name = "UpdateCompleteData";

    public boolean UpdateCompleteData(RespondCompleteDataSeq reqSeq, RespondCompleteDataSequenceHolder repSeq)
    {
        return UpdateCompleteData(reqSeq, repSeq, null, false);
    }

    public boolean UpdateCompleteData(RespondCompleteDataSeq reqSeq, RespondCompleteDataSequenceHolder repSeq, java.util.Map<String, String> __ctx)
    {
        return UpdateCompleteData(reqSeq, repSeq, __ctx, true);
    }

    private boolean UpdateCompleteData(RespondCompleteDataSeq reqSeq, RespondCompleteDataSequenceHolder repSeq, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__UpdateCompleteData_name);
        return end_UpdateCompleteData(repSeq, begin_UpdateCompleteData(reqSeq, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq)
    {
        return begin_UpdateCompleteData(reqSeq, null, false, false, null);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateCompleteData(reqSeq, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, Ice.Callback __cb)
    {
        return begin_UpdateCompleteData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateCompleteData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, Callback_RdbDataOpt_UpdateCompleteData __cb)
    {
        return begin_UpdateCompleteData(reqSeq, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_UpdateCompleteData __cb)
    {
        return begin_UpdateCompleteData(reqSeq, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_UpdateCompleteData(reqSeq, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_UpdateCompleteData(reqSeq, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_UpdateCompleteData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                    java.util.Map<String, String> __ctx, 
                                                    FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_UpdateCompleteData(reqSeq, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_UpdateCompleteData
        {
            public CB(FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, java.util.List<RespondCompleteData> repSeq)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, repSeq);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                RdbDataOptPrxHelper.__UpdateCompleteData_completed(this, __result);
            }

            private final FunctionalCallback_RdbDataOpt_UpdateCompleteData_Response __responseCb;
        }
        return begin_UpdateCompleteData(reqSeq, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_UpdateCompleteData(RespondCompleteDataSeq reqSeq, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateCompleteData_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__UpdateCompleteData_name, __cb);
        try
        {
            __result.prepare(__UpdateCompleteData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RespondCompleteDataSeq.__write(__os, reqSeq);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_UpdateCompleteData(RespondCompleteDataSequenceHolder repSeq, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __UpdateCompleteData_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            repSeq.value = RespondCompleteDataSequenceHelper.read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __UpdateCompleteData_completed(com.gridnt.icestorm.RdbRealData._Callback_RdbDataOpt_UpdateCompleteData __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        RespondCompleteDataSequenceHolder repSeq = new RespondCompleteDataSequenceHolder();
        try
        {
            __ret = __proxy.end_UpdateCompleteData(repSeq, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, repSeq.value);
    }

    private static final String __UpdateTopoData_name = "UpdateTopoData";

    public void UpdateTopoData()
    {
        UpdateTopoData(null, false);
    }

    public void UpdateTopoData(java.util.Map<String, String> __ctx)
    {
        UpdateTopoData(__ctx, true);
    }

    private void UpdateTopoData(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_UpdateTopoData(begin_UpdateTopoData(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_UpdateTopoData()
    {
        return begin_UpdateTopoData(null, false, false, null);
    }

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx)
    {
        return begin_UpdateTopoData(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_UpdateTopoData(Ice.Callback __cb)
    {
        return begin_UpdateTopoData(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateTopoData(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateTopoData(Callback_RdbDataOpt_UpdateTopoData __cb)
    {
        return begin_UpdateTopoData(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, Callback_RdbDataOpt_UpdateTopoData __cb)
    {
        return begin_UpdateTopoData(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateTopoData(IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_UpdateTopoData(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_UpdateTopoData(IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_UpdateTopoData(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_UpdateTopoData(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_UpdateTopoData(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_UpdateTopoData(__ctx, 
                                    __explicitCtx, 
                                    __synchronous, 
                                    new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_UpdateTopoData(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__UpdateTopoData_name, __cb);
        try
        {
            __result.prepare(__UpdateTopoData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_UpdateTopoData(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __UpdateTopoData_name);
    }

    private static final String __isEmptyNode_name = "isEmptyNode";

    public boolean isEmptyNode(String dataType, String dataRid)
    {
        return isEmptyNode(dataType, dataRid, null, false);
    }

    public boolean isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx)
    {
        return isEmptyNode(dataType, dataRid, __ctx, true);
    }

    private boolean isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__isEmptyNode_name);
        return end_isEmptyNode(begin_isEmptyNode(dataType, dataRid, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid)
    {
        return begin_isEmptyNode(dataType, dataRid, null, false, false, null);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, Ice.Callback __cb)
    {
        return begin_isEmptyNode(dataType, dataRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, Callback_RdbDataOpt_isEmptyNode __cb)
    {
        return begin_isEmptyNode(dataType, dataRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_isEmptyNode __cb)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_isEmptyNode(dataType, dataRid, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isEmptyNode(dataType, dataRid, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                             String dataRid, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isEmptyNode(dataType, dataRid, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             RdbDataOptPrxHelper.__isEmptyNode_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_isEmptyNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isEmptyNode_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__isEmptyNode_name, __cb);
        try
        {
            __result.prepare(__isEmptyNode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(dataType);
            __os.writeString(dataRid);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_isEmptyNode(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __isEmptyNode_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __isEmptyNode_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_isEmptyNode(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __isOrphanNode_name = "isOrphanNode";

    public boolean isOrphanNode(String dataType, String dataRid)
    {
        return isOrphanNode(dataType, dataRid, null, false);
    }

    public boolean isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx)
    {
        return isOrphanNode(dataType, dataRid, __ctx, true);
    }

    private boolean isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__isOrphanNode_name);
        return end_isOrphanNode(begin_isOrphanNode(dataType, dataRid, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid)
    {
        return begin_isOrphanNode(dataType, dataRid, null, false, false, null);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, Ice.Callback __cb)
    {
        return begin_isOrphanNode(dataType, dataRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, Callback_RdbDataOpt_isOrphanNode __cb)
    {
        return begin_isOrphanNode(dataType, dataRid, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, String dataRid, java.util.Map<String, String> __ctx, Callback_RdbDataOpt_isOrphanNode __cb)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_isOrphanNode(dataType, dataRid, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isOrphanNode(dataType, dataRid, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                              String dataRid, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                               String dataRid, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_BoolCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_isOrphanNode(dataType, dataRid, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              RdbDataOptPrxHelper.__isOrphanNode_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_isOrphanNode(String dataType, 
                                               String dataRid, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__isOrphanNode_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__isOrphanNode_name, __cb);
        try
        {
            __result.prepare(__isOrphanNode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(dataType);
            __os.writeString(dataRid);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_isOrphanNode(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __isOrphanNode_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __isOrphanNode_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        com.gridnt.icestorm.RdbRealData.RdbDataOptPrx __proxy = (com.gridnt.icestorm.RdbRealData.RdbDataOptPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_isOrphanNode(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RdbDataOptPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RdbDataOptPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RdbDataOptPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RdbDataOptPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static RdbDataOptPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static RdbDataOptPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, RdbDataOptPrx.class, RdbDataOptPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RdbRealData::RdbDataOpt"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, RdbDataOptPrx v)
    {
        __os.writeProxy(v);
    }

    public static RdbDataOptPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RdbDataOptPrxHelper result = new RdbDataOptPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
