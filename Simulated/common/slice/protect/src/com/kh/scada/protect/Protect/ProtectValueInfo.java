// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `protect.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.protect.Protect;

public class ProtectValueInfo implements java.lang.Cloneable, java.io.Serializable
{
    public short UnitNo;

    public short ProLine;

    public OPERTYPE OperType;

    public short FuncCode;

    public short GroupNo;

    public short ProNum;

    public int requestId;

    public byte[] Vals;

    public ProtectValueInfo()
    {
        OperType = OPERTYPE.READSETTING;
    }

    public ProtectValueInfo(short UnitNo, short ProLine, OPERTYPE OperType, short FuncCode, short GroupNo, short ProNum, int requestId, byte[] Vals)
    {
        this.UnitNo = UnitNo;
        this.ProLine = ProLine;
        this.OperType = OperType;
        this.FuncCode = FuncCode;
        this.GroupNo = GroupNo;
        this.ProNum = ProNum;
        this.requestId = requestId;
        this.Vals = Vals;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ProtectValueInfo _r = null;
        if(rhs instanceof ProtectValueInfo)
        {
            _r = (ProtectValueInfo)rhs;
        }

        if(_r != null)
        {
            if(UnitNo != _r.UnitNo)
            {
                return false;
            }
            if(ProLine != _r.ProLine)
            {
                return false;
            }
            if(OperType != _r.OperType)
            {
                if(OperType == null || _r.OperType == null || !OperType.equals(_r.OperType))
                {
                    return false;
                }
            }
            if(FuncCode != _r.FuncCode)
            {
                return false;
            }
            if(GroupNo != _r.GroupNo)
            {
                return false;
            }
            if(ProNum != _r.ProNum)
            {
                return false;
            }
            if(requestId != _r.requestId)
            {
                return false;
            }
            if(!java.util.Arrays.equals(Vals, _r.Vals))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Protect::ProtectValueInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, UnitNo);
        __h = IceInternal.HashUtil.hashAdd(__h, ProLine);
        __h = IceInternal.HashUtil.hashAdd(__h, OperType);
        __h = IceInternal.HashUtil.hashAdd(__h, FuncCode);
        __h = IceInternal.HashUtil.hashAdd(__h, GroupNo);
        __h = IceInternal.HashUtil.hashAdd(__h, ProNum);
        __h = IceInternal.HashUtil.hashAdd(__h, requestId);
        __h = IceInternal.HashUtil.hashAdd(__h, Vals);
        return __h;
    }

    public ProtectValueInfo
    clone()
    {
        ProtectValueInfo c = null;
        try
        {
            c = (ProtectValueInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeShort(UnitNo);
        __os.writeShort(ProLine);
        OPERTYPE.__write(__os, OperType);
        __os.writeShort(FuncCode);
        __os.writeShort(GroupNo);
        __os.writeShort(ProNum);
        __os.writeInt(requestId);
        BytesHelper.write(__os, Vals);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        UnitNo = __is.readShort();
        ProLine = __is.readShort();
        OperType = OPERTYPE.__read(__is);
        FuncCode = __is.readShort();
        GroupNo = __is.readShort();
        ProNum = __is.readShort();
        requestId = __is.readInt();
        Vals = BytesHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, ProtectValueInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ProtectValueInfo
    __read(IceInternal.BasicStream __is, ProtectValueInfo __v)
    {
        if(__v == null)
        {
             __v = new ProtectValueInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ProtectValueInfo __nullMarshalValue = new ProtectValueInfo();

    public static final long serialVersionUID = 1182765176L;
}
