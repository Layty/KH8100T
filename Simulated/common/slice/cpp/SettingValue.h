// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `SettingValue.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __cpp_SettingValue_h__
#define __cpp_SettingValue_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif


std::string gbk_2_utf8(const std::string& strGBK);
std::string utf8_2_gbk(const std::string& strUTF8);


namespace IceProxy
{

namespace SettingValue
{

class CSettingValueApp;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::SettingValue::CSettingValueApp>&);
::IceProxy::Ice::Object* upCast(::IceProxy::SettingValue::CSettingValueApp*);

class CSettingValueFep;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::SettingValue::CSettingValueFep>&);
::IceProxy::Ice::Object* upCast(::IceProxy::SettingValue::CSettingValueFep*);

}

}

namespace SettingValue
{

class CSettingValueApp;
::Ice::Object* upCast(::SettingValue::CSettingValueApp*);
typedef ::IceInternal::Handle< ::SettingValue::CSettingValueApp> CSettingValueAppPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::SettingValue::CSettingValueApp> CSettingValueAppPrx;
void __patch(CSettingValueAppPtr&, const ::Ice::ObjectPtr&);

class CSettingValueFep;
::Ice::Object* upCast(::SettingValue::CSettingValueFep*);
typedef ::IceInternal::Handle< ::SettingValue::CSettingValueFep> CSettingValueFepPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::SettingValue::CSettingValueFep> CSettingValueFepPrx;
void __patch(CSettingValueFepPtr&, const ::Ice::ObjectPtr&);

}

namespace SettingValue
{

typedef ::std::vector< ::Ice::Byte> byteSeq;

typedef ::std::vector< ::std::string> stringSeq;

typedef ::std::vector< ::Ice::Short> shortSeq;

struct TduCfg
{
    ::std::string SettingFlag;
    ::Ice::Byte Version;
    ::Ice::Byte ChannelCheckCode;
    ::Ice::Byte FilterWidth;
    ::Ice::Byte FilterCtrlCode;
    ::Ice::Byte ChannelNum;
    ::Ice::Byte SamplingRate;
    ::Ice::Byte Rs;
    ::Ice::Byte RecordLength;
    ::Ice::Short TriggerInterval;
    ::Ice::Byte WorkFrequence;
    ::Ice::Byte YearL;
    ::Ice::Byte YearH;
    ::Ice::Byte IrigB;
    ::Ice::Byte Flash;
    ::Ice::Byte TDUStaAddr;
    ::std::string DevID;
    ::std::string StatName;
    ::SettingValue::stringSeq LineName;
    ::SettingValue::byteSeq ChnlsLineNum;
    ::Ice::Byte TimeZoneHour;
    ::Ice::Byte TimeZoneMinute;
    ::Ice::Byte Rsved;
    ::SettingValue::byteSeq EnChAndIsInvertPhase;
    ::SettingValue::byteSeq AIBoardTypeAndMesures;
    ::SettingValue::byteSeq DI;
    ::SettingValue::byteSeq DI2;
    ::SettingValue::shortSeq VarRatio;
    ::SettingValue::byteSeq VarRatioVice;
    ::SettingValue::shortSeq VolLevel;
    ::SettingValue::byteSeq ChannelGain;
    ::SettingValue::byteSeq TriggerThreshold;
    ::SettingValue::byteSeq LineCurrent;
    ::SettingValue::byteSeq LineVICorrection;
    ::SettingValue::byteSeq StartPara;
    ::SettingValue::byteSeq GainPara;
    ::SettingValue::byteSeq MACAddr1;
    ::SettingValue::byteSeq IPAddr1;
    ::SettingValue::byteSeq NetMask1;
    ::SettingValue::byteSeq Gateway1;
    ::Ice::Short Port1;
    ::SettingValue::byteSeq MACAddr2;
    ::SettingValue::byteSeq IPAddr2;
    ::SettingValue::byteSeq NetMask2;
    ::SettingValue::byteSeq Gateway2;
    ::Ice::Short Port2;
    ::Ice::Short NetReserve;
    ::SettingValue::byteSeq remoteIP1;
    ::Ice::Short remotePort1;
    ::SettingValue::byteSeq remoteIP2;
    ::Ice::Short remotePort2;
    ::Ice::Byte Com1ProtocolType;
    ::SettingValue::byteSeq Com1ProtocolPara;
    ::Ice::Byte LinkAddr103;
    ::Ice::Byte FunType103;
    ::Ice::Byte Com2ProtocolType;
    ::SettingValue::byteSeq Com2ProtocolPara;
    ::Ice::Byte LinkAddr2103;
    ::Ice::Byte FunType2103;
    ::std::string ModemPhone;
    ::std::string ModemInitCmd;
    ::Ice::Byte ModemState;
    ::Ice::Byte Rsved3;

    TduCfg & operator = (const unsigned char *pArray)
        {
            if (NULL == pArray) return *this;

            int i = 0;
            SettingFlag.assign((const char*)&pArray[i],6);i+=6;
            SettingFlag = SettingFlag.data();
            SettingFlag = gbk_2_utf8(SettingFlag);

            Version = pArray[i++];
            ChannelCheckCode = pArray[i++];
            FilterWidth = pArray[i++];
            FilterCtrlCode = pArray[i++];
            ChannelNum = pArray[i++];

            //SamplingRate = pArray[i++]*0x100;
            //SamplingRate += pArray[i++];
            SamplingRate = pArray[i++];
            //memcpy(&SamplingRate,&pArray[i],sizeof(::Ice::Short));i+=2;
            Rs = pArray[i++];

            RecordLength = pArray[i++];

            //TriggerInterval = pArray[i++]*0x100;
            //TriggerInterval += pArray[i++];
            memcpy(&TriggerInterval,&pArray[i],sizeof(::Ice::Short));i+=2;

            WorkFrequence = pArray[i++];
            YearL = pArray[i++];
            YearH = pArray[i++];
            IrigB = pArray[i++];
            Flash = pArray[i++];
            TDUStaAddr = pArray[i++];

            DevID.assign((const char*)&pArray[i],12);i+=12;
            DevID = DevID.data();
            DevID = gbk_2_utf8(DevID);
            StatName.assign((const char*)&pArray[i],20);i+=20;
            StatName = StatName.data();
            StatName = gbk_2_utf8(StatName);

            std::string tmpStr;
            for (unsigned int j = 0;j < 8;j++)
            {
                tmpStr.assign((const char*)&pArray[i],16);i+=16;
                tmpStr = tmpStr.data();
                tmpStr = gbk_2_utf8(tmpStr);
                LineName.push_back(tmpStr);
            }
            for (unsigned int j = 0;j < 24;j++)
            {
                ChnlsLineNum.push_back(pArray[i++]);
            }

            TimeZoneHour = pArray[i++];
            TimeZoneMinute = pArray[i++];
            i += 12;//跳过保留字段1

            for (unsigned int j = 0;j < 24;j++)
            {
                EnChAndIsInvertPhase.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 24;j++)
            {
                AIBoardTypeAndMesures.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                DI.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                short temShort = 0;
                //temShort = pArray[i++]*0x100;
                //temShort += pArray[i++];
                memcpy(&temShort,&pArray[i],sizeof(::Ice::Short));i+=2;
                VarRatio.push_back(temShort);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                VarRatioVice.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                short temShort = 0;
                //temShort = pArray[i++]*0x100;
                //temShort += pArray[i++];
                memcpy(&temShort,&pArray[i],sizeof(::Ice::Short));i+=2;
                VolLevel.push_back(temShort);
            }
            for (unsigned int j = 0;j < 24;j++)
            {
                ChannelGain.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 24;j++)
            {
                TriggerThreshold.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                LineCurrent.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 8;j++)
            {
                LineVICorrection.push_back(pArray[i++]);
            }

            for (unsigned int j = 0;j < 36;j++)
            {
                StartPara.push_back(pArray[i++]);
            }

            for (unsigned int j = 0;j < 24;j++)
            {
                GainPara.push_back(pArray[i++]);
            }

            //字段全用光，无保留字段

            for (unsigned int j = 0;j < 6;j++)
            {
                MACAddr1.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                IPAddr1.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                NetMask1.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                Gateway1.push_back(pArray[i++]);
            }
            //Port1 = pArray[i++]*0x100;
            //Port1 += pArray[i++];
            memcpy(&Port1,&pArray[i],sizeof(::Ice::Short));i+=2;
            for (unsigned int j = 0;j < 6;j++)
            {
                MACAddr2.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                IPAddr2.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                NetMask2.push_back(pArray[i++]);
            }
            for (unsigned int j = 0;j < 4;j++)
            {
                Gateway2.push_back(pArray[i++]);
            }
            //Port2 = pArray[i++]*0x100;
            //Port2 += pArray[i++];
            memcpy(&Port2,&pArray[i],sizeof(::Ice::Short));i+=2;
            //NetReserve = pArray[i++]*0x100;
            //NetReserve += pArray[i++];
            memcpy(&NetReserve,&pArray[i],sizeof(::Ice::Short));i+=2;

            for (unsigned int j = 0;j < 4;j++)
            {
                remoteIP1.push_back(pArray[i++]);
            }
            //remotePort1 = pArray[i++]*0x100;
            //remotePort1 += pArray[i++];
            memcpy(&remotePort1,&pArray[i],sizeof(::Ice::Short));i+=2;

            for (unsigned int j = 0;j < 4;j++)
            {
                remoteIP2.push_back(pArray[i++]);
            }
            //remotePort2 = pArray[i++]*0x100;
            //remotePort2 += pArray[i++];
            memcpy(&remotePort2,&pArray[i],sizeof(::Ice::Short));i+=2;

            Com1ProtocolType = pArray[i++];
            for (unsigned int j = 0;j < 6;j++)
            {
                Com1ProtocolPara.push_back(pArray[i++]);
            }
            LinkAddr103 = pArray[i++];
            FunType103 = pArray[i++];

            Com2ProtocolType = pArray[i++];
            for (unsigned int j = 0;j < 6;j++)
            {
                Com2ProtocolPara.push_back(pArray[i++]);
            }
            LinkAddr2103 = pArray[i++];
            FunType2103 = pArray[i++];

            ModemPhone.assign((const char*)&pArray[i],20);i+=20;
            ModemPhone = ModemPhone.data();
            ModemPhone = gbk_2_utf8(ModemPhone);

            ModemInitCmd.assign((const char*)&pArray[i],20);i+=20;
            ModemInitCmd = ModemInitCmd.data();
            ModemInitCmd = gbk_2_utf8(ModemInitCmd);

            ModemState = pArray[i++];

            //zhuqh add 2014-10-11
            for (unsigned int j = 0;j < 8;j++)
            {
                DI2.push_back(pArray[i++]);
            }

            i += 99;//跳过保留字段3

            return *this;
        }
    };

struct SettingValueInfo
{
    ::std::string deviceId;
    ::SettingValue::TduCfg tdu100Cfg;
};

const ::std::string SettingValueAppTopic = "settingvalue_app_operation";

const ::std::string SettingValueFepTopic = "settingvalue_fep_operation";

}

namespace Ice
{
template<>
struct StreamableTraits< ::SettingValue::TduCfg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 69;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::SettingValue::TduCfg, S>
{
    static void write(S* __os, const ::SettingValue::TduCfg& v)
    {
        __os->write(v.SettingFlag);
        __os->write(v.Version);
        __os->write(v.ChannelCheckCode);
        __os->write(v.FilterWidth);
        __os->write(v.FilterCtrlCode);
        __os->write(v.ChannelNum);
        __os->write(v.SamplingRate);
        __os->write(v.Rs);
        __os->write(v.RecordLength);
        __os->write(v.TriggerInterval);
        __os->write(v.WorkFrequence);
        __os->write(v.YearL);
        __os->write(v.YearH);
        __os->write(v.IrigB);
        __os->write(v.Flash);
        __os->write(v.TDUStaAddr);
        __os->write(v.DevID);
        __os->write(v.StatName);
        __os->write(v.LineName);
        __os->write(v.ChnlsLineNum);
        __os->write(v.TimeZoneHour);
        __os->write(v.TimeZoneMinute);
        __os->write(v.Rsved);
        __os->write(v.EnChAndIsInvertPhase);
        __os->write(v.AIBoardTypeAndMesures);
        __os->write(v.DI);
        __os->write(v.DI2);
        __os->write(v.VarRatio);
        __os->write(v.VarRatioVice);
        __os->write(v.VolLevel);
        __os->write(v.ChannelGain);
        __os->write(v.TriggerThreshold);
        __os->write(v.LineCurrent);
        __os->write(v.LineVICorrection);
        __os->write(v.StartPara);
        __os->write(v.GainPara);
        __os->write(v.MACAddr1);
        __os->write(v.IPAddr1);
        __os->write(v.NetMask1);
        __os->write(v.Gateway1);
        __os->write(v.Port1);
        __os->write(v.MACAddr2);
        __os->write(v.IPAddr2);
        __os->write(v.NetMask2);
        __os->write(v.Gateway2);
        __os->write(v.Port2);
        __os->write(v.NetReserve);
        __os->write(v.remoteIP1);
        __os->write(v.remotePort1);
        __os->write(v.remoteIP2);
        __os->write(v.remotePort2);
        __os->write(v.Com1ProtocolType);
        __os->write(v.Com1ProtocolPara);
        __os->write(v.LinkAddr103);
        __os->write(v.FunType103);
        __os->write(v.Com2ProtocolType);
        __os->write(v.Com2ProtocolPara);
        __os->write(v.LinkAddr2103);
        __os->write(v.FunType2103);
        __os->write(v.ModemPhone);
        __os->write(v.ModemInitCmd);
        __os->write(v.ModemState);
        __os->write(v.Rsved3);
    }
};

template<class S>
struct StreamReader< ::SettingValue::TduCfg, S>
{
    static void read(S* __is, ::SettingValue::TduCfg& v)
    {
        __is->read(v.SettingFlag);
        __is->read(v.Version);
        __is->read(v.ChannelCheckCode);
        __is->read(v.FilterWidth);
        __is->read(v.FilterCtrlCode);
        __is->read(v.ChannelNum);
        __is->read(v.SamplingRate);
        __is->read(v.Rs);
        __is->read(v.RecordLength);
        __is->read(v.TriggerInterval);
        __is->read(v.WorkFrequence);
        __is->read(v.YearL);
        __is->read(v.YearH);
        __is->read(v.IrigB);
        __is->read(v.Flash);
        __is->read(v.TDUStaAddr);
        __is->read(v.DevID);
        __is->read(v.StatName);
        __is->read(v.LineName);
        __is->read(v.ChnlsLineNum);
        __is->read(v.TimeZoneHour);
        __is->read(v.TimeZoneMinute);
        __is->read(v.Rsved);
        __is->read(v.EnChAndIsInvertPhase);
        __is->read(v.AIBoardTypeAndMesures);
        __is->read(v.DI);
        __is->read(v.DI2);
        __is->read(v.VarRatio);
        __is->read(v.VarRatioVice);
        __is->read(v.VolLevel);
        __is->read(v.ChannelGain);
        __is->read(v.TriggerThreshold);
        __is->read(v.LineCurrent);
        __is->read(v.LineVICorrection);
        __is->read(v.StartPara);
        __is->read(v.GainPara);
        __is->read(v.MACAddr1);
        __is->read(v.IPAddr1);
        __is->read(v.NetMask1);
        __is->read(v.Gateway1);
        __is->read(v.Port1);
        __is->read(v.MACAddr2);
        __is->read(v.IPAddr2);
        __is->read(v.NetMask2);
        __is->read(v.Gateway2);
        __is->read(v.Port2);
        __is->read(v.NetReserve);
        __is->read(v.remoteIP1);
        __is->read(v.remotePort1);
        __is->read(v.remoteIP2);
        __is->read(v.remotePort2);
        __is->read(v.Com1ProtocolType);
        __is->read(v.Com1ProtocolPara);
        __is->read(v.LinkAddr103);
        __is->read(v.FunType103);
        __is->read(v.Com2ProtocolType);
        __is->read(v.Com2ProtocolPara);
        __is->read(v.LinkAddr2103);
        __is->read(v.FunType2103);
        __is->read(v.ModemPhone);
        __is->read(v.ModemInitCmd);
        __is->read(v.ModemState);
        __is->read(v.Rsved3);
    }
};

template<>
struct StreamableTraits< ::SettingValue::SettingValueInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 70;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::SettingValue::SettingValueInfo, S>
{
    static void write(S* __os, const ::SettingValue::SettingValueInfo& v)
    {
        __os->write(v.deviceId);
        __os->write(v.tdu100Cfg);
    }
};

template<class S>
struct StreamReader< ::SettingValue::SettingValueInfo, S>
{
    static void read(S* __is, ::SettingValue::SettingValueInfo& v)
    {
        __is->read(v.deviceId);
        __is->read(v.tdu100Cfg);
    }
};

}

namespace SettingValue
{

class Callback_CSettingValueApp_readValueReply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CSettingValueApp_readValueReply_Base> Callback_CSettingValueApp_readValueReplyPtr;

class Callback_CSettingValueApp_writeValueReply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CSettingValueApp_writeValueReply_Base> Callback_CSettingValueApp_writeValueReplyPtr;

class Callback_CSettingValueFep_readValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CSettingValueFep_readValue_Base> Callback_CSettingValueFep_readValuePtr;

class Callback_CSettingValueFep_writeValue_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CSettingValueFep_writeValue_Base> Callback_CSettingValueFep_writeValuePtr;

}

namespace IceProxy
{

namespace SettingValue
{

class CSettingValueApp : virtual public ::IceProxy::Ice::Object
{
public:

    void readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip)
    {
        readValueReply(__p_settingVal, __p_flag, __p_tip, 0);
    }
    void readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::SettingValue::Callback_CSettingValueApp_readValueReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo& __p_settingVal, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::SettingValue::Callback_CSettingValueApp_readValueReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValueReply(__p_settingVal, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_readValueReply(const ::Ice::AsyncResultPtr&);
    
private:

    void readValueReply(const ::SettingValue::SettingValueInfo&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readValueReply(const ::SettingValue::SettingValueInfo&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip)
    {
        writeValueReply(__p_deviceId, __p_flag, __p_tip, 0);
    }
    void writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::SettingValue::Callback_CSettingValueApp_writeValueReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string& __p_deviceId, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::SettingValue::Callback_CSettingValueApp_writeValueReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValueReply(__p_deviceId, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_writeValueReply(const ::Ice::AsyncResultPtr&);
    
private:

    void writeValueReply(const ::std::string&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeValueReply(const ::std::string&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_secure(bool __secure) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_twoway() const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_oneway() const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_batchOneway() const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_datagram() const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_batchDatagram() const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_compress(bool __compress) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueApp> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CSettingValueApp*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class CSettingValueFep : virtual public ::IceProxy::Ice::Object
{
public:

    void readValue(const ::std::string& __p_deviceId)
    {
        readValue(__p_deviceId, 0);
    }
    void readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx)
    {
        readValue(__p_deviceId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_readValue(const ::std::string& __p_deviceId, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readValue(__p_deviceId, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_readValue(const ::std::string& __p_deviceId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readValue(__p_deviceId, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_readValue(__p_deviceId, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_readValue(__p_deviceId, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId)
    {
        return begin_readValue(__p_deviceId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx)
    {
        return begin_readValue(__p_deviceId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValue(__p_deviceId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValue(__p_deviceId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId, const ::SettingValue::Callback_CSettingValueFep_readValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValue(__p_deviceId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_readValue(const ::std::string& __p_deviceId, const ::Ice::Context& __ctx, const ::SettingValue::Callback_CSettingValueFep_readValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_readValue(__p_deviceId, &__ctx, __del, __cookie);
    }

    void end_readValue(const ::Ice::AsyncResultPtr&);
    
private:

    void readValue(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_readValue(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal)
    {
        writeValue(__p_settingVal, 0);
    }
    void writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx)
    {
        writeValue(__p_settingVal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeValue(__p_settingVal, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeValue(__p_settingVal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeValue(__p_settingVal, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeValue(__p_settingVal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal)
    {
        return begin_writeValue(__p_settingVal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx)
    {
        return begin_writeValue(__p_settingVal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValue(__p_settingVal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValue(__p_settingVal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::SettingValue::Callback_CSettingValueFep_writeValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValue(__p_settingVal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo& __p_settingVal, const ::Ice::Context& __ctx, const ::SettingValue::Callback_CSettingValueFep_writeValuePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeValue(__p_settingVal, &__ctx, __del, __cookie);
    }

    void end_writeValue(const ::Ice::AsyncResultPtr&);
    
private:

    void writeValue(const ::SettingValue::SettingValueInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeValue(const ::SettingValue::SettingValueInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_secure(bool __secure) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_twoway() const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_oneway() const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_batchOneway() const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_datagram() const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_batchDatagram() const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_compress(bool __compress) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_timeout(int __timeout) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<CSettingValueFep> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<CSettingValueFep*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace SettingValue
{

class CSettingValueApp : virtual public ::Ice::Object
{
public:

    typedef CSettingValueAppPrx ProxyType;
    typedef CSettingValueAppPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void readValueReply(const ::SettingValue::SettingValueInfo&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readValueReply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeValueReply(const ::std::string&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeValueReply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CSettingValueApp& l, const CSettingValueApp& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CSettingValueApp& l, const CSettingValueApp& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class CSettingValueFep : virtual public ::Ice::Object
{
public:

    typedef CSettingValueFepPrx ProxyType;
    typedef CSettingValueFepPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void readValue(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___readValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeValue(const ::SettingValue::SettingValueInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeValue(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const CSettingValueFep& l, const CSettingValueFep& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CSettingValueFep& l, const CSettingValueFep& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace SettingValue
{

template<class T>
class CallbackNC_CSettingValueApp_readValueReply : public Callback_CSettingValueApp_readValueReply_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CSettingValueApp_readValueReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_readValueReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_readValueReply<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_readValueReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_readValueReply<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CSettingValueApp_readValueReply : public Callback_CSettingValueApp_readValueReply_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CSettingValueApp_readValueReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_readValueReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_readValueReply<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_readValueReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_readValueReplyPtr
newCallback_CSettingValueApp_readValueReply(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_readValueReply<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CSettingValueApp_writeValueReply : public Callback_CSettingValueApp_writeValueReply_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CSettingValueApp_writeValueReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_writeValueReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_writeValueReply<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_writeValueReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueApp_writeValueReply<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CSettingValueApp_writeValueReply : public Callback_CSettingValueApp_writeValueReply_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CSettingValueApp_writeValueReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_writeValueReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_writeValueReply<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_writeValueReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueApp_writeValueReplyPtr
newCallback_CSettingValueApp_writeValueReply(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueApp_writeValueReply<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CSettingValueFep_readValue : public Callback_CSettingValueFep_readValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CSettingValueFep_readValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_readValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_readValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_readValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_readValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CSettingValueFep_readValue : public Callback_CSettingValueFep_readValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CSettingValueFep_readValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_readValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_readValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_readValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_readValuePtr
newCallback_CSettingValueFep_readValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_readValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CSettingValueFep_writeValue : public Callback_CSettingValueFep_writeValue_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CSettingValueFep_writeValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_writeValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_writeValue<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_writeValue<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CSettingValueFep_writeValue<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CSettingValueFep_writeValue : public Callback_CSettingValueFep_writeValue_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CSettingValueFep_writeValue(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_writeValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_writeValue<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_writeValue<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CSettingValueFep_writeValuePtr
newCallback_CSettingValueFep_writeValue(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CSettingValueFep_writeValue<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
