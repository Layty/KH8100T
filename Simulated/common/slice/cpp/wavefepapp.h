// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __cpp_wavefepapp_h__
#define __cpp_wavefepapp_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace wavefepapp
{

class RfwFepManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwFepManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::wavefepapp::RfwFepManager*);

class RfwAppManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwAppManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::wavefepapp::RfwAppManager*);

class clientManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::clientManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::wavefepapp::clientManager*);

}

}

namespace wavefepapp
{

class RfwFepManager;
::Ice::Object* upCast(::wavefepapp::RfwFepManager*);
typedef ::IceInternal::Handle< ::wavefepapp::RfwFepManager> RfwFepManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwFepManager> RfwFepManagerPrx;
void __patch(RfwFepManagerPtr&, const ::Ice::ObjectPtr&);

class RfwAppManager;
::Ice::Object* upCast(::wavefepapp::RfwAppManager*);
typedef ::IceInternal::Handle< ::wavefepapp::RfwAppManager> RfwAppManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwAppManager> RfwAppManagerPrx;
void __patch(RfwAppManagerPtr&, const ::Ice::ObjectPtr&);

class clientManager;
::Ice::Object* upCast(::wavefepapp::clientManager*);
typedef ::IceInternal::Handle< ::wavefepapp::clientManager> clientManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::clientManager> clientManagerPrx;
void __patch(clientManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace wavefepapp
{

enum RFWTYPE
{
    RFWKHP = 0,
    RFWKHSM = 1,
    RFWKHROD = 2,
    RFWKHHAVERFW = 3,
    RFWKHRFWDIR = 4
};

struct SRFWSOE
{
    ::Ice::Long TimeStamp;
    ::Ice::Short yxNo;
    ::Ice::Short value;

    bool operator==(const SRFWSOE& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(TimeStamp != __rhs.TimeStamp)
        {
            return false;
        }
        if(yxNo != __rhs.yxNo)
        {
            return false;
        }
        if(value != __rhs.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SRFWSOE& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(TimeStamp < __rhs.TimeStamp)
        {
            return true;
        }
        else if(__rhs.TimeStamp < TimeStamp)
        {
            return false;
        }
        if(yxNo < __rhs.yxNo)
        {
            return true;
        }
        else if(__rhs.yxNo < yxNo)
        {
            return false;
        }
        if(value < __rhs.value)
        {
            return true;
        }
        else if(__rhs.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SRFWSOE& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SRFWSOE& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SRFWSOE& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SRFWSOE& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::wavefepapp::SRFWSOE> SRFWSOESeq;

struct SRFWHead
{
    ::Ice::Int UnitNo;
    ::wavefepapp::RFWTYPE Type;
    ::Ice::Int FaultType;
    ::Ice::Long Time;
    ::Ice::Int Period;
    ::Ice::Int Source;
    ::Ice::Int Reason;
    ::Ice::Int Distance;
    ::Ice::Int ValueCount;
    ::Ice::Int IRate;
    ::Ice::Int U1Rate;
    ::Ice::Int U2Rate;
    ::Ice::Int SampeRate;
    ::Ice::Int ChannelNum;
    ::Ice::Int DotNumBeforeFault;
    ::Ice::Int DotNumAfterFault;
    ::wavefepapp::SRFWSOESeq soes;
};

typedef ::std::vector< ::Ice::Int> SRFWDataSeq;

struct SUnitRFW
{
    ::wavefepapp::SRFWHead Head;
    ::wavefepapp::SRFWDataSeq Data;
};

struct RFWPacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::wavefepapp::SUnitRFW frw;
};

enum RfwOperateType
{
    DUGRFWDIR,
    DUGRFWFIL,
    MANURFW
};

struct RfwOperate
{
    ::Ice::Short unitno;
    ::Ice::Short lineno;
    ::wavefepapp::RfwOperateType operateType;
    ::Ice::Short filename;
    ::Ice::Int requestId;

    bool operator==(const RfwOperate& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(unitno != __rhs.unitno)
        {
            return false;
        }
        if(lineno != __rhs.lineno)
        {
            return false;
        }
        if(operateType != __rhs.operateType)
        {
            return false;
        }
        if(filename != __rhs.filename)
        {
            return false;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RfwOperate& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(unitno < __rhs.unitno)
        {
            return true;
        }
        else if(__rhs.unitno < unitno)
        {
            return false;
        }
        if(lineno < __rhs.lineno)
        {
            return true;
        }
        else if(__rhs.lineno < lineno)
        {
            return false;
        }
        if(operateType < __rhs.operateType)
        {
            return true;
        }
        else if(__rhs.operateType < operateType)
        {
            return false;
        }
        if(filename < __rhs.filename)
        {
            return true;
        }
        else if(__rhs.filename < filename)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RfwOperate& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RfwOperate& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RfwOperate& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RfwOperate& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct RfwDir
{
    ::Ice::Short lineno;
    ::Ice::Short filename;
    ::Ice::Short filelength;
    ::Ice::Short filestate;
    ::Ice::Long filetime;

    bool operator==(const RfwDir& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(lineno != __rhs.lineno)
        {
            return false;
        }
        if(filename != __rhs.filename)
        {
            return false;
        }
        if(filelength != __rhs.filelength)
        {
            return false;
        }
        if(filestate != __rhs.filestate)
        {
            return false;
        }
        if(filetime != __rhs.filetime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RfwDir& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(lineno < __rhs.lineno)
        {
            return true;
        }
        else if(__rhs.lineno < lineno)
        {
            return false;
        }
        if(filename < __rhs.filename)
        {
            return true;
        }
        else if(__rhs.filename < filename)
        {
            return false;
        }
        if(filelength < __rhs.filelength)
        {
            return true;
        }
        else if(__rhs.filelength < filelength)
        {
            return false;
        }
        if(filestate < __rhs.filestate)
        {
            return true;
        }
        else if(__rhs.filestate < filestate)
        {
            return false;
        }
        if(filetime < __rhs.filetime)
        {
            return true;
        }
        else if(__rhs.filetime < filetime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RfwDir& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RfwDir& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RfwDir& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RfwDir& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::wavefepapp::RfwDir> SRFWDir;

struct RFWDirPacket
{
    ::Ice::Byte id;
    ::std::string fepNode;
    ::Ice::Short unitno;
    ::wavefepapp::SRFWDir rfwDir;
};

const ::std::string RfwFepTopic = "rfw_fep_operation";

const ::std::string RfwAppTopic = "rfw_app_operation";

typedef ::std::vector< ::std::string> FileDirSeq;

typedef ::std::vector< ::Ice::Byte> ByteSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::wavefepapp::RFWTYPE>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::wavefepapp::SRFWSOE>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::wavefepapp::SRFWSOE, S>
{
    static void write(S* __os, const ::wavefepapp::SRFWSOE& v)
    {
        __os->write(v.TimeStamp);
        __os->write(v.yxNo);
        __os->write(v.value);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::SRFWSOE, S>
{
    static void read(S* __is, ::wavefepapp::SRFWSOE& v)
    {
        __is->read(v.TimeStamp);
        __is->read(v.yxNo);
        __is->read(v.value);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::SRFWHead>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 66;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::wavefepapp::SRFWHead, S>
{
    static void write(S* __os, const ::wavefepapp::SRFWHead& v)
    {
        __os->write(v.UnitNo);
        __os->write(v.Type);
        __os->write(v.FaultType);
        __os->write(v.Time);
        __os->write(v.Period);
        __os->write(v.Source);
        __os->write(v.Reason);
        __os->write(v.Distance);
        __os->write(v.ValueCount);
        __os->write(v.IRate);
        __os->write(v.U1Rate);
        __os->write(v.U2Rate);
        __os->write(v.SampeRate);
        __os->write(v.ChannelNum);
        __os->write(v.DotNumBeforeFault);
        __os->write(v.DotNumAfterFault);
        __os->write(v.soes);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::SRFWHead, S>
{
    static void read(S* __is, ::wavefepapp::SRFWHead& v)
    {
        __is->read(v.UnitNo);
        __is->read(v.Type);
        __is->read(v.FaultType);
        __is->read(v.Time);
        __is->read(v.Period);
        __is->read(v.Source);
        __is->read(v.Reason);
        __is->read(v.Distance);
        __is->read(v.ValueCount);
        __is->read(v.IRate);
        __is->read(v.U1Rate);
        __is->read(v.U2Rate);
        __is->read(v.SampeRate);
        __is->read(v.ChannelNum);
        __is->read(v.DotNumBeforeFault);
        __is->read(v.DotNumAfterFault);
        __is->read(v.soes);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::SUnitRFW>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 67;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::wavefepapp::SUnitRFW, S>
{
    static void write(S* __os, const ::wavefepapp::SUnitRFW& v)
    {
        __os->write(v.Head);
        __os->write(v.Data);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::SUnitRFW, S>
{
    static void read(S* __is, ::wavefepapp::SUnitRFW& v)
    {
        __is->read(v.Head);
        __is->read(v.Data);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::RFWPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 69;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::wavefepapp::RFWPacket, S>
{
    static void write(S* __os, const ::wavefepapp::RFWPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.frw);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::RFWPacket, S>
{
    static void read(S* __is, ::wavefepapp::RFWPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.frw);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::RfwOperateType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::wavefepapp::RfwOperate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::wavefepapp::RfwOperate, S>
{
    static void write(S* __os, const ::wavefepapp::RfwOperate& v)
    {
        __os->write(v.unitno);
        __os->write(v.lineno);
        __os->write(v.operateType);
        __os->write(v.filename);
        __os->write(v.requestId);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::RfwOperate, S>
{
    static void read(S* __is, ::wavefepapp::RfwOperate& v)
    {
        __is->read(v.unitno);
        __is->read(v.lineno);
        __is->read(v.operateType);
        __is->read(v.filename);
        __is->read(v.requestId);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::RfwDir>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::wavefepapp::RfwDir, S>
{
    static void write(S* __os, const ::wavefepapp::RfwDir& v)
    {
        __os->write(v.lineno);
        __os->write(v.filename);
        __os->write(v.filelength);
        __os->write(v.filestate);
        __os->write(v.filetime);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::RfwDir, S>
{
    static void read(S* __is, ::wavefepapp::RfwDir& v)
    {
        __is->read(v.lineno);
        __is->read(v.filename);
        __is->read(v.filelength);
        __is->read(v.filestate);
        __is->read(v.filetime);
    }
};

template<>
struct StreamableTraits< ::wavefepapp::RFWDirPacket>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::wavefepapp::RFWDirPacket, S>
{
    static void write(S* __os, const ::wavefepapp::RFWDirPacket& v)
    {
        __os->write(v.id);
        __os->write(v.fepNode);
        __os->write(v.unitno);
        __os->write(v.rfwDir);
    }
};

template<class S>
struct StreamReader< ::wavefepapp::RFWDirPacket, S>
{
    static void read(S* __is, ::wavefepapp::RFWDirPacket& v)
    {
        __is->read(v.id);
        __is->read(v.fepNode);
        __is->read(v.unitno);
        __is->read(v.rfwDir);
    }
};

}

namespace wavefepapp
{

class Callback_RfwFepManager_rfwExecute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RfwFepManager_rfwExecute_Base> Callback_RfwFepManager_rfwExecutePtr;

class Callback_RfwAppManager_rfwExecuteEcho_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RfwAppManager_rfwExecuteEcho_Base> Callback_RfwAppManager_rfwExecuteEchoPtr;

class Callback_RfwAppManager_processRfwDir_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RfwAppManager_processRfwDir_Base> Callback_RfwAppManager_processRfwDirPtr;

class Callback_RfwAppManager_processRFW_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RfwAppManager_processRFW_Base> Callback_RfwAppManager_processRFWPtr;

class Callback_clientManager_getFileDirList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_clientManager_getFileDirList_Base> Callback_clientManager_getFileDirListPtr;

class Callback_clientManager_getFileCont_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_clientManager_getFileCont_Base> Callback_clientManager_getFileContPtr;

}

namespace IceProxy
{

namespace wavefepapp
{

class RfwFepManager : virtual public ::IceProxy::Ice::Object
{
public:

    void rfwExecute(const ::wavefepapp::RfwOperate& __p_operate)
    {
        rfwExecute(__p_operate, 0);
    }
    void rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx)
    {
        rfwExecute(__p_operate, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rfwExecute(__p_operate, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rfwExecute(__p_operate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rfwExecute(__p_operate, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rfwExecute(__p_operate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate)
    {
        return begin_rfwExecute(__p_operate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx)
    {
        return begin_rfwExecute(__p_operate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecute(__p_operate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecute(__p_operate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::wavefepapp::Callback_RfwFepManager_rfwExecutePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecute(__p_operate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_RfwFepManager_rfwExecutePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecute(__p_operate, &__ctx, __del, __cookie);
    }

    void end_rfwExecute(const ::Ice::AsyncResultPtr&);
    
private:

    void rfwExecute(const ::wavefepapp::RfwOperate&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rfwExecute(const ::wavefepapp::RfwOperate&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_twoway() const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_oneway() const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_batchOneway() const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_datagram() const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_batchDatagram() const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RfwFepManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RfwFepManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RfwAppManager : virtual public ::IceProxy::Ice::Object
{
public:

    void rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip)
    {
        rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0);
    }
    void rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::wavefepapp::Callback_RfwAppManager_rfwExecuteEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_RfwAppManager_rfwExecuteEchoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_rfwExecuteEcho(__p_operate, __p_flag, __p_tip, &__ctx, __del, __cookie);
    }

    void end_rfwExecuteEcho(const ::Ice::AsyncResultPtr&);
    
private:

    void rfwExecuteEcho(const ::wavefepapp::RfwOperate&, bool, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate&, bool, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket)
    {
        processRfwDir(__p_aRfwDirPacket, 0);
    }
    void processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx)
    {
        processRfwDir(__p_aRfwDirPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processRfwDir(__p_aRfwDirPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processRfwDir(__p_aRfwDirPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processRfwDir(__p_aRfwDirPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processRfwDir(__p_aRfwDirPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::wavefepapp::Callback_RfwAppManager_processRfwDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_RfwAppManager_processRfwDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRfwDir(__p_aRfwDirPacket, &__ctx, __del, __cookie);
    }

    void end_processRfwDir(const ::Ice::AsyncResultPtr&);
    
private:

    void processRfwDir(const ::wavefepapp::RFWDirPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processRfwDir(const ::wavefepapp::RFWDirPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket)
    {
        processRFW(__p_aRFWPacket, 0);
    }
    void processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx)
    {
        processRFW(__p_aRFWPacket, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processRFW(__p_aRFWPacket, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processRFW(__p_aRFWPacket, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_processRFW(__p_aRFWPacket, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_processRFW(__p_aRFWPacket, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket)
    {
        return begin_processRFW(__p_aRFWPacket, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx)
    {
        return begin_processRFW(__p_aRFWPacket, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRFW(__p_aRFWPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRFW(__p_aRFWPacket, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::wavefepapp::Callback_RfwAppManager_processRFWPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRFW(__p_aRFWPacket, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_RfwAppManager_processRFWPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_processRFW(__p_aRFWPacket, &__ctx, __del, __cookie);
    }

    void end_processRFW(const ::Ice::AsyncResultPtr&);
    
private:

    void processRFW(const ::wavefepapp::RFWPacket&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_processRFW(const ::wavefepapp::RFWPacket&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_twoway() const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_oneway() const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_batchOneway() const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_datagram() const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_batchDatagram() const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RfwAppManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RfwAppManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class clientManager : virtual public ::IceProxy::Ice::Object
{
public:

    bool getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, ::wavefepapp::FileDirSeq& __p_fileList)
    {
        return getFileDirList(__p_unitNo, __p_startDate, __p_endDate, __p_fileList, 0);
    }
    bool getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, ::wavefepapp::FileDirSeq& __p_fileList, const ::Ice::Context& __ctx)
    {
        return getFileDirList(__p_unitNo, __p_startDate, __p_endDate, __p_fileList, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::IceInternal::Function<void (bool, const ::wavefepapp::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::wavefepapp::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::wavefepapp::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context& __ctx)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::wavefepapp::Callback_clientManager_getFileDirListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_clientManager_getFileDirListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, &__ctx, __del, __cookie);
    }

    bool end_getFileDirList(::wavefepapp::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr&);
    
private:

    bool getFileDirList(::Ice::Int, const ::std::string&, const ::std::string&, ::wavefepapp::FileDirSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileDirList(::Ice::Int, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, ::std::string& __p_strInf, ::std::string& __p_strCfg, ::wavefepapp::ByteSeq& __p_rfwDatas)
    {
        return getFileCont(__p_unitNo, __p_strFileName, __p_strInf, __p_strCfg, __p_rfwDatas, 0);
    }
    bool getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, ::std::string& __p_strInf, ::std::string& __p_strCfg, ::wavefepapp::ByteSeq& __p_rfwDatas, const ::Ice::Context& __ctx)
    {
        return getFileCont(__p_unitNo, __p_strFileName, __p_strInf, __p_strCfg, __p_rfwDatas, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileCont(__p_unitNo, __p_strFileName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getFileCont(__p_unitNo, __p_strFileName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context& __ctx)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::wavefepapp::Callback_clientManager_getFileContPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context& __ctx, const ::wavefepapp::Callback_clientManager_getFileContPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getFileCont(__p_unitNo, __p_strFileName, &__ctx, __del, __cookie);
    }

    bool end_getFileCont(::std::string& __p_strInf, ::std::string& __p_strCfg, ::wavefepapp::ByteSeq& __p_rfwDatas, const ::Ice::AsyncResultPtr&);
    
private:

    bool getFileCont(::Ice::Int, const ::std::string&, ::std::string&, ::std::string&, ::wavefepapp::ByteSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getFileCont(::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<clientManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_twoway() const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_oneway() const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_batchOneway() const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_datagram() const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_batchDatagram() const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<clientManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<clientManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace wavefepapp
{

class RfwFepManager : virtual public ::Ice::Object
{
public:

    typedef RfwFepManagerPrx ProxyType;
    typedef RfwFepManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void rfwExecute(const ::wavefepapp::RfwOperate&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rfwExecute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RfwFepManager& l, const RfwFepManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RfwFepManager& l, const RfwFepManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RfwAppManager : virtual public ::Ice::Object
{
public:

    typedef RfwAppManagerPrx ProxyType;
    typedef RfwAppManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void rfwExecuteEcho(const ::wavefepapp::RfwOperate&, bool, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___rfwExecuteEcho(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void processRfwDir(const ::wavefepapp::RFWDirPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processRfwDir(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void processRFW(const ::wavefepapp::RFWPacket&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___processRFW(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RfwAppManager& l, const RfwAppManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RfwAppManager& l, const RfwAppManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class clientManager : virtual public ::Ice::Object
{
public:

    typedef clientManagerPrx ProxyType;
    typedef clientManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual bool getFileDirList(::Ice::Int, const ::std::string&, const ::std::string&, ::wavefepapp::FileDirSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFileDirList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getFileCont(::Ice::Int, const ::std::string&, ::std::string&, ::std::string&, ::wavefepapp::ByteSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getFileCont(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const clientManager& l, const clientManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const clientManager& l, const clientManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace wavefepapp
{

template<class T>
class CallbackNC_RfwFepManager_rfwExecute : public Callback_RfwFepManager_rfwExecute_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RfwFepManager_rfwExecute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwFepManager_rfwExecute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwFepManager_rfwExecute<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwFepManager_rfwExecute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwFepManager_rfwExecute<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RfwFepManager_rfwExecute : public Callback_RfwFepManager_rfwExecute_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RfwFepManager_rfwExecute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwFepManager_rfwExecute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwFepManager_rfwExecute<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwFepManager_rfwExecute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwFepManager_rfwExecutePtr
newCallback_RfwFepManager_rfwExecute(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwFepManager_rfwExecute<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RfwAppManager_rfwExecuteEcho : public Callback_RfwAppManager_rfwExecuteEcho_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RfwAppManager_rfwExecuteEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_rfwExecuteEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_rfwExecuteEcho<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_rfwExecuteEcho<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_rfwExecuteEcho<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RfwAppManager_rfwExecuteEcho : public Callback_RfwAppManager_rfwExecuteEcho_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RfwAppManager_rfwExecuteEcho(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_rfwExecuteEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_rfwExecuteEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_rfwExecuteEcho<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_rfwExecuteEchoPtr
newCallback_RfwAppManager_rfwExecuteEcho(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_rfwExecuteEcho<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RfwAppManager_processRfwDir : public Callback_RfwAppManager_processRfwDir_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RfwAppManager_processRfwDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRfwDir<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRfwDir<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRfwDir<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRfwDir<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RfwAppManager_processRfwDir : public Callback_RfwAppManager_processRfwDir_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RfwAppManager_processRfwDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRfwDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRfwDir<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRfwDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRfwDirPtr
newCallback_RfwAppManager_processRfwDir(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRfwDir<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RfwAppManager_processRFW : public Callback_RfwAppManager_processRFW_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RfwAppManager_processRFW(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRFW<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRFW<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRFW<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RfwAppManager_processRFW<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RfwAppManager_processRFW : public Callback_RfwAppManager_processRFW_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RfwAppManager_processRFW(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRFW<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRFW<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRFW<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RfwAppManager_processRFWPtr
newCallback_RfwAppManager_processRFW(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RfwAppManager_processRFW<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_clientManager_getFileDirList : public Callback_clientManager_getFileDirList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::wavefepapp::FileDirSeq&);

    CallbackNC_clientManager_getFileDirList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
        ::wavefepapp::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_getFileDirList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, fileList);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_clientManager_getFileDirListPtr
newCallback_clientManager_getFileDirList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::wavefepapp::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_clientManager_getFileDirList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_clientManager_getFileDirListPtr
newCallback_clientManager_getFileDirList(T* instance, void (T::*cb)(bool, const ::wavefepapp::FileDirSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_clientManager_getFileDirList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_clientManager_getFileDirList : public Callback_clientManager_getFileDirList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::wavefepapp::FileDirSeq&, const CT&);

    Callback_clientManager_getFileDirList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
        ::wavefepapp::FileDirSeq fileList;
        bool __ret;
        try
        {
            __ret = __proxy->end_getFileDirList(fileList, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, fileList, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_clientManager_getFileDirListPtr
newCallback_clientManager_getFileDirList(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::wavefepapp::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_clientManager_getFileDirList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_clientManager_getFileDirListPtr
newCallback_clientManager_getFileDirList(T* instance, void (T::*cb)(bool, const ::wavefepapp::FileDirSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_clientManager_getFileDirList<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_clientManager_getFileCont : public Callback_clientManager_getFileCont_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&);

    CallbackNC_clientManager_getFileCont(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string strInf;
        ::std::string strCfg;
        ::wavefepapp::ByteSeq rfwDatas;
        bool __ret;
        try
        {
            __ret = __proxy->end_getFileCont(strInf, strCfg, rfwDatas, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret, strInf, strCfg, rfwDatas);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_clientManager_getFileContPtr
newCallback_clientManager_getFileCont(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_clientManager_getFileCont<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_clientManager_getFileContPtr
newCallback_clientManager_getFileCont(T* instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_clientManager_getFileCont<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_clientManager_getFileCont : public Callback_clientManager_getFileCont_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&, const CT&);

    Callback_clientManager_getFileCont(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string strInf;
        ::std::string strCfg;
        ::wavefepapp::ByteSeq rfwDatas;
        bool __ret;
        try
        {
            __ret = __proxy->end_getFileCont(strInf, strCfg, rfwDatas, __result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, strInf, strCfg, rfwDatas, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_clientManager_getFileContPtr
newCallback_clientManager_getFileCont(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_clientManager_getFileCont<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_clientManager_getFileContPtr
newCallback_clientManager_getFileCont(T* instance, void (T::*cb)(bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_clientManager_getFileCont<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
