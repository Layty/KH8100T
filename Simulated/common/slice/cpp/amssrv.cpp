// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `amssrv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <amssrv.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Amssrv__CAmsManager__Register_name = "Register";

const ::std::string __Amssrv__CAmsManager__Quit_name = "Quit";

const ::std::string __Amssrv__CAmsManager__AmsHeartBeat_name = "AmsHeartBeat";

const ::std::string __Amssrv__CAmsApp__Register_name = "Register";

const ::std::string __Amssrv__CAmsApp__FinishRegister_name = "FinishRegister";

const ::std::string __Amssrv__CAmsApp__Quit_name = "Quit";

const ::std::string __Amssrv__CAmsApp__shiftRole_name = "shiftRole";

const ::std::string __Amssrv__CAmsApp__GetRole_name = "GetRole";

const ::std::string __Amssrv__CAmsApp__HeartBeat_name = "HeartBeat";

const ::std::string __Amssrv__CAmsApp__getServerNodeList_name = "getServerNodeList";

const ::std::string __Amssrv__CAmsApp__setServerNodeList_name = "setServerNodeList";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Amssrv::CAmsException> __Amssrv__CAmsException_init("::Amssrv::CAmsException");

}

Amssrv::CAmsException::CAmsException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

Amssrv::CAmsException::~CAmsException() throw()
{
}

::std::string
Amssrv::CAmsException::ice_name() const
{
    return "Amssrv::CAmsException";
}

Amssrv::CAmsException*
Amssrv::CAmsException::ice_clone() const
{
    return new CAmsException(*this);
}

void
Amssrv::CAmsException::ice_throw() const
{
    throw *this;
}

void
Amssrv::CAmsException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Amssrv::CAmsException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
Amssrv::CAmsException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Amssrv::upCast(::IceProxy::Amssrv::CAmsManager* p) { return p; }

void
::IceProxy::Amssrv::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Amssrv::CAmsManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Amssrv::CAmsManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Amssrv::CAmsManager::Register(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsManager__Register_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsManager__Register_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __os->write(__p_strRole);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsManager::begin_Register(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsManager__Register_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsManager__Register_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsManager__Register_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __os->write(__p_strRole);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsManager::__begin_Register(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsManagerPrx __proxy = ::Amssrv::CAmsManagerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_Register(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_Register(__p_strServerName, __p_strRole, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Amssrv::CAmsManager::end_Register(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsManager__Register_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Amssrv::CAmsManager::Quit(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsManager__Quit_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsManager::begin_Quit(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsManager__Quit_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsManager__Quit_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Amssrv::CAmsManager::end_Quit(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Amssrv__CAmsManager__Quit_name);
}

void
IceProxy::Amssrv::CAmsManager::AmsHeartBeat(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsManager__AmsHeartBeat_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsManager::begin_AmsHeartBeat(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsManager__AmsHeartBeat_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsManager__AmsHeartBeat_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Amssrv::CAmsManager::end_AmsHeartBeat(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Amssrv__CAmsManager__AmsHeartBeat_name);
}

const ::std::string&
IceProxy::Amssrv::CAmsManager::ice_staticId()
{
    return ::Amssrv::CAmsManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Amssrv::CAmsManager::__newInstance() const
{
    return new CAmsManager;
}
::IceProxy::Ice::Object* ::IceProxy::Amssrv::upCast(::IceProxy::Amssrv::CAmsApp* p) { return p; }

void
::IceProxy::Amssrv::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Amssrv::CAmsApp>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Amssrv::CAmsApp;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::Amssrv::CAmsApp::Register(const ::std::string& __p_strType, const ::Amssrv::Strings& __p_ipVect, ::Ice::Int __p_num, ::Amssrv::ServerNode& __p_serverInfo, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsApp__Register_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__Register_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strType);
        __os->write(__p_ipVect);
        __os->write(__p_num);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_serverInfo);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_Register(const ::std::string& __p_strType, const ::Amssrv::Strings& __p_ipVect, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsApp__Register_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__Register_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__Register_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strType);
        __os->write(__p_ipVect);
        __os->write(__p_num);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::__begin_Register(const ::std::string& __p_strType, const ::Amssrv::Strings& __p_ipVect, ::Ice::Int __p_num, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&, const ::Amssrv::ServerNode&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&, const ::Amssrv::ServerNode&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsAppPrx __proxy = ::Amssrv::CAmsAppPrx::uncheckedCast(__result->getProxy());
            ::Amssrv::ServerNode __p_serverInfo;
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_Register(__p_serverInfo, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_serverInfo);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&, const ::Amssrv::ServerNode&)> _response;
    };
    return begin_Register(__p_strType, __p_ipVect, __p_num, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Amssrv::CAmsApp::end_Register(::Amssrv::ServerNode& __p_serverInfo, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsApp__Register_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_serverInfo);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Amssrv::CAmsApp::FinishRegister(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::std::string& __p_district, const ::std::string& __p_section, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsApp__FinishRegister_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__FinishRegister_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __os->write(__p_strRole);
        __os->write(__p_district);
        __os->write(__p_section);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_FinishRegister(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::std::string& __p_district, const ::std::string& __p_section, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsApp__FinishRegister_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__FinishRegister_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__FinishRegister_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __os->write(__p_strRole);
        __os->write(__p_district);
        __os->write(__p_section);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::__begin_FinishRegister(const ::std::string& __p_strServerName, const ::std::string& __p_strRole, const ::std::string& __p_district, const ::std::string& __p_section, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsAppPrx __proxy = ::Amssrv::CAmsAppPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_FinishRegister(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_FinishRegister(__p_strServerName, __p_strRole, __p_district, __p_section, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Amssrv::CAmsApp::end_FinishRegister(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsApp__FinishRegister_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Amssrv::CAmsApp::Quit(const ::Amssrv::ServerNode& __p_serverInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__Quit_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_Quit(const ::Amssrv::ServerNode& __p_serverInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__Quit_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__Quit_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverInfo);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Amssrv::CAmsApp::end_Quit(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Amssrv__CAmsApp__Quit_name);
}

void
IceProxy::Amssrv::CAmsApp::shiftRole(const ::std::string& __p_strType, const ::std::string& __p_strServerName, const ::std::string& __p_strIp, ::Ice::Int __p_port, const ::std::string& __p_strRole, const ::std::string& __p_strPart, const ::std::string& __p_strSec, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__shiftRole_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strType);
        __os->write(__p_strServerName);
        __os->write(__p_strIp);
        __os->write(__p_port);
        __os->write(__p_strRole);
        __os->write(__p_strPart);
        __os->write(__p_strSec);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_shiftRole(const ::std::string& __p_strType, const ::std::string& __p_strServerName, const ::std::string& __p_strIp, ::Ice::Int __p_port, const ::std::string& __p_strRole, const ::std::string& __p_strPart, const ::std::string& __p_strSec, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__shiftRole_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__shiftRole_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strType);
        __os->write(__p_strServerName);
        __os->write(__p_strIp);
        __os->write(__p_port);
        __os->write(__p_strRole);
        __os->write(__p_strPart);
        __os->write(__p_strSec);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Amssrv::CAmsApp::end_shiftRole(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Amssrv__CAmsApp__shiftRole_name);
}

::std::string
IceProxy::Amssrv::CAmsApp::GetRole(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsApp__GetRole_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__GetRole_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_GetRole(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsApp__GetRole_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__GetRole_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__GetRole_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::__begin_GetRole(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsAppPrx __proxy = ::Amssrv::CAmsAppPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_GetRole(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_GetRole(__p_strServerName, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Amssrv::CAmsApp::end_GetRole(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsApp__GetRole_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Amssrv::CAmsApp::HeartBeat(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsApp__HeartBeat_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__HeartBeat_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_HeartBeat(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsApp__HeartBeat_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__HeartBeat_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__HeartBeat_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_strServerName);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::__begin_HeartBeat(const ::std::string& __p_strServerName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsAppPrx __proxy = ::Amssrv::CAmsAppPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_HeartBeat(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_HeartBeat(__p_strServerName, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Amssrv::CAmsApp::end_HeartBeat(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsApp__HeartBeat_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Amssrv::CAmsException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Amssrv::ServerNodeSeq
IceProxy::Amssrv::CAmsApp::getServerNodeList(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Amssrv__CAmsApp__getServerNodeList_name);
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__getServerNodeList_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Amssrv::ServerNodeSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_getServerNodeList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Amssrv__CAmsApp__getServerNodeList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__getServerNodeList_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__getServerNodeList_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::__begin_getServerNodeList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Amssrv::ServerNodeSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Amssrv::ServerNodeSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Amssrv::CAmsAppPrx __proxy = ::Amssrv::CAmsAppPrx::uncheckedCast(__result->getProxy());
            ::Amssrv::ServerNodeSeq __ret;
            try
            {
                __ret = __proxy->end_getServerNodeList(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Amssrv::ServerNodeSeq&)> _response;
    };
    return begin_getServerNodeList(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Amssrv::ServerNodeSeq
IceProxy::Amssrv::CAmsApp::end_getServerNodeList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Amssrv__CAmsApp__getServerNodeList_name);
    ::Amssrv::ServerNodeSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Amssrv::CAmsApp::setServerNodeList(const ::Amssrv::ServerNodeSeq& __p_serNodeSeq, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Amssrv__CAmsApp__setServerNodeList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serNodeSeq);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Amssrv::CAmsApp::begin_setServerNodeList(const ::Amssrv::ServerNodeSeq& __p_serNodeSeq, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Amssrv__CAmsApp__setServerNodeList_name, __del, __cookie);
    try
    {
        __result->prepare(__Amssrv__CAmsApp__setServerNodeList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serNodeSeq);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Amssrv::CAmsApp::end_setServerNodeList(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Amssrv__CAmsApp__setServerNodeList_name);
}

const ::std::string&
IceProxy::Amssrv::CAmsApp::ice_staticId()
{
    return ::Amssrv::CAmsApp::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Amssrv::CAmsApp::__newInstance() const
{
    return new CAmsApp;
}

::Ice::Object* Amssrv::upCast(::Amssrv::CAmsManager* p) { return p; }

namespace
{
const ::std::string __Amssrv__CAmsManager_ids[2] =
{
    "::Amssrv::CAmsManager",
    "::Ice::Object"
};

}

bool
Amssrv::CAmsManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Amssrv__CAmsManager_ids, __Amssrv__CAmsManager_ids + 2, _s);
}

::std::vector< ::std::string>
Amssrv::CAmsManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Amssrv__CAmsManager_ids[0], &__Amssrv__CAmsManager_ids[2]);
}

const ::std::string&
Amssrv::CAmsManager::ice_id(const ::Ice::Current&) const
{
    return __Amssrv__CAmsManager_ids[0];
}

const ::std::string&
Amssrv::CAmsManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Amssrv::CAmsManager";
    return typeId;
#else
    return __Amssrv__CAmsManager_ids[0];
#endif
}

::Ice::DispatchStatus
Amssrv::CAmsManager::___Register(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strServerName;
    ::std::string __p_strRole;
    __is->read(__p_strServerName);
    __is->read(__p_strRole);
    __inS.endReadParams();
    try
    {
        Register(__p_strServerName, __p_strRole, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Amssrv::CAmsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Amssrv::CAmsManager::___Quit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    Quit(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Amssrv::CAmsManager::___AmsHeartBeat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strServerName;
    __is->read(__p_strServerName);
    __inS.endReadParams();
    AmsHeartBeat(__p_strServerName, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Amssrv__CAmsManager_all[] =
{
    "AmsHeartBeat",
    "Quit",
    "Register",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Amssrv::CAmsManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Amssrv__CAmsManager_all, __Amssrv__CAmsManager_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Amssrv__CAmsManager_all)
    {
        case 0:
        {
            return ___AmsHeartBeat(in, current);
        }
        case 1:
        {
            return ___Quit(in, current);
        }
        case 2:
        {
            return ___Register(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Amssrv::CAmsManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Amssrv::CAmsManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Amssrv::__patch(CAmsManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Amssrv::CAmsManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Amssrv::CAmsManager::ice_staticId(), v);
    }
}

::Ice::Object* Amssrv::upCast(::Amssrv::CAmsApp* p) { return p; }

namespace
{
const ::std::string __Amssrv__CAmsApp_ids[2] =
{
    "::Amssrv::CAmsApp",
    "::Ice::Object"
};

}

bool
Amssrv::CAmsApp::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Amssrv__CAmsApp_ids, __Amssrv__CAmsApp_ids + 2, _s);
}

::std::vector< ::std::string>
Amssrv::CAmsApp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Amssrv__CAmsApp_ids[0], &__Amssrv__CAmsApp_ids[2]);
}

const ::std::string&
Amssrv::CAmsApp::ice_id(const ::Ice::Current&) const
{
    return __Amssrv__CAmsApp_ids[0];
}

const ::std::string&
Amssrv::CAmsApp::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Amssrv::CAmsApp";
    return typeId;
#else
    return __Amssrv__CAmsApp_ids[0];
#endif
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___Register(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strType;
    ::Amssrv::Strings __p_ipVect;
    ::Ice::Int __p_num;
    __is->read(__p_strType);
    __is->read(__p_ipVect);
    __is->read(__p_num);
    __inS.endReadParams();
    ::Amssrv::ServerNode __p_serverInfo;
    try
    {
        ::std::string __ret = Register(__p_strType, __p_ipVect, __p_num, __p_serverInfo, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverInfo);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Amssrv::CAmsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___FinishRegister(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strServerName;
    ::std::string __p_strRole;
    ::std::string __p_district;
    ::std::string __p_section;
    __is->read(__p_strServerName);
    __is->read(__p_strRole);
    __is->read(__p_district);
    __is->read(__p_section);
    __inS.endReadParams();
    try
    {
        FinishRegister(__p_strServerName, __p_strRole, __p_district, __p_section, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Amssrv::CAmsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___Quit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Amssrv::ServerNode __p_serverInfo;
    __is->read(__p_serverInfo);
    __inS.endReadParams();
    Quit(__p_serverInfo, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___shiftRole(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strType;
    ::std::string __p_strServerName;
    ::std::string __p_strIp;
    ::Ice::Int __p_port;
    ::std::string __p_strRole;
    ::std::string __p_strPart;
    ::std::string __p_strSec;
    __is->read(__p_strType);
    __is->read(__p_strServerName);
    __is->read(__p_strIp);
    __is->read(__p_port);
    __is->read(__p_strRole);
    __is->read(__p_strPart);
    __is->read(__p_strSec);
    __inS.endReadParams();
    shiftRole(__p_strType, __p_strServerName, __p_strIp, __p_port, __p_strRole, __p_strPart, __p_strSec, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___GetRole(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strServerName;
    __is->read(__p_strServerName);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = GetRole(__p_strServerName, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Amssrv::CAmsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___HeartBeat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_strServerName;
    __is->read(__p_strServerName);
    __inS.endReadParams();
    try
    {
        HeartBeat(__p_strServerName, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Amssrv::CAmsException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___getServerNodeList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Amssrv::ServerNodeSeq __ret = getServerNodeList(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Amssrv::CAmsApp::___setServerNodeList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Amssrv::ServerNodeSeq __p_serNodeSeq;
    __is->read(__p_serNodeSeq);
    __inS.endReadParams();
    setServerNodeList(__p_serNodeSeq, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Amssrv__CAmsApp_all[] =
{
    "FinishRegister",
    "GetRole",
    "HeartBeat",
    "Quit",
    "Register",
    "getServerNodeList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setServerNodeList",
    "shiftRole"
};

}

::Ice::DispatchStatus
Amssrv::CAmsApp::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Amssrv__CAmsApp_all, __Amssrv__CAmsApp_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Amssrv__CAmsApp_all)
    {
        case 0:
        {
            return ___FinishRegister(in, current);
        }
        case 1:
        {
            return ___GetRole(in, current);
        }
        case 2:
        {
            return ___HeartBeat(in, current);
        }
        case 3:
        {
            return ___Quit(in, current);
        }
        case 4:
        {
            return ___Register(in, current);
        }
        case 5:
        {
            return ___getServerNodeList(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___setServerNodeList(in, current);
        }
        case 11:
        {
            return ___shiftRole(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Amssrv::CAmsApp::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Amssrv::CAmsApp::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Amssrv::__patch(CAmsAppPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Amssrv::CAmsAppPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Amssrv::CAmsApp::ice_staticId(), v);
    }
}
