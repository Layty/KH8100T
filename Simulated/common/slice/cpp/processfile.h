// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `processfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __processfile_h__
#define __processfile_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ProcessFile
{

class ProcessFileManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ProcessFile::ProcessFileManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::ProcessFile::ProcessFileManager*);

}

}

namespace ProcessFile
{

class ProcessFileManager;
::Ice::Object* upCast(::ProcessFile::ProcessFileManager*);
typedef ::IceInternal::Handle< ::ProcessFile::ProcessFileManager> ProcessFileManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ProcessFile::ProcessFileManager> ProcessFileManagerPrx;
void __patch(ProcessFileManagerPtr&, const ::Ice::ObjectPtr&);

}

namespace ProcessFile
{

typedef ::std::vector< ::Ice::Byte> Bytes;

struct FileContent
{
    ::Ice::Long pos;
    ::ProcessFile::Bytes content;
    bool status;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::ProcessFile::FileContent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 10;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ProcessFile::FileContent, S>
{
    static void write(S* __os, const ::ProcessFile::FileContent& v)
    {
        __os->write(v.pos);
        __os->write(v.content);
        __os->write(v.status);
    }
};

template<class S>
struct StreamReader< ::ProcessFile::FileContent, S>
{
    static void read(S* __is, ::ProcessFile::FileContent& v)
    {
        __is->read(v.pos);
        __is->read(v.content);
        __is->read(v.status);
    }
};

}

namespace ProcessFile
{

class Callback_ProcessFileManager_requestFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProcessFileManager_requestFile_Base> Callback_ProcessFileManager_requestFilePtr;

class Callback_ProcessFileManager_sendFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProcessFileManager_sendFile_Base> Callback_ProcessFileManager_sendFilePtr;

}

namespace IceProxy
{

namespace ProcessFile
{

class ProcessFileManager : virtual public ::IceProxy::Ice::Object
{
public:

    ::ProcessFile::FileContent requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos)
    {
        return requestFile(__p_title, __p_pos, 0);
    }
    ::ProcessFile::FileContent requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return requestFile(__p_title, __p_pos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::ProcessFile::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestFile(__p_title, __p_pos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestFile(__p_title, __p_pos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::ProcessFile::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_requestFile(__p_title, __p_pos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_requestFile(__p_title, __p_pos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::ProcessFile::FileContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos)
    {
        return begin_requestFile(__p_title, __p_pos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx)
    {
        return begin_requestFile(__p_title, __p_pos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFile(__p_title, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFile(__p_title, __p_pos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::ProcessFile::Callback_ProcessFileManager_requestFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFile(__p_title, __p_pos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string& __p_title, ::Ice::Long __p_pos, const ::Ice::Context& __ctx, const ::ProcessFile::Callback_ProcessFileManager_requestFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_requestFile(__p_title, __p_pos, &__ctx, __del, __cookie);
    }

    ::ProcessFile::FileContent end_requestFile(const ::Ice::AsyncResultPtr&);
    
private:

    ::ProcessFile::FileContent requestFile(const ::std::string&, ::Ice::Long, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_requestFile(const ::std::string&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas)
    {
        return sendFile(__p_title, __p_datas, 0);
    }
    bool sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx)
    {
        return sendFile(__p_title, __p_datas, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendFile(__p_title, __p_datas, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFile(__p_title, __p_datas, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendFile(__p_title, __p_datas, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFile(__p_title, __p_datas, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas)
    {
        return begin_sendFile(__p_title, __p_datas, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx)
    {
        return begin_sendFile(__p_title, __p_datas, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(__p_title, __p_datas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(__p_title, __p_datas, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::ProcessFile::Callback_ProcessFileManager_sendFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(__p_title, __p_datas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string& __p_title, const ::ProcessFile::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::ProcessFile::Callback_ProcessFileManager_sendFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFile(__p_title, __p_datas, &__ctx, __del, __cookie);
    }

    bool end_sendFile(const ::Ice::AsyncResultPtr&);
    
private:

    bool sendFile(const ::std::string&, const ::ProcessFile::Bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFile(const ::std::string&, const ::ProcessFile::Bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_twoway() const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_oneway() const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_batchOneway() const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_datagram() const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_batchDatagram() const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ProcessFileManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ProcessFileManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace ProcessFile
{

class ProcessFileManager : virtual public ::Ice::Object
{
public:

    typedef ProcessFileManagerPrx ProxyType;
    typedef ProcessFileManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::ProcessFile::FileContent requestFile(const ::std::string&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___requestFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool sendFile(const ::std::string&, const ::ProcessFile::Bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ProcessFileManager& l, const ProcessFileManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ProcessFileManager& l, const ProcessFileManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ProcessFile
{

template<class T>
class CallbackNC_ProcessFileManager_requestFile : public Callback_ProcessFileManager_requestFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ProcessFile::FileContent&);

    CallbackNC_ProcessFileManager_requestFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ProcessFile::ProcessFileManagerPrx __proxy = ::ProcessFile::ProcessFileManagerPrx::uncheckedCast(__result->getProxy());
        ::ProcessFile::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ProcessFileManager_requestFilePtr
newCallback_ProcessFileManager_requestFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ProcessFile::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessFileManager_requestFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProcessFileManager_requestFilePtr
newCallback_ProcessFileManager_requestFile(T* instance, void (T::*cb)(const ::ProcessFile::FileContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessFileManager_requestFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProcessFileManager_requestFile : public Callback_ProcessFileManager_requestFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ProcessFile::FileContent&, const CT&);

    Callback_ProcessFileManager_requestFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ProcessFile::ProcessFileManagerPrx __proxy = ::ProcessFile::ProcessFileManagerPrx::uncheckedCast(__result->getProxy());
        ::ProcessFile::FileContent __ret;
        try
        {
            __ret = __proxy->end_requestFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ProcessFileManager_requestFilePtr
newCallback_ProcessFileManager_requestFile(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ProcessFile::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessFileManager_requestFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProcessFileManager_requestFilePtr
newCallback_ProcessFileManager_requestFile(T* instance, void (T::*cb)(const ::ProcessFile::FileContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessFileManager_requestFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ProcessFileManager_sendFile : public Callback_ProcessFileManager_sendFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_ProcessFileManager_sendFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ProcessFile::ProcessFileManagerPrx __proxy = ::ProcessFile::ProcessFileManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_sendFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_ProcessFileManager_sendFilePtr
newCallback_ProcessFileManager_sendFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessFileManager_sendFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProcessFileManager_sendFilePtr
newCallback_ProcessFileManager_sendFile(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProcessFileManager_sendFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProcessFileManager_sendFile : public Callback_ProcessFileManager_sendFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_ProcessFileManager_sendFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::ProcessFile::ProcessFileManagerPrx __proxy = ::ProcessFile::ProcessFileManagerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_sendFile(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_ProcessFileManager_sendFilePtr
newCallback_ProcessFileManager_sendFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessFileManager_sendFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProcessFileManager_sendFilePtr
newCallback_ProcessFileManager_sendFile(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProcessFileManager_sendFile<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
