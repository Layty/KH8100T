// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <wavefepapp.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __wavefepapp__RfwFepManager__rfwExecute_name = "rfwExecute";

const ::std::string __wavefepapp__RfwAppManager__rfwExecuteEcho_name = "rfwExecuteEcho";

const ::std::string __wavefepapp__RfwAppManager__processRfwDir_name = "processRfwDir";

const ::std::string __wavefepapp__RfwAppManager__processRFW_name = "processRFW";

const ::std::string __wavefepapp__clientManager__getFileDirList_name = "getFileDirList";

const ::std::string __wavefepapp__clientManager__getFileCont_name = "getFileCont";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::wavefepapp::upCast(::IceProxy::wavefepapp::RfwFepManager* p) { return p; }

void
::IceProxy::wavefepapp::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwFepManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::wavefepapp::RfwFepManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::wavefepapp::RfwFepManager::rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __wavefepapp__RfwFepManager__rfwExecute_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_operate);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::RfwFepManager::begin_rfwExecute(const ::wavefepapp::RfwOperate& __p_operate, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__RfwFepManager__rfwExecute_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__RfwFepManager__rfwExecute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_operate);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::wavefepapp::RfwFepManager::end_rfwExecute(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __wavefepapp__RfwFepManager__rfwExecute_name);
}

const ::std::string&
IceProxy::wavefepapp::RfwFepManager::ice_staticId()
{
    return ::wavefepapp::RfwFepManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::wavefepapp::RfwFepManager::__newInstance() const
{
    return new RfwFepManager;
}
::IceProxy::Ice::Object* ::IceProxy::wavefepapp::upCast(::IceProxy::wavefepapp::RfwAppManager* p) { return p; }

void
::IceProxy::wavefepapp::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::RfwAppManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::wavefepapp::RfwAppManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::wavefepapp::RfwAppManager::rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __wavefepapp__RfwAppManager__rfwExecuteEcho_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_operate);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::RfwAppManager::begin_rfwExecuteEcho(const ::wavefepapp::RfwOperate& __p_operate, bool __p_flag, const ::std::string& __p_tip, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__RfwAppManager__rfwExecuteEcho_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__RfwAppManager__rfwExecuteEcho_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_operate);
        __os->write(__p_flag);
        __os->write(__p_tip);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::wavefepapp::RfwAppManager::end_rfwExecuteEcho(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __wavefepapp__RfwAppManager__rfwExecuteEcho_name);
}

void
IceProxy::wavefepapp::RfwAppManager::processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __wavefepapp__RfwAppManager__processRfwDir_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_aRfwDirPacket);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::RfwAppManager::begin_processRfwDir(const ::wavefepapp::RFWDirPacket& __p_aRfwDirPacket, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__RfwAppManager__processRfwDir_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__RfwAppManager__processRfwDir_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_aRfwDirPacket);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::wavefepapp::RfwAppManager::end_processRfwDir(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __wavefepapp__RfwAppManager__processRfwDir_name);
}

void
IceProxy::wavefepapp::RfwAppManager::processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __wavefepapp__RfwAppManager__processRFW_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_aRFWPacket);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::RfwAppManager::begin_processRFW(const ::wavefepapp::RFWPacket& __p_aRFWPacket, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__RfwAppManager__processRFW_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__RfwAppManager__processRFW_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_aRFWPacket);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::wavefepapp::RfwAppManager::end_processRFW(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __wavefepapp__RfwAppManager__processRFW_name);
}

const ::std::string&
IceProxy::wavefepapp::RfwAppManager::ice_staticId()
{
    return ::wavefepapp::RfwAppManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::wavefepapp::RfwAppManager::__newInstance() const
{
    return new RfwAppManager;
}
::IceProxy::Ice::Object* ::IceProxy::wavefepapp::upCast(::IceProxy::wavefepapp::clientManager* p) { return p; }

void
::IceProxy::wavefepapp::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::wavefepapp::clientManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::wavefepapp::clientManager;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::wavefepapp::clientManager::getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, ::wavefepapp::FileDirSeq& __p_fileList, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__wavefepapp__clientManager__getFileDirList_name);
    ::IceInternal::Outgoing __og(this, __wavefepapp__clientManager__getFileDirList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unitNo);
        __os->write(__p_startDate);
        __os->write(__p_endDate);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::clientManager::begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__wavefepapp__clientManager__getFileDirList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__clientManager__getFileDirList_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__clientManager__getFileDirList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unitNo);
        __os->write(__p_startDate);
        __os->write(__p_endDate);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::wavefepapp::clientManager::__begin_getFileDirList(::Ice::Int __p_unitNo, const ::std::string& __p_startDate, const ::std::string& __p_endDate, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::wavefepapp::FileDirSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool, const ::wavefepapp::FileDirSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
            ::wavefepapp::FileDirSeq __p_fileList;
            bool __ret;
            try
            {
                __ret = __proxy->end_getFileDirList(__p_fileList, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_fileList);
            }
        }
    
    private:
        
        ::std::function<void (bool, const ::wavefepapp::FileDirSeq&)> _response;
    };
    return begin_getFileDirList(__p_unitNo, __p_startDate, __p_endDate, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::wavefepapp::clientManager::end_getFileDirList(::wavefepapp::FileDirSeq& __p_fileList, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __wavefepapp__clientManager__getFileDirList_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_fileList);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

bool
IceProxy::wavefepapp::clientManager::getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, ::std::string& __p_strInf, ::std::string& __p_strCfg, ::wavefepapp::ByteSeq& __p_rfwDatas, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__wavefepapp__clientManager__getFileCont_name);
    ::IceInternal::Outgoing __og(this, __wavefepapp__clientManager__getFileCont_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unitNo);
        __os->write(__p_strFileName);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    bool __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_strInf);
    __is->read(__p_strCfg);
    __is->read(__p_rfwDatas);
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::wavefepapp::clientManager::begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__wavefepapp__clientManager__getFileCont_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __wavefepapp__clientManager__getFileCont_name, __del, __cookie);
    try
    {
        __result->prepare(__wavefepapp__clientManager__getFileCont_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_unitNo);
        __os->write(__p_strFileName);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::wavefepapp::clientManager::__begin_getFileCont(::Ice::Int __p_unitNo, const ::std::string& __p_strFileName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::wavefepapp::clientManagerPrx __proxy = ::wavefepapp::clientManagerPrx::uncheckedCast(__result->getProxy());
            ::std::string __p_strInf;
            ::std::string __p_strCfg;
            ::wavefepapp::ByteSeq __p_rfwDatas;
            bool __ret;
            try
            {
                __ret = __proxy->end_getFileCont(__p_strInf, __p_strCfg, __p_rfwDatas, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret, __p_strInf, __p_strCfg, __p_rfwDatas);
            }
        }
    
    private:
        
        ::std::function<void (bool, const ::std::string&, const ::std::string&, const ::wavefepapp::ByteSeq&)> _response;
    };
    return begin_getFileCont(__p_unitNo, __p_strFileName, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

bool
IceProxy::wavefepapp::clientManager::end_getFileCont(::std::string& __p_strInf, ::std::string& __p_strCfg, ::wavefepapp::ByteSeq& __p_rfwDatas, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __wavefepapp__clientManager__getFileCont_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_strInf);
    __is->read(__p_strCfg);
    __is->read(__p_rfwDatas);
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::wavefepapp::clientManager::ice_staticId()
{
    return ::wavefepapp::clientManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::wavefepapp::clientManager::__newInstance() const
{
    return new clientManager;
}

::Ice::Object* wavefepapp::upCast(::wavefepapp::RfwFepManager* p) { return p; }

namespace
{
const ::std::string __wavefepapp__RfwFepManager_ids[2] =
{
    "::Ice::Object",
    "::wavefepapp::RfwFepManager"
};

}

bool
wavefepapp::RfwFepManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__wavefepapp__RfwFepManager_ids, __wavefepapp__RfwFepManager_ids + 2, _s);
}

::std::vector< ::std::string>
wavefepapp::RfwFepManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__wavefepapp__RfwFepManager_ids[0], &__wavefepapp__RfwFepManager_ids[2]);
}

const ::std::string&
wavefepapp::RfwFepManager::ice_id(const ::Ice::Current&) const
{
    return __wavefepapp__RfwFepManager_ids[1];
}

const ::std::string&
wavefepapp::RfwFepManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::wavefepapp::RfwFepManager";
    return typeId;
#else
    return __wavefepapp__RfwFepManager_ids[1];
#endif
}

::Ice::DispatchStatus
wavefepapp::RfwFepManager::___rfwExecute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::wavefepapp::RfwOperate __p_operate;
    __is->read(__p_operate);
    __inS.endReadParams();
    rfwExecute(__p_operate, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __wavefepapp__RfwFepManager_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "rfwExecute"
};

}

::Ice::DispatchStatus
wavefepapp::RfwFepManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__wavefepapp__RfwFepManager_all, __wavefepapp__RfwFepManager_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __wavefepapp__RfwFepManager_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___rfwExecute(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
wavefepapp::RfwFepManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
wavefepapp::RfwFepManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
wavefepapp::__patch(RfwFepManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::wavefepapp::RfwFepManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::wavefepapp::RfwFepManager::ice_staticId(), v);
    }
}

::Ice::Object* wavefepapp::upCast(::wavefepapp::RfwAppManager* p) { return p; }

namespace
{
const ::std::string __wavefepapp__RfwAppManager_ids[2] =
{
    "::Ice::Object",
    "::wavefepapp::RfwAppManager"
};

}

bool
wavefepapp::RfwAppManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__wavefepapp__RfwAppManager_ids, __wavefepapp__RfwAppManager_ids + 2, _s);
}

::std::vector< ::std::string>
wavefepapp::RfwAppManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__wavefepapp__RfwAppManager_ids[0], &__wavefepapp__RfwAppManager_ids[2]);
}

const ::std::string&
wavefepapp::RfwAppManager::ice_id(const ::Ice::Current&) const
{
    return __wavefepapp__RfwAppManager_ids[1];
}

const ::std::string&
wavefepapp::RfwAppManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::wavefepapp::RfwAppManager";
    return typeId;
#else
    return __wavefepapp__RfwAppManager_ids[1];
#endif
}

::Ice::DispatchStatus
wavefepapp::RfwAppManager::___rfwExecuteEcho(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::wavefepapp::RfwOperate __p_operate;
    bool __p_flag;
    ::std::string __p_tip;
    __is->read(__p_operate);
    __is->read(__p_flag);
    __is->read(__p_tip);
    __inS.endReadParams();
    rfwExecuteEcho(__p_operate, __p_flag, __p_tip, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
wavefepapp::RfwAppManager::___processRfwDir(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::wavefepapp::RFWDirPacket __p_aRfwDirPacket;
    __is->read(__p_aRfwDirPacket);
    __inS.endReadParams();
    processRfwDir(__p_aRfwDirPacket, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
wavefepapp::RfwAppManager::___processRFW(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::wavefepapp::RFWPacket __p_aRFWPacket;
    __is->read(__p_aRFWPacket);
    __inS.endReadParams();
    processRFW(__p_aRFWPacket, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __wavefepapp__RfwAppManager_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "processRFW",
    "processRfwDir",
    "rfwExecuteEcho"
};

}

::Ice::DispatchStatus
wavefepapp::RfwAppManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__wavefepapp__RfwAppManager_all, __wavefepapp__RfwAppManager_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __wavefepapp__RfwAppManager_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___processRFW(in, current);
        }
        case 5:
        {
            return ___processRfwDir(in, current);
        }
        case 6:
        {
            return ___rfwExecuteEcho(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
wavefepapp::RfwAppManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
wavefepapp::RfwAppManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
wavefepapp::__patch(RfwAppManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::wavefepapp::RfwAppManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::wavefepapp::RfwAppManager::ice_staticId(), v);
    }
}

::Ice::Object* wavefepapp::upCast(::wavefepapp::clientManager* p) { return p; }

namespace
{
const ::std::string __wavefepapp__clientManager_ids[2] =
{
    "::Ice::Object",
    "::wavefepapp::clientManager"
};

}

bool
wavefepapp::clientManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__wavefepapp__clientManager_ids, __wavefepapp__clientManager_ids + 2, _s);
}

::std::vector< ::std::string>
wavefepapp::clientManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__wavefepapp__clientManager_ids[0], &__wavefepapp__clientManager_ids[2]);
}

const ::std::string&
wavefepapp::clientManager::ice_id(const ::Ice::Current&) const
{
    return __wavefepapp__clientManager_ids[1];
}

const ::std::string&
wavefepapp::clientManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::wavefepapp::clientManager";
    return typeId;
#else
    return __wavefepapp__clientManager_ids[1];
#endif
}

::Ice::DispatchStatus
wavefepapp::clientManager::___getFileDirList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_unitNo;
    ::std::string __p_startDate;
    ::std::string __p_endDate;
    __is->read(__p_unitNo);
    __is->read(__p_startDate);
    __is->read(__p_endDate);
    __inS.endReadParams();
    ::wavefepapp::FileDirSeq __p_fileList;
    bool __ret = getFileDirList(__p_unitNo, __p_startDate, __p_endDate, __p_fileList, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_fileList);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
wavefepapp::clientManager::___getFileCont(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_unitNo;
    ::std::string __p_strFileName;
    __is->read(__p_unitNo);
    __is->read(__p_strFileName);
    __inS.endReadParams();
    ::std::string __p_strInf;
    ::std::string __p_strCfg;
    ::wavefepapp::ByteSeq __p_rfwDatas;
    bool __ret = getFileCont(__p_unitNo, __p_strFileName, __p_strInf, __p_strCfg, __p_rfwDatas, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_strInf);
    __os->write(__p_strCfg);
    __os->write(__p_rfwDatas);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __wavefepapp__clientManager_all[] =
{
    "getFileCont",
    "getFileDirList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
wavefepapp::clientManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__wavefepapp__clientManager_all, __wavefepapp__clientManager_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __wavefepapp__clientManager_all)
    {
        case 0:
        {
            return ___getFileCont(in, current);
        }
        case 1:
        {
            return ___getFileDirList(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
wavefepapp::clientManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
wavefepapp::clientManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
wavefepapp::__patch(clientManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::wavefepapp::clientManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::wavefepapp::clientManager::ice_staticId(), v);
    }
}
