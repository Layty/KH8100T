// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `warningmsg.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __warningmsg_h__
#define __warningmsg_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace WarningMsg
{

class WarningMsgFile;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::WarningMsg::WarningMsgFile>&);
::IceProxy::Ice::Object* upCast(::IceProxy::WarningMsg::WarningMsgFile*);

class SendWarningMsg;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::WarningMsg::SendWarningMsg>&);
::IceProxy::Ice::Object* upCast(::IceProxy::WarningMsg::SendWarningMsg*);

}

}

namespace WarningMsg
{

class WarningMsgFile;
::Ice::Object* upCast(::WarningMsg::WarningMsgFile*);
typedef ::IceInternal::Handle< ::WarningMsg::WarningMsgFile> WarningMsgFilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::WarningMsg::WarningMsgFile> WarningMsgFilePrx;
void __patch(WarningMsgFilePtr&, const ::Ice::ObjectPtr&);

class SendWarningMsg;
::Ice::Object* upCast(::WarningMsg::SendWarningMsg*);
typedef ::IceInternal::Handle< ::WarningMsg::SendWarningMsg> SendWarningMsgPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::WarningMsg::SendWarningMsg> SendWarningMsgPrx;
void __patch(SendWarningMsgPtr&, const ::Ice::ObjectPtr&);

}

namespace WarningMsg
{

typedef ::std::vector< ::std::string> Strings;

struct WarningMsgContent
{
    ::Ice::Long pos;
    ::WarningMsg::Strings content;
};

typedef ::std::vector< ::Ice::Byte> Bytes;

const ::std::string SendWarningMsgTopic = "SendWarningMsg";

}

namespace Ice
{
template<>
struct StreamableTraits< ::WarningMsg::WarningMsgContent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::WarningMsg::WarningMsgContent, S>
{
    static void write(S* __os, const ::WarningMsg::WarningMsgContent& v)
    {
        __os->write(v.pos);
        __os->write(v.content);
    }
};

template<class S>
struct StreamReader< ::WarningMsg::WarningMsgContent, S>
{
    static void read(S* __is, ::WarningMsg::WarningMsgContent& v)
    {
        __is->read(v.pos);
        __is->read(v.content);
    }
};

}

namespace WarningMsg
{

class Callback_WarningMsgFile_getContent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_WarningMsgFile_getContent_Base> Callback_WarningMsgFile_getContentPtr;

class Callback_SendWarningMsg_sendWarningMsgBinary_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SendWarningMsg_sendWarningMsgBinary_Base> Callback_SendWarningMsg_sendWarningMsgBinaryPtr;

}

namespace IceProxy
{

namespace WarningMsg
{

class WarningMsgFile : virtual public ::IceProxy::Ice::Object
{
public:

    ::WarningMsg::WarningMsgContent getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename)
    {
        return getContent(__p_pos, __p_length, __p_strFilename, 0);
    }
    ::WarningMsg::WarningMsgContent getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx)
    {
        return getContent(__p_pos, __p_length, __p_strFilename, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::IceInternal::Function<void (const ::WarningMsg::WarningMsgContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContent(__p_pos, __p_length, __p_strFilename, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::WarningMsg::WarningMsgContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getContent(__p_pos, __p_length, __p_strFilename, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::WarningMsg::WarningMsgContent&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::WarningMsg::Callback_WarningMsgFile_getContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long __p_pos, ::Ice::Int __p_length, const ::std::string& __p_strFilename, const ::Ice::Context& __ctx, const ::WarningMsg::Callback_WarningMsgFile_getContentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getContent(__p_pos, __p_length, __p_strFilename, &__ctx, __del, __cookie);
    }

    ::WarningMsg::WarningMsgContent end_getContent(const ::Ice::AsyncResultPtr&);
    
private:

    ::WarningMsg::WarningMsgContent getContent(::Ice::Long, ::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getContent(::Ice::Long, ::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_secure(bool __secure) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_twoway() const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_oneway() const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_batchOneway() const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_datagram() const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_batchDatagram() const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_compress(bool __compress) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_timeout(int __timeout) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<WarningMsgFile> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<WarningMsgFile*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SendWarningMsg : virtual public ::IceProxy::Ice::Object
{
public:

    void sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas)
    {
        sendWarningMsgBinary(__p_title, __p_datas, 0);
    }
    void sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx)
    {
        sendWarningMsgBinary(__p_title, __p_datas, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::WarningMsg::Callback_SendWarningMsg_sendWarningMsgBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string& __p_title, const ::WarningMsg::Bytes& __p_datas, const ::Ice::Context& __ctx, const ::WarningMsg::Callback_SendWarningMsg_sendWarningMsgBinaryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendWarningMsgBinary(__p_title, __p_datas, &__ctx, __del, __cookie);
    }

    void end_sendWarningMsgBinary(const ::Ice::AsyncResultPtr&);
    
private:

    void sendWarningMsgBinary(const ::std::string&, const ::WarningMsg::Bytes&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendWarningMsgBinary(const ::std::string&, const ::WarningMsg::Bytes&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_secure(bool __secure) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_twoway() const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_oneway() const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_batchOneway() const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_datagram() const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_batchDatagram() const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_compress(bool __compress) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SendWarningMsg> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SendWarningMsg*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace WarningMsg
{

class WarningMsgFile : virtual public ::Ice::Object
{
public:

    typedef WarningMsgFilePrx ProxyType;
    typedef WarningMsgFilePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::WarningMsg::WarningMsgContent getContent(::Ice::Long, ::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getContent(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const WarningMsgFile& l, const WarningMsgFile& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const WarningMsgFile& l, const WarningMsgFile& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SendWarningMsg : virtual public ::Ice::Object
{
public:

    typedef SendWarningMsgPrx ProxyType;
    typedef SendWarningMsgPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendWarningMsgBinary(const ::std::string&, const ::WarningMsg::Bytes&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendWarningMsgBinary(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const SendWarningMsg& l, const SendWarningMsg& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SendWarningMsg& l, const SendWarningMsg& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace WarningMsg
{

template<class T>
class CallbackNC_WarningMsgFile_getContent : public Callback_WarningMsgFile_getContent_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::WarningMsg::WarningMsgContent&);

    CallbackNC_WarningMsgFile_getContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WarningMsg::WarningMsgFilePrx __proxy = ::WarningMsg::WarningMsgFilePrx::uncheckedCast(__result->getProxy());
        ::WarningMsg::WarningMsgContent __ret;
        try
        {
            __ret = __proxy->end_getContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_WarningMsgFile_getContentPtr
newCallback_WarningMsgFile_getContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WarningMsg::WarningMsgContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WarningMsgFile_getContent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_WarningMsgFile_getContentPtr
newCallback_WarningMsgFile_getContent(T* instance, void (T::*cb)(const ::WarningMsg::WarningMsgContent&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_WarningMsgFile_getContent<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_WarningMsgFile_getContent : public Callback_WarningMsgFile_getContent_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::WarningMsg::WarningMsgContent&, const CT&);

    Callback_WarningMsgFile_getContent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::WarningMsg::WarningMsgFilePrx __proxy = ::WarningMsg::WarningMsgFilePrx::uncheckedCast(__result->getProxy());
        ::WarningMsg::WarningMsgContent __ret;
        try
        {
            __ret = __proxy->end_getContent(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_WarningMsgFile_getContentPtr
newCallback_WarningMsgFile_getContent(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::WarningMsg::WarningMsgContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WarningMsgFile_getContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_WarningMsgFile_getContentPtr
newCallback_WarningMsgFile_getContent(T* instance, void (T::*cb)(const ::WarningMsg::WarningMsgContent&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_WarningMsgFile_getContent<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SendWarningMsg_sendWarningMsgBinary : public Callback_SendWarningMsg_sendWarningMsgBinary_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SendWarningMsg_sendWarningMsgBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SendWarningMsg_sendWarningMsgBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SendWarningMsg_sendWarningMsgBinary<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SendWarningMsg_sendWarningMsgBinary<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SendWarningMsg_sendWarningMsgBinary<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SendWarningMsg_sendWarningMsgBinary : public Callback_SendWarningMsg_sendWarningMsgBinary_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SendWarningMsg_sendWarningMsgBinary(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SendWarningMsg_sendWarningMsgBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SendWarningMsg_sendWarningMsgBinary<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SendWarningMsg_sendWarningMsgBinary<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SendWarningMsg_sendWarningMsgBinaryPtr
newCallback_SendWarningMsg_sendWarningMsgBinary(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SendWarningMsg_sendWarningMsgBinary<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
