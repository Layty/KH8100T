// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `TDU100GeneralCmd.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __cpp_TDU100GeneralCmd_h__
#define __cpp_TDU100GeneralCmd_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace TDU100GeneralCmd
{

class TDU100GeneralCmdManagerRequest;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerRequest>&);
::IceProxy::Ice::Object* upCast(::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerRequest*);

class TDU100GeneralCmdManagerResponse;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerResponse>&);
::IceProxy::Ice::Object* upCast(::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerResponse*);

}

}

namespace TDU100GeneralCmd
{

class TDU100GeneralCmdManagerRequest;
::Ice::Object* upCast(::TDU100GeneralCmd::TDU100GeneralCmdManagerRequest*);
typedef ::IceInternal::Handle< ::TDU100GeneralCmd::TDU100GeneralCmdManagerRequest> TDU100GeneralCmdManagerRequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerRequest> TDU100GeneralCmdManagerRequestPrx;
void __patch(TDU100GeneralCmdManagerRequestPtr&, const ::Ice::ObjectPtr&);

class TDU100GeneralCmdManagerResponse;
::Ice::Object* upCast(::TDU100GeneralCmd::TDU100GeneralCmdManagerResponse*);
typedef ::IceInternal::Handle< ::TDU100GeneralCmd::TDU100GeneralCmdManagerResponse> TDU100GeneralCmdManagerResponsePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::TDU100GeneralCmd::TDU100GeneralCmdManagerResponse> TDU100GeneralCmdManagerResponsePrx;
void __patch(TDU100GeneralCmdManagerResponsePtr&, const ::Ice::ObjectPtr&);

}

namespace TDU100GeneralCmd
{

struct TDU100GeneralCmdMsg
{
    ::std::string deviceId;
    ::std::string inf;
    ::std::string triggerTime;

    bool operator==(const TDU100GeneralCmdMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(deviceId != __rhs.deviceId)
        {
            return false;
        }
        if(inf != __rhs.inf)
        {
            return false;
        }
        if(triggerTime != __rhs.triggerTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TDU100GeneralCmdMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(deviceId < __rhs.deviceId)
        {
            return true;
        }
        else if(__rhs.deviceId < deviceId)
        {
            return false;
        }
        if(inf < __rhs.inf)
        {
            return true;
        }
        else if(__rhs.inf < inf)
        {
            return false;
        }
        if(triggerTime < __rhs.triggerTime)
        {
            return true;
        }
        else if(__rhs.triggerTime < triggerTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TDU100GeneralCmdMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TDU100GeneralCmdMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TDU100GeneralCmdMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TDU100GeneralCmdMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::TDU100GeneralCmd::TDU100GeneralCmdMsg> tduReqSeq;

struct TDU100GeneralCmdReplyMsg
{
    ::std::string deviceId;
    ::std::string bz;
    ::std::string message;

    bool operator==(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(deviceId != __rhs.deviceId)
        {
            return false;
        }
        if(bz != __rhs.bz)
        {
            return false;
        }
        if(message != __rhs.message)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(deviceId < __rhs.deviceId)
        {
            return true;
        }
        else if(__rhs.deviceId < deviceId)
        {
            return false;
        }
        if(bz < __rhs.bz)
        {
            return true;
        }
        else if(__rhs.bz < bz)
        {
            return false;
        }
        if(message < __rhs.message)
        {
            return true;
        }
        else if(__rhs.message < message)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TDU100GeneralCmdReplyMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg> replyMsgSeq;

struct TDUProtocolMsg
{
    ::std::string deviceId;
    ::std::string name;
    ::Ice::Short protocolType;
    ::Ice::Short channelNum;
    ::Ice::Short noResponTime;
    ::std::string extParam;
    ::Ice::Short faultNum;
    ::std::string deviceType;
    ::std::string used;
    ::std::string param;
    ::Ice::Short updateBz;

    bool operator==(const TDUProtocolMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(deviceId != __rhs.deviceId)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(protocolType != __rhs.protocolType)
        {
            return false;
        }
        if(channelNum != __rhs.channelNum)
        {
            return false;
        }
        if(noResponTime != __rhs.noResponTime)
        {
            return false;
        }
        if(extParam != __rhs.extParam)
        {
            return false;
        }
        if(faultNum != __rhs.faultNum)
        {
            return false;
        }
        if(deviceType != __rhs.deviceType)
        {
            return false;
        }
        if(used != __rhs.used)
        {
            return false;
        }
        if(param != __rhs.param)
        {
            return false;
        }
        if(updateBz != __rhs.updateBz)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TDUProtocolMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(deviceId < __rhs.deviceId)
        {
            return true;
        }
        else if(__rhs.deviceId < deviceId)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(protocolType < __rhs.protocolType)
        {
            return true;
        }
        else if(__rhs.protocolType < protocolType)
        {
            return false;
        }
        if(channelNum < __rhs.channelNum)
        {
            return true;
        }
        else if(__rhs.channelNum < channelNum)
        {
            return false;
        }
        if(noResponTime < __rhs.noResponTime)
        {
            return true;
        }
        else if(__rhs.noResponTime < noResponTime)
        {
            return false;
        }
        if(extParam < __rhs.extParam)
        {
            return true;
        }
        else if(__rhs.extParam < extParam)
        {
            return false;
        }
        if(faultNum < __rhs.faultNum)
        {
            return true;
        }
        else if(__rhs.faultNum < faultNum)
        {
            return false;
        }
        if(deviceType < __rhs.deviceType)
        {
            return true;
        }
        else if(__rhs.deviceType < deviceType)
        {
            return false;
        }
        if(used < __rhs.used)
        {
            return true;
        }
        else if(__rhs.used < used)
        {
            return false;
        }
        if(param < __rhs.param)
        {
            return true;
        }
        else if(__rhs.param < param)
        {
            return false;
        }
        if(updateBz < __rhs.updateBz)
        {
            return true;
        }
        else if(__rhs.updateBz < updateBz)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TDUProtocolMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const TDUProtocolMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const TDUProtocolMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const TDUProtocolMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::TDU100GeneralCmd::TDUProtocolMsg> protocolMsgSeq;

const ::std::string TDU100GeneralCmdRequestTopic = "tdu100generalcmd_operation_Request";

const ::std::string TDU100GeneralCmdResponseTopic = "tdu100generalcmd_operation_Response";

}

namespace Ice
{
template<>
struct StreamableTraits< ::TDU100GeneralCmd::TDU100GeneralCmdMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TDU100GeneralCmd::TDU100GeneralCmdMsg, S>
{
    static void write(S* __os, const ::TDU100GeneralCmd::TDU100GeneralCmdMsg& v)
    {
        __os->write(v.deviceId);
        __os->write(v.inf);
        __os->write(v.triggerTime);
    }
};

template<class S>
struct StreamReader< ::TDU100GeneralCmd::TDU100GeneralCmdMsg, S>
{
    static void read(S* __is, ::TDU100GeneralCmd::TDU100GeneralCmdMsg& v)
    {
        __is->read(v.deviceId);
        __is->read(v.inf);
        __is->read(v.triggerTime);
    }
};

template<>
struct StreamableTraits< ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg, S>
{
    static void write(S* __os, const ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg& v)
    {
        __os->write(v.deviceId);
        __os->write(v.bz);
        __os->write(v.message);
    }
};

template<class S>
struct StreamReader< ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg, S>
{
    static void read(S* __is, ::TDU100GeneralCmd::TDU100GeneralCmdReplyMsg& v)
    {
        __is->read(v.deviceId);
        __is->read(v.bz);
        __is->read(v.message);
    }
};

template<>
struct StreamableTraits< ::TDU100GeneralCmd::TDUProtocolMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::TDU100GeneralCmd::TDUProtocolMsg, S>
{
    static void write(S* __os, const ::TDU100GeneralCmd::TDUProtocolMsg& v)
    {
        __os->write(v.deviceId);
        __os->write(v.name);
        __os->write(v.protocolType);
        __os->write(v.channelNum);
        __os->write(v.noResponTime);
        __os->write(v.extParam);
        __os->write(v.faultNum);
        __os->write(v.deviceType);
        __os->write(v.used);
        __os->write(v.param);
        __os->write(v.updateBz);
    }
};

template<class S>
struct StreamReader< ::TDU100GeneralCmd::TDUProtocolMsg, S>
{
    static void read(S* __is, ::TDU100GeneralCmd::TDUProtocolMsg& v)
    {
        __is->read(v.deviceId);
        __is->read(v.name);
        __is->read(v.protocolType);
        __is->read(v.channelNum);
        __is->read(v.noResponTime);
        __is->read(v.extParam);
        __is->read(v.faultNum);
        __is->read(v.deviceType);
        __is->read(v.used);
        __is->read(v.param);
        __is->read(v.updateBz);
    }
};

}

namespace TDU100GeneralCmd
{

class Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute_Base> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr;

class Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam_Base> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr;

class Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply_Base> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr;

}

namespace IceProxy
{

namespace TDU100GeneralCmd
{

class TDU100GeneralCmdManagerRequest : virtual public ::IceProxy::Ice::Object
{
public:

    void TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq)
    {
        TDU100GeneralCmdRoute(__p_reqSeq, 0);
    }
    void TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        TDU100GeneralCmdRoute(__p_reqSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq& __p_reqSeq, const ::Ice::Context& __ctx, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdRoute(__p_reqSeq, &__ctx, __del, __cookie);
    }

    void end_TDU100GeneralCmdRoute(const ::Ice::AsyncResultPtr&);
    
private:

    void TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq)
    {
        updateProtocolParam(__p_protocolSeq, 0);
    }
    void updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx)
    {
        updateProtocolParam(__p_protocolSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateProtocolParam(__p_protocolSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateProtocolParam(__p_protocolSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_updateProtocolParam(__p_protocolSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateProtocolParam(__p_protocolSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq)
    {
        return begin_updateProtocolParam(__p_protocolSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx)
    {
        return begin_updateProtocolParam(__p_protocolSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateProtocolParam(__p_protocolSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateProtocolParam(__p_protocolSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateProtocolParam(__p_protocolSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq& __p_protocolSeq, const ::Ice::Context& __ctx, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateProtocolParam(__p_protocolSeq, &__ctx, __del, __cookie);
    }

    void end_updateProtocolParam(const ::Ice::AsyncResultPtr&);
    
private:

    void updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_secure(bool __secure) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_twoway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_oneway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_batchOneway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_datagram() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_batchDatagram() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_compress(bool __compress) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerRequest> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerRequest*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TDU100GeneralCmdManagerResponse : virtual public ::IceProxy::Ice::Object
{
public:

    void TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq)
    {
        TDU100GeneralCmdReply(__p_replySeq, 0);
    }
    void TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx)
    {
        TDU100GeneralCmdReply(__p_replySeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq& __p_replySeq, const ::Ice::Context& __ctx, const ::TDU100GeneralCmd::Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TDU100GeneralCmdReply(__p_replySeq, &__ctx, __del, __cookie);
    }

    void end_TDU100GeneralCmdReply(const ::Ice::AsyncResultPtr&);
    
private:

    void TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_secure(bool __secure) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_twoway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_oneway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_batchOneway() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_datagram() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_batchDatagram() const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_compress(bool __compress) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TDU100GeneralCmdManagerResponse> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TDU100GeneralCmdManagerResponse*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace TDU100GeneralCmd
{

class TDU100GeneralCmdManagerRequest : virtual public ::Ice::Object
{
public:

    typedef TDU100GeneralCmdManagerRequestPrx ProxyType;
    typedef TDU100GeneralCmdManagerRequestPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void TDU100GeneralCmdRoute(const ::TDU100GeneralCmd::tduReqSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___TDU100GeneralCmdRoute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateProtocolParam(const ::TDU100GeneralCmd::protocolMsgSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateProtocolParam(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TDU100GeneralCmdManagerRequest& l, const TDU100GeneralCmdManagerRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TDU100GeneralCmdManagerRequest& l, const TDU100GeneralCmdManagerRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class TDU100GeneralCmdManagerResponse : virtual public ::Ice::Object
{
public:

    typedef TDU100GeneralCmdManagerResponsePrx ProxyType;
    typedef TDU100GeneralCmdManagerResponsePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void TDU100GeneralCmdReply(const ::TDU100GeneralCmd::replyMsgSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___TDU100GeneralCmdReply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const TDU100GeneralCmdManagerResponse& l, const TDU100GeneralCmdManagerResponse& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TDU100GeneralCmdManagerResponse& l, const TDU100GeneralCmdManagerResponse& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace TDU100GeneralCmd
{

template<class T>
class CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute : public Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute : public Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoutePtr
newCallback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_TDU100GeneralCmdRoute<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam : public Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerRequest_updateProtocolParam<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam : public Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerRequest_updateProtocolParamPtr
newCallback_TDU100GeneralCmdManagerRequest_updateProtocolParam(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerRequest_updateProtocolParam<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply : public Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply : public Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReplyPtr
newCallback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TDU100GeneralCmdManagerResponse_TDU100GeneralCmdReply<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
