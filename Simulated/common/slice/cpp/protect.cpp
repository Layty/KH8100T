// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `protect.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <protect.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Protect__CProtectApp__processProtectSetting_name = "processProtectSetting";

const ::std::string __Protect__CProtectFep__ProtectSettingExecute_name = "ProtectSettingExecute";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Protect::upCast(::IceProxy::Protect::CProtectApp* p) { return p; }

void
::IceProxy::Protect::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Protect::CProtectApp>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Protect::CProtectApp;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Protect::CProtectApp::processProtectSetting(const ::Protect::ProtectValueInfo& __p_psInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Protect__CProtectApp__processProtectSetting_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_psInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Protect::CProtectApp::begin_processProtectSetting(const ::Protect::ProtectValueInfo& __p_psInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Protect__CProtectApp__processProtectSetting_name, __del, __cookie);
    try
    {
        __result->prepare(__Protect__CProtectApp__processProtectSetting_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_psInfo);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Protect::CProtectApp::end_processProtectSetting(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Protect__CProtectApp__processProtectSetting_name);
}

const ::std::string&
IceProxy::Protect::CProtectApp::ice_staticId()
{
    return ::Protect::CProtectApp::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Protect::CProtectApp::__newInstance() const
{
    return new CProtectApp;
}
::IceProxy::Ice::Object* ::IceProxy::Protect::upCast(::IceProxy::Protect::CProtectFep* p) { return p; }

void
::IceProxy::Protect::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Protect::CProtectFep>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Protect::CProtectFep;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Protect::CProtectFep::ProtectSettingExecute(const ::Protect::ProtectValueInfo& __p_psInfo, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Protect__CProtectFep__ProtectSettingExecute_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_psInfo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Protect::CProtectFep::begin_ProtectSettingExecute(const ::Protect::ProtectValueInfo& __p_psInfo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Protect__CProtectFep__ProtectSettingExecute_name, __del, __cookie);
    try
    {
        __result->prepare(__Protect__CProtectFep__ProtectSettingExecute_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_psInfo);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Protect::CProtectFep::end_ProtectSettingExecute(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Protect__CProtectFep__ProtectSettingExecute_name);
}

const ::std::string&
IceProxy::Protect::CProtectFep::ice_staticId()
{
    return ::Protect::CProtectFep::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Protect::CProtectFep::__newInstance() const
{
    return new CProtectFep;
}

::Ice::Object* Protect::upCast(::Protect::CProtectApp* p) { return p; }

namespace
{
const ::std::string __Protect__CProtectApp_ids[2] =
{
    "::Ice::Object",
    "::Protect::CProtectApp"
};

}

bool
Protect::CProtectApp::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Protect__CProtectApp_ids, __Protect__CProtectApp_ids + 2, _s);
}

::std::vector< ::std::string>
Protect::CProtectApp::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Protect__CProtectApp_ids[0], &__Protect__CProtectApp_ids[2]);
}

const ::std::string&
Protect::CProtectApp::ice_id(const ::Ice::Current&) const
{
    return __Protect__CProtectApp_ids[1];
}

const ::std::string&
Protect::CProtectApp::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Protect::CProtectApp";
    return typeId;
#else
    return __Protect__CProtectApp_ids[1];
#endif
}

::Ice::DispatchStatus
Protect::CProtectApp::___processProtectSetting(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Protect::ProtectValueInfo __p_psInfo;
    __is->read(__p_psInfo);
    __inS.endReadParams();
    processProtectSetting(__p_psInfo, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Protect__CProtectApp_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "processProtectSetting"
};

}

::Ice::DispatchStatus
Protect::CProtectApp::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Protect__CProtectApp_all, __Protect__CProtectApp_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Protect__CProtectApp_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___processProtectSetting(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Protect::CProtectApp::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Protect::CProtectApp::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Protect::__patch(CProtectAppPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Protect::CProtectAppPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Protect::CProtectApp::ice_staticId(), v);
    }
}

::Ice::Object* Protect::upCast(::Protect::CProtectFep* p) { return p; }

namespace
{
const ::std::string __Protect__CProtectFep_ids[2] =
{
    "::Ice::Object",
    "::Protect::CProtectFep"
};

}

bool
Protect::CProtectFep::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Protect__CProtectFep_ids, __Protect__CProtectFep_ids + 2, _s);
}

::std::vector< ::std::string>
Protect::CProtectFep::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Protect__CProtectFep_ids[0], &__Protect__CProtectFep_ids[2]);
}

const ::std::string&
Protect::CProtectFep::ice_id(const ::Ice::Current&) const
{
    return __Protect__CProtectFep_ids[1];
}

const ::std::string&
Protect::CProtectFep::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Protect::CProtectFep";
    return typeId;
#else
    return __Protect__CProtectFep_ids[1];
#endif
}

::Ice::DispatchStatus
Protect::CProtectFep::___ProtectSettingExecute(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Protect::ProtectValueInfo __p_psInfo;
    __is->read(__p_psInfo);
    __inS.endReadParams();
    ProtectSettingExecute(__p_psInfo, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Protect__CProtectFep_all[] =
{
    "ProtectSettingExecute",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Protect::CProtectFep::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Protect__CProtectFep_all, __Protect__CProtectFep_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Protect__CProtectFep_all)
    {
        case 0:
        {
            return ___ProtectSettingExecute(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Protect::CProtectFep::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Protect::CProtectFep::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Protect::__patch(CProtectFepPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Protect::CProtectFepPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Protect::CProtectFep::ice_staticId(), v);
    }
}
