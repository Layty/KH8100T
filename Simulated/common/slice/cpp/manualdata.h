// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `manualdata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __cpp_manualdata_h__
#define __cpp_manualdata_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace ManualData
{

class ManualDataManagerRequest;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ManualData::ManualDataManagerRequest>&);
::IceProxy::Ice::Object* upCast(::IceProxy::ManualData::ManualDataManagerRequest*);

class ManualDataManagerResponse;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::ManualData::ManualDataManagerResponse>&);
::IceProxy::Ice::Object* upCast(::IceProxy::ManualData::ManualDataManagerResponse*);

}

}

namespace ManualData
{

class ManualDataManagerRequest;
::Ice::Object* upCast(::ManualData::ManualDataManagerRequest*);
typedef ::IceInternal::Handle< ::ManualData::ManualDataManagerRequest> ManualDataManagerRequestPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ManualData::ManualDataManagerRequest> ManualDataManagerRequestPrx;
void __patch(ManualDataManagerRequestPtr&, const ::Ice::ObjectPtr&);

class ManualDataManagerResponse;
::Ice::Object* upCast(::ManualData::ManualDataManagerResponse*);
typedef ::IceInternal::Handle< ::ManualData::ManualDataManagerResponse> ManualDataManagerResponsePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ManualData::ManualDataManagerResponse> ManualDataManagerResponsePrx;
void __patch(ManualDataManagerResponsePtr&, const ::Ice::ObjectPtr&);

}

namespace ManualData
{

struct ManualTime
{
    ::std::string year;
    ::std::string month;
    ::std::string day;
    ::std::string hour;

    bool operator==(const ManualTime& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(year != __rhs.year)
        {
            return false;
        }
        if(month != __rhs.month)
        {
            return false;
        }
        if(day != __rhs.day)
        {
            return false;
        }
        if(hour != __rhs.hour)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ManualTime& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(year < __rhs.year)
        {
            return true;
        }
        else if(__rhs.year < year)
        {
            return false;
        }
        if(month < __rhs.month)
        {
            return true;
        }
        else if(__rhs.month < month)
        {
            return false;
        }
        if(day < __rhs.day)
        {
            return true;
        }
        else if(__rhs.day < day)
        {
            return false;
        }
        if(hour < __rhs.hour)
        {
            return true;
        }
        else if(__rhs.hour < hour)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ManualTime& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ManualTime& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ManualTime& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ManualTime& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct ManualMsg
{
    ::std::string deviceId;
    ::std::string bz;
    ::std::string day;
    ::ManualData::ManualTime beginTime;
    ::ManualData::ManualTime endTime;

    bool operator==(const ManualMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(deviceId != __rhs.deviceId)
        {
            return false;
        }
        if(bz != __rhs.bz)
        {
            return false;
        }
        if(day != __rhs.day)
        {
            return false;
        }
        if(beginTime != __rhs.beginTime)
        {
            return false;
        }
        if(endTime != __rhs.endTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ManualMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(deviceId < __rhs.deviceId)
        {
            return true;
        }
        else if(__rhs.deviceId < deviceId)
        {
            return false;
        }
        if(bz < __rhs.bz)
        {
            return true;
        }
        else if(__rhs.bz < bz)
        {
            return false;
        }
        if(day < __rhs.day)
        {
            return true;
        }
        else if(__rhs.day < day)
        {
            return false;
        }
        if(beginTime < __rhs.beginTime)
        {
            return true;
        }
        else if(__rhs.beginTime < beginTime)
        {
            return false;
        }
        if(endTime < __rhs.endTime)
        {
            return true;
        }
        else if(__rhs.endTime < endTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ManualMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ManualMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ManualMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ManualMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::ManualData::ManualMsg> manualMsgSeq;

struct ReceiveMsg
{
    ::std::string requestId;
    ::std::string deviceId;
    ::std::string bz;
    ::std::string message;

    bool operator==(const ReceiveMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(deviceId != __rhs.deviceId)
        {
            return false;
        }
        if(bz != __rhs.bz)
        {
            return false;
        }
        if(message != __rhs.message)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ReceiveMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(deviceId < __rhs.deviceId)
        {
            return true;
        }
        else if(__rhs.deviceId < deviceId)
        {
            return false;
        }
        if(bz < __rhs.bz)
        {
            return true;
        }
        else if(__rhs.bz < bz)
        {
            return false;
        }
        if(message < __rhs.message)
        {
            return true;
        }
        else if(__rhs.message < message)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ReceiveMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ReceiveMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ReceiveMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ReceiveMsg& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::ManualData::ReceiveMsg> receiveMsgSeq;

typedef ::std::vector< ::std::string> stringSeq;

struct ManualFile
{
    ::std::string fileName;
    ::std::string fileSize;
    ::std::string fileTime;
    ::std::string fileResult;

    bool operator==(const ManualFile& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(fileName != __rhs.fileName)
        {
            return false;
        }
        if(fileSize != __rhs.fileSize)
        {
            return false;
        }
        if(fileTime != __rhs.fileTime)
        {
            return false;
        }
        if(fileResult != __rhs.fileResult)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ManualFile& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(fileName < __rhs.fileName)
        {
            return true;
        }
        else if(__rhs.fileName < fileName)
        {
            return false;
        }
        if(fileSize < __rhs.fileSize)
        {
            return true;
        }
        else if(__rhs.fileSize < fileSize)
        {
            return false;
        }
        if(fileTime < __rhs.fileTime)
        {
            return true;
        }
        else if(__rhs.fileTime < fileTime)
        {
            return false;
        }
        if(fileResult < __rhs.fileResult)
        {
            return true;
        }
        else if(__rhs.fileResult < fileResult)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ManualFile& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ManualFile& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ManualFile& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ManualFile& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct ManualSegment
{
    ::std::string fileName;
    ::std::string fileSegment;
    ::std::string fileCount;
    ::std::string fileData;
    ::std::string fileResult;

    bool operator==(const ManualSegment& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(fileName != __rhs.fileName)
        {
            return false;
        }
        if(fileSegment != __rhs.fileSegment)
        {
            return false;
        }
        if(fileCount != __rhs.fileCount)
        {
            return false;
        }
        if(fileData != __rhs.fileData)
        {
            return false;
        }
        if(fileResult != __rhs.fileResult)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ManualSegment& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(fileName < __rhs.fileName)
        {
            return true;
        }
        else if(__rhs.fileName < fileName)
        {
            return false;
        }
        if(fileSegment < __rhs.fileSegment)
        {
            return true;
        }
        else if(__rhs.fileSegment < fileSegment)
        {
            return false;
        }
        if(fileCount < __rhs.fileCount)
        {
            return true;
        }
        else if(__rhs.fileCount < fileCount)
        {
            return false;
        }
        if(fileData < __rhs.fileData)
        {
            return true;
        }
        else if(__rhs.fileData < fileData)
        {
            return false;
        }
        if(fileResult < __rhs.fileResult)
        {
            return true;
        }
        else if(__rhs.fileResult < fileResult)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ManualSegment& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ManualSegment& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ManualSegment& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ManualSegment& __rhs) const
    {
        return !operator<(__rhs);
    }
};

const ::std::string ManualDataRequestTopic = "manualdata_operation_Request";

const ::std::string ManualDataResponseTopic = "manualdata_operation_Response";

}

namespace Ice
{
template<>
struct StreamableTraits< ::ManualData::ManualTime>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ManualData::ManualTime, S>
{
    static void write(S* __os, const ::ManualData::ManualTime& v)
    {
        __os->write(v.year);
        __os->write(v.month);
        __os->write(v.day);
        __os->write(v.hour);
    }
};

template<class S>
struct StreamReader< ::ManualData::ManualTime, S>
{
    static void read(S* __is, ::ManualData::ManualTime& v)
    {
        __is->read(v.year);
        __is->read(v.month);
        __is->read(v.day);
        __is->read(v.hour);
    }
};

template<>
struct StreamableTraits< ::ManualData::ManualMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ManualData::ManualMsg, S>
{
    static void write(S* __os, const ::ManualData::ManualMsg& v)
    {
        __os->write(v.deviceId);
        __os->write(v.bz);
        __os->write(v.day);
        __os->write(v.beginTime);
        __os->write(v.endTime);
    }
};

template<class S>
struct StreamReader< ::ManualData::ManualMsg, S>
{
    static void read(S* __is, ::ManualData::ManualMsg& v)
    {
        __is->read(v.deviceId);
        __is->read(v.bz);
        __is->read(v.day);
        __is->read(v.beginTime);
        __is->read(v.endTime);
    }
};

template<>
struct StreamableTraits< ::ManualData::ReceiveMsg>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ManualData::ReceiveMsg, S>
{
    static void write(S* __os, const ::ManualData::ReceiveMsg& v)
    {
        __os->write(v.requestId);
        __os->write(v.deviceId);
        __os->write(v.bz);
        __os->write(v.message);
    }
};

template<class S>
struct StreamReader< ::ManualData::ReceiveMsg, S>
{
    static void read(S* __is, ::ManualData::ReceiveMsg& v)
    {
        __is->read(v.requestId);
        __is->read(v.deviceId);
        __is->read(v.bz);
        __is->read(v.message);
    }
};

template<>
struct StreamableTraits< ::ManualData::ManualFile>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ManualData::ManualFile, S>
{
    static void write(S* __os, const ::ManualData::ManualFile& v)
    {
        __os->write(v.fileName);
        __os->write(v.fileSize);
        __os->write(v.fileTime);
        __os->write(v.fileResult);
    }
};

template<class S>
struct StreamReader< ::ManualData::ManualFile, S>
{
    static void read(S* __is, ::ManualData::ManualFile& v)
    {
        __is->read(v.fileName);
        __is->read(v.fileSize);
        __is->read(v.fileTime);
        __is->read(v.fileResult);
    }
};

template<>
struct StreamableTraits< ::ManualData::ManualSegment>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::ManualData::ManualSegment, S>
{
    static void write(S* __os, const ::ManualData::ManualSegment& v)
    {
        __os->write(v.fileName);
        __os->write(v.fileSegment);
        __os->write(v.fileCount);
        __os->write(v.fileData);
        __os->write(v.fileResult);
    }
};

template<class S>
struct StreamReader< ::ManualData::ManualSegment, S>
{
    static void read(S* __is, ::ManualData::ManualSegment& v)
    {
        __is->read(v.fileName);
        __is->read(v.fileSegment);
        __is->read(v.fileCount);
        __is->read(v.fileData);
        __is->read(v.fileResult);
    }
};

}

namespace ManualData
{

class Callback_ManualDataManagerRequest_send_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerRequest_send_Base> Callback_ManualDataManagerRequest_sendPtr;

class Callback_ManualDataManagerRequest_cancalManual_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerRequest_cancalManual_Base> Callback_ManualDataManagerRequest_cancalManualPtr;

class Callback_ManualDataManagerRequest_sendFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerRequest_sendFileList_Base> Callback_ManualDataManagerRequest_sendFileListPtr;

class Callback_ManualDataManagerResponse_receive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerResponse_receive_Base> Callback_ManualDataManagerResponse_receivePtr;

class Callback_ManualDataManagerResponse_receiveFileList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerResponse_receiveFileList_Base> Callback_ManualDataManagerResponse_receiveFileListPtr;

class Callback_ManualDataManagerResponse_receiveSegment_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ManualDataManagerResponse_receiveSegment_Base> Callback_ManualDataManagerResponse_receiveSegmentPtr;

}

namespace IceProxy
{

namespace ManualData
{

class ManualDataManagerRequest : virtual public ::IceProxy::Ice::Object
{
public:

    void send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq)
    {
        send(__p_requestId, __p_dataSeq, 0);
    }
    void send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx)
    {
        send(__p_requestId, __p_dataSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_send(__p_requestId, __p_dataSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_requestId, __p_dataSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_send(__p_requestId, __p_dataSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_send(__p_requestId, __p_dataSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq)
    {
        return begin_send(__p_requestId, __p_dataSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx)
    {
        return begin_send(__p_requestId, __p_dataSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_requestId, __p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_requestId, __p_dataSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::ManualData::Callback_ManualDataManagerRequest_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_requestId, __p_dataSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_send(const ::std::string& __p_requestId, const ::ManualData::manualMsgSeq& __p_dataSeq, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerRequest_sendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_send(__p_requestId, __p_dataSeq, &__ctx, __del, __cookie);
    }

    void end_send(const ::Ice::AsyncResultPtr&);
    
private:

    void send(const ::std::string&, const ::ManualData::manualMsgSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_send(const ::std::string&, const ::ManualData::manualMsgSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq)
    {
        cancalManual(__p_requestId, __p_deviceSeq, 0);
    }
    void cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx)
    {
        cancalManual(__p_requestId, __p_deviceSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::ManualData::Callback_ManualDataManagerRequest_cancalManualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string& __p_requestId, const ::ManualData::stringSeq& __p_deviceSeq, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerRequest_cancalManualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancalManual(__p_requestId, __p_deviceSeq, &__ctx, __del, __cookie);
    }

    void end_cancalManual(const ::Ice::AsyncResultPtr&);
    
private:

    void cancalManual(const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancalManual(const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq)
    {
        sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0);
    }
    void sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx)
    {
        sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::ManualData::Callback_ManualDataManagerRequest_sendFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::stringSeq& __p_fileSeq, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerRequest_sendFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, __del, __cookie);
    }

    void end_sendFileList(const ::Ice::AsyncResultPtr&);
    
private:

    void sendFileList(const ::std::string&, const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendFileList(const ::std::string&, const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_secure(bool __secure) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_twoway() const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_oneway() const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_batchOneway() const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_datagram() const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_batchDatagram() const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_compress(bool __compress) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerRequest> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ManualDataManagerRequest*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ManualDataManagerResponse : virtual public ::IceProxy::Ice::Object
{
public:

    void receive(const ::ManualData::receiveMsgSeq& __p_recSeq)
    {
        receive(__p_recSeq, 0);
    }
    void receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx)
    {
        receive(__p_recSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receive(__p_recSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receive(__p_recSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receive(__p_recSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receive(__p_recSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq)
    {
        return begin_receive(__p_recSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx)
    {
        return begin_receive(__p_recSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receive(__p_recSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receive(__p_recSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::ManualData::Callback_ManualDataManagerResponse_receivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receive(__p_recSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq& __p_recSeq, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerResponse_receivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receive(__p_recSeq, &__ctx, __del, __cookie);
    }

    void end_receive(const ::Ice::AsyncResultPtr&);
    
private:

    void receive(const ::ManualData::receiveMsgSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receive(const ::ManualData::receiveMsgSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq)
    {
        receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0);
    }
    void receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx)
    {
        receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::ManualData::Callback_ManualDataManagerResponse_receiveFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualFile& __p_fileSeq, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerResponse_receiveFileListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveFileList(__p_requestId, __p_deviceId, __p_fileSeq, &__ctx, __del, __cookie);
    }

    void end_receiveFileList(const ::Ice::AsyncResultPtr&);
    
private:

    void receiveFileList(const ::std::string&, const ::std::string&, const ::ManualData::ManualFile&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveFileList(const ::std::string&, const ::std::string&, const ::ManualData::ManualFile&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment)
    {
        receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0);
    }
    void receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx)
    {
        receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::ManualData::Callback_ManualDataManagerResponse_receiveSegmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string& __p_requestId, const ::std::string& __p_deviceId, const ::ManualData::ManualSegment& __p_fileSegment, const ::Ice::Context& __ctx, const ::ManualData::Callback_ManualDataManagerResponse_receiveSegmentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receiveSegment(__p_requestId, __p_deviceId, __p_fileSegment, &__ctx, __del, __cookie);
    }

    void end_receiveSegment(const ::Ice::AsyncResultPtr&);
    
private:

    void receiveSegment(const ::std::string&, const ::std::string&, const ::ManualData::ManualSegment&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receiveSegment(const ::std::string&, const ::std::string&, const ::ManualData::ManualSegment&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_secure(bool __secure) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_twoway() const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_oneway() const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_batchOneway() const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_datagram() const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_batchDatagram() const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_compress(bool __compress) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ManualDataManagerResponse> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ManualDataManagerResponse*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace ManualData
{

class ManualDataManagerRequest : virtual public ::Ice::Object
{
public:

    typedef ManualDataManagerRequestPrx ProxyType;
    typedef ManualDataManagerRequestPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void send(const ::std::string&, const ::ManualData::manualMsgSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___send(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancalManual(const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancalManual(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendFileList(const ::std::string&, const ::std::string&, const ::ManualData::stringSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ManualDataManagerRequest& l, const ManualDataManagerRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ManualDataManagerRequest& l, const ManualDataManagerRequest& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ManualDataManagerResponse : virtual public ::Ice::Object
{
public:

    typedef ManualDataManagerResponsePrx ProxyType;
    typedef ManualDataManagerResponsePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void receive(const ::ManualData::receiveMsgSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void receiveFileList(const ::std::string&, const ::std::string&, const ::ManualData::ManualFile&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveFileList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void receiveSegment(const ::std::string&, const ::std::string&, const ::ManualData::ManualSegment&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receiveSegment(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const ManualDataManagerResponse& l, const ManualDataManagerResponse& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ManualDataManagerResponse& l, const ManualDataManagerResponse& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace ManualData
{

template<class T>
class CallbackNC_ManualDataManagerRequest_send : public Callback_ManualDataManagerRequest_send_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerRequest_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_send<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_send<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_send<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerRequest_send : public Callback_ManualDataManagerRequest_send_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerRequest_send(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_send<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_send<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendPtr
newCallback_ManualDataManagerRequest_send(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_send<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ManualDataManagerRequest_cancalManual : public Callback_ManualDataManagerRequest_cancalManual_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerRequest_cancalManual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_cancalManual<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_cancalManual<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_cancalManual<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_cancalManual<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerRequest_cancalManual : public Callback_ManualDataManagerRequest_cancalManual_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerRequest_cancalManual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_cancalManual<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_cancalManual<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_cancalManual<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_cancalManualPtr
newCallback_ManualDataManagerRequest_cancalManual(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_cancalManual<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ManualDataManagerRequest_sendFileList : public Callback_ManualDataManagerRequest_sendFileList_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerRequest_sendFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_sendFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_sendFileList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_sendFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerRequest_sendFileList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerRequest_sendFileList : public Callback_ManualDataManagerRequest_sendFileList_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerRequest_sendFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_sendFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_sendFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_sendFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerRequest_sendFileListPtr
newCallback_ManualDataManagerRequest_sendFileList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerRequest_sendFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ManualDataManagerResponse_receive : public Callback_ManualDataManagerResponse_receive_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerResponse_receive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerResponse_receive : public Callback_ManualDataManagerResponse_receive_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerResponse_receive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receivePtr
newCallback_ManualDataManagerResponse_receive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ManualDataManagerResponse_receiveFileList : public Callback_ManualDataManagerResponse_receiveFileList_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerResponse_receiveFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveFileList<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveFileList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveFileList<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerResponse_receiveFileList : public Callback_ManualDataManagerResponse_receiveFileList_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerResponse_receiveFileList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveFileList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveFileListPtr
newCallback_ManualDataManagerResponse_receiveFileList(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveFileList<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ManualDataManagerResponse_receiveSegment : public Callback_ManualDataManagerResponse_receiveSegment_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ManualDataManagerResponse_receiveSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveSegment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveSegment<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveSegment<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ManualDataManagerResponse_receiveSegment<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ManualDataManagerResponse_receiveSegment : public Callback_ManualDataManagerResponse_receiveSegment_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ManualDataManagerResponse_receiveSegment(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveSegment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveSegment<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveSegment<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ManualDataManagerResponse_receiveSegmentPtr
newCallback_ManualDataManagerResponse_receiveSegment(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ManualDataManagerResponse_receiveSegment<T, CT>(instance, 0, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
