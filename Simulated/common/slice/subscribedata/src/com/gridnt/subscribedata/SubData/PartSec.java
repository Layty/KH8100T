// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `subscribedata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.subscribedata.SubData;

public class PartSec implements java.lang.Cloneable, java.io.Serializable
{
    public String partition;

    public String section;

    public PartSec()
    {
        partition = "";
        section = "";
    }

    public PartSec(String partition, String section)
    {
        this.partition = partition;
        this.section = section;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PartSec _r = null;
        if(rhs instanceof PartSec)
        {
            _r = (PartSec)rhs;
        }

        if(_r != null)
        {
            if(partition != _r.partition)
            {
                if(partition == null || _r.partition == null || !partition.equals(_r.partition))
                {
                    return false;
                }
            }
            if(section != _r.section)
            {
                if(section == null || _r.section == null || !section.equals(_r.section))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::SubData::PartSec");
        __h = IceInternal.HashUtil.hashAdd(__h, partition);
        __h = IceInternal.HashUtil.hashAdd(__h, section);
        return __h;
    }

    public PartSec
    clone()
    {
        PartSec c = null;
        try
        {
            c = (PartSec)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(partition);
        __os.writeString(section);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        partition = __is.readString();
        section = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, PartSec __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public PartSec
    __read(IceInternal.BasicStream __is, PartSec __v)
    {
        if(__v == null)
        {
             __v = new PartSec();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final PartSec __nullMarshalValue = new PartSec();

    public static final long serialVersionUID = -2037313386L;
}
