// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `subscribedata.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gridnt.subscribedata.SubData;

public class DataInfo implements java.lang.Cloneable, java.io.Serializable
{
    public String modulename;

    public boolean isSubscribe;

    public DataInfo()
    {
        modulename = "";
    }

    public DataInfo(String modulename, boolean isSubscribe)
    {
        this.modulename = modulename;
        this.isSubscribe = isSubscribe;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DataInfo _r = null;
        if(rhs instanceof DataInfo)
        {
            _r = (DataInfo)rhs;
        }

        if(_r != null)
        {
            if(modulename != _r.modulename)
            {
                if(modulename == null || _r.modulename == null || !modulename.equals(_r.modulename))
                {
                    return false;
                }
            }
            if(isSubscribe != _r.isSubscribe)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::SubData::DataInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, modulename);
        __h = IceInternal.HashUtil.hashAdd(__h, isSubscribe);
        return __h;
    }

    public DataInfo
    clone()
    {
        DataInfo c = null;
        try
        {
            c = (DataInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(modulename);
        __os.writeBool(isSubscribe);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        modulename = __is.readString();
        isSubscribe = __is.readBool();
    }

    static public void
    __write(IceInternal.BasicStream __os, DataInfo __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public DataInfo
    __read(IceInternal.BasicStream __is, DataInfo __v)
    {
        if(__v == null)
        {
             __v = new DataInfo();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final DataInfo __nullMarshalValue = new DataInfo();

    public static final long serialVersionUID = -2093488626L;
}
