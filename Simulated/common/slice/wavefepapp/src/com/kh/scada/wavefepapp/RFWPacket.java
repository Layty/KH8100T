// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public class RFWPacket implements java.lang.Cloneable, java.io.Serializable
{
    public byte id;

    public String fepNode;

    public SUnitRFW frw;

    public RFWPacket()
    {
        fepNode = "";
        frw = new SUnitRFW();
    }

    public RFWPacket(byte id, String fepNode, SUnitRFW frw)
    {
        this.id = id;
        this.fepNode = fepNode;
        this.frw = frw;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RFWPacket _r = null;
        if(rhs instanceof RFWPacket)
        {
            _r = (RFWPacket)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(fepNode != _r.fepNode)
            {
                if(fepNode == null || _r.fepNode == null || !fepNode.equals(_r.fepNode))
                {
                    return false;
                }
            }
            if(frw != _r.frw)
            {
                if(frw == null || _r.frw == null || !frw.equals(_r.frw))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::wavefepapp::RFWPacket");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, fepNode);
        __h = IceInternal.HashUtil.hashAdd(__h, frw);
        return __h;
    }

    public RFWPacket
    clone()
    {
        RFWPacket c = null;
        try
        {
            c = (RFWPacket)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeByte(id);
        __os.writeString(fepNode);
        SUnitRFW.__write(__os, frw);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readByte();
        fepNode = __is.readString();
        frw = SUnitRFW.__read(__is, frw);
    }

    static public void
    __write(IceInternal.BasicStream __os, RFWPacket __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RFWPacket
    __read(IceInternal.BasicStream __is, RFWPacket __v)
    {
        if(__v == null)
        {
             __v = new RFWPacket();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RFWPacket __nullMarshalValue = new RFWPacket();

    public static final long serialVersionUID = 345935469L;
}
