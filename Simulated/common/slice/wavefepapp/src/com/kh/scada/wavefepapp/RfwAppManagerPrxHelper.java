// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

/**
 * Provides type-specific helper functions.
 **/
public final class RfwAppManagerPrxHelper extends Ice.ObjectPrxHelperBase implements RfwAppManagerPrx
{
    private static final String __processRFW_name = "processRFW";

    public void processRFW(RFWPacket aRFWPacket)
    {
        processRFW(aRFWPacket, null, false);
    }

    public void processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx)
    {
        processRFW(aRFWPacket, __ctx, true);
    }

    private void processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_processRFW(begin_processRFW(aRFWPacket, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket)
    {
        return begin_processRFW(aRFWPacket, null, false, false, null);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx)
    {
        return begin_processRFW(aRFWPacket, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, Ice.Callback __cb)
    {
        return begin_processRFW(aRFWPacket, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_processRFW(aRFWPacket, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, Callback_RfwAppManager_processRFW __cb)
    {
        return begin_processRFW(aRFWPacket, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx, Callback_RfwAppManager_processRFW __cb)
    {
        return begin_processRFW(aRFWPacket, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_processRFW(aRFWPacket, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRFW(aRFWPacket, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_processRFW(aRFWPacket, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRFW(aRFWPacket, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRFW(aRFWPacket, 
                                __ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__processRFW_name, __cb);
        try
        {
            __result.prepare(__processRFW_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RFWPacket.__write(__os, aRFWPacket);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_processRFW(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __processRFW_name);
    }

    private static final String __processRfwDir_name = "processRfwDir";

    public void processRfwDir(RFWDirPacket aRfwDirPacket)
    {
        processRfwDir(aRfwDirPacket, null, false);
    }

    public void processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx)
    {
        processRfwDir(aRfwDirPacket, __ctx, true);
    }

    private void processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_processRfwDir(begin_processRfwDir(aRfwDirPacket, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket)
    {
        return begin_processRfwDir(aRfwDirPacket, null, false, false, null);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx)
    {
        return begin_processRfwDir(aRfwDirPacket, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, Ice.Callback __cb)
    {
        return begin_processRfwDir(aRfwDirPacket, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_processRfwDir(aRfwDirPacket, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, Callback_RfwAppManager_processRfwDir __cb)
    {
        return begin_processRfwDir(aRfwDirPacket, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx, Callback_RfwAppManager_processRfwDir __cb)
    {
        return begin_processRfwDir(aRfwDirPacket, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_processRfwDir(aRfwDirPacket, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRfwDir(aRfwDirPacket, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_processRfwDir(aRfwDirPacket, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRfwDir(aRfwDirPacket, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_processRfwDir(aRfwDirPacket, 
                                   __ctx, 
                                   __explicitCtx, 
                                   __synchronous, 
                                   new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__processRfwDir_name, __cb);
        try
        {
            __result.prepare(__processRfwDir_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RFWDirPacket.__write(__os, aRfwDirPacket);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_processRfwDir(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __processRfwDir_name);
    }

    private static final String __rfwExecuteEcho_name = "rfwExecuteEcho";

    public void rfwExecuteEcho(RfwOperate operate, boolean flag, String tip)
    {
        rfwExecuteEcho(operate, flag, tip, null, false);
    }

    public void rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx)
    {
        rfwExecuteEcho(operate, flag, tip, __ctx, true);
    }

    private void rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_rfwExecuteEcho(begin_rfwExecuteEcho(operate, flag, tip, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, null, false, false, null);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, Ice.Callback __cb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, Callback_RfwAppManager_rfwExecuteEcho __cb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx, Callback_RfwAppManager_rfwExecuteEcho __cb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rfwExecuteEcho(operate, flag, tip, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                 boolean flag, 
                                                 String tip, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_rfwExecuteEcho(operate, 
                                    flag, 
                                    tip, 
                                    __ctx, 
                                    __explicitCtx, 
                                    __synchronous, 
                                    new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                 boolean flag, 
                                                 String tip, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__rfwExecuteEcho_name, __cb);
        try
        {
            __result.prepare(__rfwExecuteEcho_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            RfwOperate.__write(__os, operate);
            __os.writeBool(flag);
            __os.writeString(tip);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_rfwExecuteEcho(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __rfwExecuteEcho_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RfwAppManagerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RfwAppManagerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RfwAppManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RfwAppManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static RfwAppManagerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static RfwAppManagerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, RfwAppManagerPrx.class, RfwAppManagerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::wavefepapp::RfwAppManager"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, RfwAppManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static RfwAppManagerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RfwAppManagerPrxHelper result = new RfwAppManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
