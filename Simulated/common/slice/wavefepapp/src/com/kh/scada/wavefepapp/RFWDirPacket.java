// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public class RFWDirPacket implements java.lang.Cloneable, java.io.Serializable
{
    public byte id;

    public String fepNode;

    public short unitno;

    public RfwDir[] rfwDir;

    public RFWDirPacket()
    {
        fepNode = "";
    }

    public RFWDirPacket(byte id, String fepNode, short unitno, RfwDir[] rfwDir)
    {
        this.id = id;
        this.fepNode = fepNode;
        this.unitno = unitno;
        this.rfwDir = rfwDir;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RFWDirPacket _r = null;
        if(rhs instanceof RFWDirPacket)
        {
            _r = (RFWDirPacket)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(fepNode != _r.fepNode)
            {
                if(fepNode == null || _r.fepNode == null || !fepNode.equals(_r.fepNode))
                {
                    return false;
                }
            }
            if(unitno != _r.unitno)
            {
                return false;
            }
            if(!java.util.Arrays.equals(rfwDir, _r.rfwDir))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::wavefepapp::RFWDirPacket");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, fepNode);
        __h = IceInternal.HashUtil.hashAdd(__h, unitno);
        __h = IceInternal.HashUtil.hashAdd(__h, rfwDir);
        return __h;
    }

    public RFWDirPacket
    clone()
    {
        RFWDirPacket c = null;
        try
        {
            c = (RFWDirPacket)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeByte(id);
        __os.writeString(fepNode);
        __os.writeShort(unitno);
        SRFWDirHelper.write(__os, rfwDir);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readByte();
        fepNode = __is.readString();
        unitno = __is.readShort();
        rfwDir = SRFWDirHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, RFWDirPacket __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RFWDirPacket
    __read(IceInternal.BasicStream __is, RFWDirPacket __v)
    {
        if(__v == null)
        {
             __v = new RFWDirPacket();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RFWDirPacket __nullMarshalValue = new RFWDirPacket();

    public static final long serialVersionUID = 2020133965L;
}
