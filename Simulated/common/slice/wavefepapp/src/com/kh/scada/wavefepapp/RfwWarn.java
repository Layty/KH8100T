// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public class RfwWarn implements java.lang.Cloneable, java.io.Serializable
{
    public long timeStamp;

    public short UnitNo;

    public short OperType;

    public RfwWarn()
    {
    }

    public RfwWarn(long timeStamp, short UnitNo, short OperType)
    {
        this.timeStamp = timeStamp;
        this.UnitNo = UnitNo;
        this.OperType = OperType;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RfwWarn _r = null;
        if(rhs instanceof RfwWarn)
        {
            _r = (RfwWarn)rhs;
        }

        if(_r != null)
        {
            if(timeStamp != _r.timeStamp)
            {
                return false;
            }
            if(UnitNo != _r.UnitNo)
            {
                return false;
            }
            if(OperType != _r.OperType)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::wavefepapp::RfwWarn");
        __h = IceInternal.HashUtil.hashAdd(__h, timeStamp);
        __h = IceInternal.HashUtil.hashAdd(__h, UnitNo);
        __h = IceInternal.HashUtil.hashAdd(__h, OperType);
        return __h;
    }

    public RfwWarn
    clone()
    {
        RfwWarn c = null;
        try
        {
            c = (RfwWarn)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(timeStamp);
        __os.writeShort(UnitNo);
        __os.writeShort(OperType);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        timeStamp = __is.readLong();
        UnitNo = __is.readShort();
        OperType = __is.readShort();
    }

    static public void
    __write(IceInternal.BasicStream __os, RfwWarn __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RfwWarn
    __read(IceInternal.BasicStream __is, RfwWarn __v)
    {
        if(__v == null)
        {
             __v = new RfwWarn();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RfwWarn __nullMarshalValue = new RfwWarn();

    public static final long serialVersionUID = 2014077195L;
}
