// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public class RfwDir implements java.lang.Cloneable, java.io.Serializable
{
    public short lineno;

    public short filename;

    public short filelength;

    public short filestate;

    public long filetime;

    public RfwDir()
    {
    }

    public RfwDir(short lineno, short filename, short filelength, short filestate, long filetime)
    {
        this.lineno = lineno;
        this.filename = filename;
        this.filelength = filelength;
        this.filestate = filestate;
        this.filetime = filetime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RfwDir _r = null;
        if(rhs instanceof RfwDir)
        {
            _r = (RfwDir)rhs;
        }

        if(_r != null)
        {
            if(lineno != _r.lineno)
            {
                return false;
            }
            if(filename != _r.filename)
            {
                return false;
            }
            if(filelength != _r.filelength)
            {
                return false;
            }
            if(filestate != _r.filestate)
            {
                return false;
            }
            if(filetime != _r.filetime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::wavefepapp::RfwDir");
        __h = IceInternal.HashUtil.hashAdd(__h, lineno);
        __h = IceInternal.HashUtil.hashAdd(__h, filename);
        __h = IceInternal.HashUtil.hashAdd(__h, filelength);
        __h = IceInternal.HashUtil.hashAdd(__h, filestate);
        __h = IceInternal.HashUtil.hashAdd(__h, filetime);
        return __h;
    }

    public RfwDir
    clone()
    {
        RfwDir c = null;
        try
        {
            c = (RfwDir)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeShort(lineno);
        __os.writeShort(filename);
        __os.writeShort(filelength);
        __os.writeShort(filestate);
        __os.writeLong(filetime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        lineno = __is.readShort();
        filename = __is.readShort();
        filelength = __is.readShort();
        filestate = __is.readShort();
        filetime = __is.readLong();
    }

    static public void
    __write(IceInternal.BasicStream __os, RfwDir __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public RfwDir
    __read(IceInternal.BasicStream __is, RfwDir __v)
    {
        if(__v == null)
        {
             __v = new RfwDir();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final RfwDir __nullMarshalValue = new RfwDir();

    public static final long serialVersionUID = -1997828719L;
}
