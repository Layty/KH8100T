// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public interface RfwAppManagerPrx extends Ice.ObjectPrx
{
    /**
     * @param: unitno - 终端号。
     * @param: operateType - 操作类型。
     * @param: tip - flag=true，tip=""；flag=false，tip提示出错原因。
     **/
    public void rfwExecuteEcho(RfwOperate operate, boolean flag, String tip);

    /**
     * @param: unitno - 终端号。
     * @param: operateType - 操作类型。
     * @param: tip - flag=true，tip=""；flag=false，tip提示出错原因。
     * @param __ctx The Context map to send with the invocation.
     **/
    public void rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx);

    /**
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip);

    /**
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx);

    /**
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, Ice.Callback __cb);

    /**
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, Callback_RfwAppManager_rfwExecuteEcho __cb);

    /**
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, boolean flag, String tip, java.util.Map<String, String> __ctx, Callback_RfwAppManager_rfwExecuteEcho __cb);

    /**
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_rfwExecuteEcho(RfwOperate operate, 
                                                boolean flag, 
                                                String tip, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * @param __result The asynchronous result object.
     **/
    public void end_rfwExecuteEcho(Ice.AsyncResult __result);

    public void processRfwDir(RFWDirPacket aRfwDirPacket);

    public void processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, Ice.Callback __cb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, Callback_RfwAppManager_processRfwDir __cb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, java.util.Map<String, String> __ctx, Callback_RfwAppManager_processRfwDir __cb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_processRfwDir(RFWDirPacket aRfwDirPacket, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb);

    public void end_processRfwDir(Ice.AsyncResult __result);

    public void processRFW(RFWPacket aRFWPacket);

    public void processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, Ice.Callback __cb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, Callback_RfwAppManager_processRFW __cb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, java.util.Map<String, String> __ctx, Callback_RfwAppManager_processRFW __cb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_processRFW(RFWPacket aRFWPacket, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb);

    public void end_processRFW(Ice.AsyncResult __result);
}
