// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `wavefepapp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.scada.wavefepapp;

public class SRFWHead implements java.lang.Cloneable, java.io.Serializable
{
    public int UnitNo;

    public RFWTYPE Type;

    public int FaultType;

    public long Time;

    public int Period;

    public int Source;

    public int Reason;

    public int Distance;

    public int ValueCount;

    public int IRate;

    public int U1Rate;

    public int U2Rate;

    public int SampeRate;

    public int ChannelNum;

    public int DotNumBeforeFault;

    public int DotNumAfterFault;

    public SRFWSOE[] soes;

    public SRFWHead()
    {
        Type = RFWTYPE.RFWKHP;
    }

    public SRFWHead(int UnitNo, RFWTYPE Type, int FaultType, long Time, int Period, int Source, int Reason, int Distance, int ValueCount, int IRate, int U1Rate, int U2Rate, int SampeRate, int ChannelNum, int DotNumBeforeFault, int DotNumAfterFault, SRFWSOE[] soes)
    {
        this.UnitNo = UnitNo;
        this.Type = Type;
        this.FaultType = FaultType;
        this.Time = Time;
        this.Period = Period;
        this.Source = Source;
        this.Reason = Reason;
        this.Distance = Distance;
        this.ValueCount = ValueCount;
        this.IRate = IRate;
        this.U1Rate = U1Rate;
        this.U2Rate = U2Rate;
        this.SampeRate = SampeRate;
        this.ChannelNum = ChannelNum;
        this.DotNumBeforeFault = DotNumBeforeFault;
        this.DotNumAfterFault = DotNumAfterFault;
        this.soes = soes;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SRFWHead _r = null;
        if(rhs instanceof SRFWHead)
        {
            _r = (SRFWHead)rhs;
        }

        if(_r != null)
        {
            if(UnitNo != _r.UnitNo)
            {
                return false;
            }
            if(Type != _r.Type)
            {
                if(Type == null || _r.Type == null || !Type.equals(_r.Type))
                {
                    return false;
                }
            }
            if(FaultType != _r.FaultType)
            {
                return false;
            }
            if(Time != _r.Time)
            {
                return false;
            }
            if(Period != _r.Period)
            {
                return false;
            }
            if(Source != _r.Source)
            {
                return false;
            }
            if(Reason != _r.Reason)
            {
                return false;
            }
            if(Distance != _r.Distance)
            {
                return false;
            }
            if(ValueCount != _r.ValueCount)
            {
                return false;
            }
            if(IRate != _r.IRate)
            {
                return false;
            }
            if(U1Rate != _r.U1Rate)
            {
                return false;
            }
            if(U2Rate != _r.U2Rate)
            {
                return false;
            }
            if(SampeRate != _r.SampeRate)
            {
                return false;
            }
            if(ChannelNum != _r.ChannelNum)
            {
                return false;
            }
            if(DotNumBeforeFault != _r.DotNumBeforeFault)
            {
                return false;
            }
            if(DotNumAfterFault != _r.DotNumAfterFault)
            {
                return false;
            }
            if(!java.util.Arrays.equals(soes, _r.soes))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::wavefepapp::SRFWHead");
        __h = IceInternal.HashUtil.hashAdd(__h, UnitNo);
        __h = IceInternal.HashUtil.hashAdd(__h, Type);
        __h = IceInternal.HashUtil.hashAdd(__h, FaultType);
        __h = IceInternal.HashUtil.hashAdd(__h, Time);
        __h = IceInternal.HashUtil.hashAdd(__h, Period);
        __h = IceInternal.HashUtil.hashAdd(__h, Source);
        __h = IceInternal.HashUtil.hashAdd(__h, Reason);
        __h = IceInternal.HashUtil.hashAdd(__h, Distance);
        __h = IceInternal.HashUtil.hashAdd(__h, ValueCount);
        __h = IceInternal.HashUtil.hashAdd(__h, IRate);
        __h = IceInternal.HashUtil.hashAdd(__h, U1Rate);
        __h = IceInternal.HashUtil.hashAdd(__h, U2Rate);
        __h = IceInternal.HashUtil.hashAdd(__h, SampeRate);
        __h = IceInternal.HashUtil.hashAdd(__h, ChannelNum);
        __h = IceInternal.HashUtil.hashAdd(__h, DotNumBeforeFault);
        __h = IceInternal.HashUtil.hashAdd(__h, DotNumAfterFault);
        __h = IceInternal.HashUtil.hashAdd(__h, soes);
        return __h;
    }

    public SRFWHead
    clone()
    {
        SRFWHead c = null;
        try
        {
            c = (SRFWHead)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(UnitNo);
        RFWTYPE.__write(__os, Type);
        __os.writeInt(FaultType);
        __os.writeLong(Time);
        __os.writeInt(Period);
        __os.writeInt(Source);
        __os.writeInt(Reason);
        __os.writeInt(Distance);
        __os.writeInt(ValueCount);
        __os.writeInt(IRate);
        __os.writeInt(U1Rate);
        __os.writeInt(U2Rate);
        __os.writeInt(SampeRate);
        __os.writeInt(ChannelNum);
        __os.writeInt(DotNumBeforeFault);
        __os.writeInt(DotNumAfterFault);
        SRFWSOESeqHelper.write(__os, soes);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        UnitNo = __is.readInt();
        Type = RFWTYPE.__read(__is);
        FaultType = __is.readInt();
        Time = __is.readLong();
        Period = __is.readInt();
        Source = __is.readInt();
        Reason = __is.readInt();
        Distance = __is.readInt();
        ValueCount = __is.readInt();
        IRate = __is.readInt();
        U1Rate = __is.readInt();
        U2Rate = __is.readInt();
        SampeRate = __is.readInt();
        ChannelNum = __is.readInt();
        DotNumBeforeFault = __is.readInt();
        DotNumAfterFault = __is.readInt();
        soes = SRFWSOESeqHelper.read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, SRFWHead __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public SRFWHead
    __read(IceInternal.BasicStream __is, SRFWHead __v)
    {
        if(__v == null)
        {
             __v = new SRFWHead();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final SRFWHead __nullMarshalValue = new SRFWHead();

    public static final long serialVersionUID = -1556303314L;
}
