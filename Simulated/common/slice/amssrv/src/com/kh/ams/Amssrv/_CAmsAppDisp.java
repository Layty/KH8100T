// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `amssrv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.ams.Amssrv;

/**
 * AMS Manager对外接口
 *
 **/
public abstract class _CAmsAppDisp extends Ice.ObjectImpl implements CAmsApp
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Amssrv::CAmsApp",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    /**
     * 完成注册
     *
     * @parameter strServerName:Server名称
     * @parameter strRole:确认角色
     * @parameter district:分区
     * @parameter section:分段
     * @parameter districtName:分区名称
     * @parameter sectionName:分段名称 
     * @return void
     * @throws CAmsException:未知异常
     *
     **/
    public final void FinishRegister(String strServerName, String strRole, String district, String section)
        throws CAmsException
    {
        FinishRegister(strServerName, strRole, district, section, null);
    }

    /**
     * 查询指定Server名称的角色
     *
     * @return string:返回角色值,master代表主,slave代表从，unknow代表未知
     * @throws Exception:其它原因
     *
     **/
    public final String GetRole(String strServerName)
        throws CAmsException
    {
        return GetRole(strServerName, null);
    }

    public final void HeartBeat(String strServerName)
        throws CAmsException
    {
        HeartBeat(strServerName, null);
    }

    /**
     * 退出
     *
     * @parameter serverInfo:Server信息
     * @return void
     *
     **/
    public final void Quit(ServerNode serverInfo)
    {
        Quit(serverInfo, null);
    }

    /**
     * 预先注册，得到预订角色
     *
     * @parameter strType:节点类型（数据服务器：1，前置机：2，应用管理：3，Icestorm:4，客户端:5）
     * @parameter ipVect:注册节点的ip列表，客户端只提供一个ip
     * @parameter num:注册次数
     * @parameter ServerNode:返回节点的信息
     * @return 预订角色(unknow/master/slave)
     * @throws CAmsException:未知异常
     *
     **/
    public final String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo)
        throws CAmsException
    {
        return Register(strType, ipVect, num, serverInfo, null);
    }

    public final ServerNode[] getServerNodeList()
    {
        return getServerNodeList(null);
    }

    public final void setServerNodeList(ServerNode[] serNodeSeq)
    {
        setServerNodeList(serNodeSeq, null);
    }

    /**
     * 角色切换
     *
     * @parameter strServerName:Server名称信息
     * @parameter strIp:ip信息
     * @parameter port:端口信息
     * @parameter strRole:切换角色
     * @return void
     *
     **/
    public final void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec)
    {
        shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null);
    }

    public static Ice.DispatchStatus ___Register(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String strType;
        java.util.List<java.lang.String> ipVect;
        int num;
        strType = __is.readString();
        ipVect = StringsHelper.read(__is);
        num = __is.readInt();
        __inS.endReadParams();
        ServerNodeHolder serverInfo = new ServerNodeHolder();
        try
        {
            String __ret = __obj.Register(strType, ipVect, num, serverInfo, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            ServerNode.__write(__os, serverInfo.value);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CAmsException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___FinishRegister(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String strServerName;
        String strRole;
        String district;
        String section;
        strServerName = __is.readString();
        strRole = __is.readString();
        district = __is.readString();
        section = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.FinishRegister(strServerName, strRole, district, section, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CAmsException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___Quit(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ServerNode serverInfo = null;
        serverInfo = ServerNode.__read(__is, serverInfo);
        __inS.endReadParams();
        __obj.Quit(serverInfo, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___shiftRole(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String strType;
        String strServerName;
        String strIp;
        int port;
        String strRole;
        String strPart;
        String strSec;
        strType = __is.readString();
        strServerName = __is.readString();
        strIp = __is.readString();
        port = __is.readInt();
        strRole = __is.readString();
        strPart = __is.readString();
        strSec = __is.readString();
        __inS.endReadParams();
        __obj.shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___GetRole(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String strServerName;
        strServerName = __is.readString();
        __inS.endReadParams();
        try
        {
            String __ret = __obj.GetRole(strServerName, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(__ret);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CAmsException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___HeartBeat(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String strServerName;
        strServerName = __is.readString();
        __inS.endReadParams();
        try
        {
            __obj.HeartBeat(strServerName, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(CAmsException ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___getServerNodeList(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        ServerNode[] __ret = __obj.getServerNodeList(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ServerNodeSeqHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setServerNodeList(CAmsApp __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ServerNode[] serNodeSeq;
        serNodeSeq = ServerNodeSeqHelper.read(__is);
        __inS.endReadParams();
        __obj.setServerNodeList(serNodeSeq, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "FinishRegister",
        "GetRole",
        "HeartBeat",
        "Quit",
        "Register",
        "getServerNodeList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setServerNodeList",
        "shiftRole"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___FinishRegister(this, in, __current);
            }
            case 1:
            {
                return ___GetRole(this, in, __current);
            }
            case 2:
            {
                return ___HeartBeat(this, in, __current);
            }
            case 3:
            {
                return ___Quit(this, in, __current);
            }
            case 4:
            {
                return ___Register(this, in, __current);
            }
            case 5:
            {
                return ___getServerNodeList(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___setServerNodeList(this, in, __current);
            }
            case 11:
            {
                return ___shiftRole(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
