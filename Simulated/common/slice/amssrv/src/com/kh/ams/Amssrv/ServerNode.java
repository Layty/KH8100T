// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `amssrv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.ams.Amssrv;

public class ServerNode implements java.lang.Cloneable, java.io.Serializable
{
    public String name;

    public int type;

    public String ip;

    public int port;

    public String partitionId;

    public String partitionName;

    public String sectionId;

    public String sectionName;

    public String preRole;

    public ServerNode()
    {
        name = "";
        ip = "";
        partitionId = "";
        partitionName = "";
        sectionId = "";
        sectionName = "";
        preRole = "";
    }

    public ServerNode(String name, int type, String ip, int port, String partitionId, String partitionName, String sectionId, String sectionName, String preRole)
    {
        this.name = name;
        this.type = type;
        this.ip = ip;
        this.port = port;
        this.partitionId = partitionId;
        this.partitionName = partitionName;
        this.sectionId = sectionId;
        this.sectionName = sectionName;
        this.preRole = preRole;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ServerNode _r = null;
        if(rhs instanceof ServerNode)
        {
            _r = (ServerNode)rhs;
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(type != _r.type)
            {
                return false;
            }
            if(ip != _r.ip)
            {
                if(ip == null || _r.ip == null || !ip.equals(_r.ip))
                {
                    return false;
                }
            }
            if(port != _r.port)
            {
                return false;
            }
            if(partitionId != _r.partitionId)
            {
                if(partitionId == null || _r.partitionId == null || !partitionId.equals(_r.partitionId))
                {
                    return false;
                }
            }
            if(partitionName != _r.partitionName)
            {
                if(partitionName == null || _r.partitionName == null || !partitionName.equals(_r.partitionName))
                {
                    return false;
                }
            }
            if(sectionId != _r.sectionId)
            {
                if(sectionId == null || _r.sectionId == null || !sectionId.equals(_r.sectionId))
                {
                    return false;
                }
            }
            if(sectionName != _r.sectionName)
            {
                if(sectionName == null || _r.sectionName == null || !sectionName.equals(_r.sectionName))
                {
                    return false;
                }
            }
            if(preRole != _r.preRole)
            {
                if(preRole == null || _r.preRole == null || !preRole.equals(_r.preRole))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Amssrv::ServerNode");
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        __h = IceInternal.HashUtil.hashAdd(__h, ip);
        __h = IceInternal.HashUtil.hashAdd(__h, port);
        __h = IceInternal.HashUtil.hashAdd(__h, partitionId);
        __h = IceInternal.HashUtil.hashAdd(__h, partitionName);
        __h = IceInternal.HashUtil.hashAdd(__h, sectionId);
        __h = IceInternal.HashUtil.hashAdd(__h, sectionName);
        __h = IceInternal.HashUtil.hashAdd(__h, preRole);
        return __h;
    }

    public ServerNode
    clone()
    {
        ServerNode c = null;
        try
        {
            c = (ServerNode)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        __os.writeInt(type);
        __os.writeString(ip);
        __os.writeInt(port);
        __os.writeString(partitionId);
        __os.writeString(partitionName);
        __os.writeString(sectionId);
        __os.writeString(sectionName);
        __os.writeString(preRole);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        type = __is.readInt();
        ip = __is.readString();
        port = __is.readInt();
        partitionId = __is.readString();
        partitionName = __is.readString();
        sectionId = __is.readString();
        sectionName = __is.readString();
        preRole = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, ServerNode __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public ServerNode
    __read(IceInternal.BasicStream __is, ServerNode __v)
    {
        if(__v == null)
        {
             __v = new ServerNode();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final ServerNode __nullMarshalValue = new ServerNode();

    public static final long serialVersionUID = 286785549L;
}
