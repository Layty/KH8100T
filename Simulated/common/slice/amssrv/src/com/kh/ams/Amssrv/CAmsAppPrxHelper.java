// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `amssrv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.ams.Amssrv;

/**
 * Provides type-specific helper functions.
 **/
public final class CAmsAppPrxHelper extends Ice.ObjectPrxHelperBase implements CAmsAppPrx
{
    private static final String __FinishRegister_name = "FinishRegister";

    public void FinishRegister(String strServerName, String strRole, String district, String section)
        throws CAmsException
    {
        FinishRegister(strServerName, strRole, district, section, null, false);
    }

    public void FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx)
        throws CAmsException
    {
        FinishRegister(strServerName, strRole, district, section, __ctx, true);
    }

    private void FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CAmsException
    {
        __checkTwowayOnly(__FinishRegister_name);
        end_FinishRegister(begin_FinishRegister(strServerName, strRole, district, section, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, null, false, false, null);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, Ice.Callback __cb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, Callback_CAmsApp_FinishRegister __cb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx, Callback_CAmsApp_FinishRegister __cb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                 String strRole, 
                                                 String district, 
                                                 String section, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_FinishRegister(strServerName, strRole, district, section, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                CAmsAppPrxHelper.__FinishRegister_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                 String strRole, 
                                                 String district, 
                                                 String section, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__FinishRegister_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__FinishRegister_name, __cb);
        try
        {
            __result.prepare(__FinishRegister_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(strServerName);
            __os.writeString(strRole);
            __os.writeString(district);
            __os.writeString(section);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_FinishRegister(Ice.AsyncResult __iresult)
        throws CAmsException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __FinishRegister_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(CAmsException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __FinishRegister_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.kh.ams.Amssrv.CAmsAppPrx __proxy = (com.kh.ams.Amssrv.CAmsAppPrx)__result.getProxy();
        try
        {
            __proxy.end_FinishRegister(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __GetRole_name = "GetRole";

    public String GetRole(String strServerName)
        throws CAmsException
    {
        return GetRole(strServerName, null, false);
    }

    public String GetRole(String strServerName, java.util.Map<String, String> __ctx)
        throws CAmsException
    {
        return GetRole(strServerName, __ctx, true);
    }

    private String GetRole(String strServerName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CAmsException
    {
        __checkTwowayOnly(__GetRole_name);
        return end_GetRole(begin_GetRole(strServerName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_GetRole(String strServerName)
    {
        return begin_GetRole(strServerName, null, false, false, null);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx)
    {
        return begin_GetRole(strServerName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, Ice.Callback __cb)
    {
        return begin_GetRole(strServerName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_GetRole(strServerName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, Callback_CAmsApp_GetRole __cb)
    {
        return begin_GetRole(strServerName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx, Callback_CAmsApp_GetRole __cb)
    {
        return begin_GetRole(strServerName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetRole(strServerName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetRole(strServerName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_GetRole(strServerName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetRole(strServerName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_GetRole(String strServerName, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_GetRole(strServerName, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         CAmsAppPrxHelper.__GetRole_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_GetRole(String strServerName, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__GetRole_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__GetRole_name, __cb);
        try
        {
            __result.prepare(__GetRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(strServerName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_GetRole(Ice.AsyncResult __iresult)
        throws CAmsException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __GetRole_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(CAmsException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __GetRole_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.kh.ams.Amssrv.CAmsAppPrx __proxy = (com.kh.ams.Amssrv.CAmsAppPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_GetRole(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __HeartBeat_name = "HeartBeat";

    public void HeartBeat(String strServerName)
        throws CAmsException
    {
        HeartBeat(strServerName, null, false);
    }

    public void HeartBeat(String strServerName, java.util.Map<String, String> __ctx)
        throws CAmsException
    {
        HeartBeat(strServerName, __ctx, true);
    }

    private void HeartBeat(String strServerName, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CAmsException
    {
        __checkTwowayOnly(__HeartBeat_name);
        end_HeartBeat(begin_HeartBeat(strServerName, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName)
    {
        return begin_HeartBeat(strServerName, null, false, false, null);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx)
    {
        return begin_HeartBeat(strServerName, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, Ice.Callback __cb)
    {
        return begin_HeartBeat(strServerName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_HeartBeat(strServerName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, Callback_CAmsApp_HeartBeat __cb)
    {
        return begin_HeartBeat(strServerName, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx, Callback_CAmsApp_HeartBeat __cb)
    {
        return begin_HeartBeat(strServerName, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_HeartBeat(strServerName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_HeartBeat(strServerName, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_HeartBeat(strServerName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_HeartBeat(strServerName, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_HeartBeat(strServerName, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           CAmsAppPrxHelper.__HeartBeat_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__HeartBeat_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__HeartBeat_name, __cb);
        try
        {
            __result.prepare(__HeartBeat_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(strServerName);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_HeartBeat(Ice.AsyncResult __iresult)
        throws CAmsException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __HeartBeat_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(CAmsException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __HeartBeat_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.kh.ams.Amssrv.CAmsAppPrx __proxy = (com.kh.ams.Amssrv.CAmsAppPrx)__result.getProxy();
        try
        {
            __proxy.end_HeartBeat(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __Quit_name = "Quit";

    public void Quit(ServerNode serverInfo)
    {
        Quit(serverInfo, null, false);
    }

    public void Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx)
    {
        Quit(serverInfo, __ctx, true);
    }

    private void Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_Quit(begin_Quit(serverInfo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo)
    {
        return begin_Quit(serverInfo, null, false, false, null);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx)
    {
        return begin_Quit(serverInfo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, Ice.Callback __cb)
    {
        return begin_Quit(serverInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Quit(serverInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, Callback_CAmsApp_Quit __cb)
    {
        return begin_Quit(serverInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx, Callback_CAmsApp_Quit __cb)
    {
        return begin_Quit(serverInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Quit(serverInfo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Quit(serverInfo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Quit(serverInfo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Quit(serverInfo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Quit(serverInfo, 
                          __ctx, 
                          __explicitCtx, 
                          __synchronous, 
                          new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__Quit_name, __cb);
        try
        {
            __result.prepare(__Quit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ServerNode.__write(__os, serverInfo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_Quit(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __Quit_name);
    }

    private static final String __Register_name = "Register";

    public String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo)
        throws CAmsException
    {
        return Register(strType, ipVect, num, serverInfo, null, false);
    }

    public String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo, java.util.Map<String, String> __ctx)
        throws CAmsException
    {
        return Register(strType, ipVect, num, serverInfo, __ctx, true);
    }

    private String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws CAmsException
    {
        __checkTwowayOnly(__Register_name);
        return end_Register(serverInfo, begin_Register(strType, ipVect, num, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num)
    {
        return begin_Register(strType, ipVect, num, null, false, false, null);
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx)
    {
        return begin_Register(strType, ipVect, num, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, Ice.Callback __cb)
    {
        return begin_Register(strType, ipVect, num, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_Register(strType, ipVect, num, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, Callback_CAmsApp_Register __cb)
    {
        return begin_Register(strType, ipVect, num, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx, Callback_CAmsApp_Register __cb)
    {
        return begin_Register(strType, ipVect, num, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Register(strType, ipVect, num, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Register(strType, ipVect, num, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          java.util.Map<String, String> __ctx, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_Register(strType, ipVect, num, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          java.util.Map<String, String> __ctx, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_Register(strType, ipVect, num, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_Register(String strType, 
                                           java.util.List<java.lang.String> ipVect, 
                                           int num, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallbackUE implements com.kh.ams.Amssrv._Callback_CAmsApp_Register
        {
            public CB(FunctionalCallback_CAmsApp_Register_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.UserException> userExceptionCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, userExceptionCb, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(String __ret, ServerNode serverInfo)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, serverInfo);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                CAmsAppPrxHelper.__Register_completed(this, __result);
            }

            private final FunctionalCallback_CAmsApp_Register_Response __responseCb;
        }
        return begin_Register(strType, ipVect, num, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __userExceptionCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_Register(String strType, 
                                           java.util.List<java.lang.String> ipVect, 
                                           int num, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__Register_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__Register_name, __cb);
        try
        {
            __result.prepare(__Register_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(strType);
            StringsHelper.write(__os, ipVect);
            __os.writeInt(num);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_Register(ServerNodeHolder serverInfo, Ice.AsyncResult __iresult)
        throws CAmsException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __Register_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(CAmsException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            serverInfo.value = ServerNode.__read(__is, serverInfo.value);
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __Register_completed(com.kh.ams.Amssrv._Callback_CAmsApp_Register __cb, Ice.AsyncResult __result)
    {
        com.kh.ams.Amssrv.CAmsAppPrx __proxy = (com.kh.ams.Amssrv.CAmsAppPrx)__result.getProxy();
        String __ret = null;
        ServerNodeHolder serverInfo = new ServerNodeHolder();
        try
        {
            __ret = __proxy.end_Register(serverInfo, __result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, serverInfo.value);
    }

    private static final String __shiftRole_name = "shiftRole";

    public void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec)
    {
        shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false);
    }

    public void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx)
    {
        shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true);
    }

    private void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_shiftRole(begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false, false, null);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, Ice.Callback __cb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, Callback_CAmsApp_shiftRole __cb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx, Callback_CAmsApp_shiftRole __cb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shiftRole(strType, strServerName, strIp, port, strRole, strPart, strSec, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_shiftRole(String strType, 
                                            String strServerName, 
                                            String strIp, 
                                            int port, 
                                            String strRole, 
                                            String strPart, 
                                            String strSec, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_shiftRole(strType, 
                               strServerName, 
                               strIp, 
                               port, 
                               strRole, 
                               strPart, 
                               strSec, 
                               __ctx, 
                               __explicitCtx, 
                               __synchronous, 
                               new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_shiftRole(String strType, 
                                            String strServerName, 
                                            String strIp, 
                                            int port, 
                                            String strRole, 
                                            String strPart, 
                                            String strSec, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__shiftRole_name, __cb);
        try
        {
            __result.prepare(__shiftRole_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(strType);
            __os.writeString(strServerName);
            __os.writeString(strIp);
            __os.writeInt(port);
            __os.writeString(strRole);
            __os.writeString(strPart);
            __os.writeString(strSec);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_shiftRole(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __shiftRole_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CAmsAppPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CAmsAppPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CAmsAppPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CAmsAppPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static CAmsAppPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static CAmsAppPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, CAmsAppPrx.class, CAmsAppPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Amssrv::CAmsApp",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, CAmsAppPrx v)
    {
        __os.writeProxy(v);
    }

    public static CAmsAppPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CAmsAppPrxHelper result = new CAmsAppPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
