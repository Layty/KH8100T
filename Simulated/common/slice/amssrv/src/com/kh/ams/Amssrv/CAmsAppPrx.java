// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `amssrv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.kh.ams.Amssrv;

/**
 * AMS Manager对外接口
 *
 **/
public interface CAmsAppPrx extends Ice.ObjectPrx
{
    /**
     * 预先注册，得到预订角色
     *
     * @parameter strType:节点类型
     * @parameter ipVect:注册节点的ip列表
     * @parameter num:注册次数
     * @parameter ServerNode:返回节点的信息
     * @return 预订角色(unknow/master/slave)
     * @throws CAmsException:未知异常
     *
     **/
    public String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo)
        throws CAmsException;

    /**
     * 预先注册，得到预订角色
     *
     * @parameter strType:节点类型
     * @parameter ipVect:注册节点的ip列表
     * @parameter num:注册次数
     * @parameter ServerNode:返回节点的信息
     * @param __ctx The Context map to send with the invocation.
     * @return 预订角色(unknow/master/slave)
     * @throws CAmsException:未知异常
     *
     **/
    public String Register(String strType, java.util.List<java.lang.String> ipVect, int num, ServerNodeHolder serverInfo, java.util.Map<String, String> __ctx)
        throws CAmsException;

    /**
     * 预先注册，得到预订角色
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, Ice.Callback __cb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, Callback_CAmsApp_Register __cb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, java.util.List<java.lang.String> ipVect, int num, java.util.Map<String, String> __ctx, Callback_CAmsApp_Register __cb);

    public interface FunctionalCallback_CAmsApp_Register_Response
    {
        void apply(String __ret, ServerNode serverInfo);
    }

    /**
     * 预先注册，得到预订角色
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          java.util.Map<String, String> __ctx, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Register(String strType, 
                                          java.util.List<java.lang.String> ipVect, 
                                          int num, 
                                          java.util.Map<String, String> __ctx, 
                                          FunctionalCallback_CAmsApp_Register_Response __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 预先注册，得到预订角色
     * 
     * @param __result The asynchronous result object.
     * @return 预订角色(unknow/master/slave)
     * @throws CAmsException:未知异常
     * 
     **/
    public String end_Register(ServerNodeHolder serverInfo, Ice.AsyncResult __result)
        throws CAmsException;

    /**
     * 完成注册
     *
     * @parameter strServerName:Server名称
     * @parameter strRole:确认角色
     * @parameter district:分区
     * @parameter section:分段
     * @parameter districtName:分区名称
     * @parameter sectionName:分段名称 
     * @return void
     * @throws CAmsException:未知异常
     *
     **/
    public void FinishRegister(String strServerName, String strRole, String district, String section)
        throws CAmsException;

    /**
     * 完成注册
     *
     * @parameter strServerName:Server名称
     * @parameter strRole:确认角色
     * @parameter district:分区
     * @parameter section:分段
     * @parameter districtName:分区名称
     * @parameter sectionName:分段名称 
     * @param __ctx The Context map to send with the invocation.
     * @return void
     * @throws CAmsException:未知异常
     *
     **/
    public void FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx)
        throws CAmsException;

    /**
     * 完成注册
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section);

    /**
     * 完成注册
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx);

    /**
     * 完成注册
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, Ice.Callback __cb);

    /**
     * 完成注册
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 完成注册
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, Callback_CAmsApp_FinishRegister __cb);

    /**
     * 完成注册
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, String strRole, String district, String section, java.util.Map<String, String> __ctx, Callback_CAmsApp_FinishRegister __cb);

    /**
     * 完成注册
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 完成注册
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 完成注册
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 完成注册
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_FinishRegister(String strServerName, 
                                                String strRole, 
                                                String district, 
                                                String section, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 完成注册
     * 
     * @param __result The asynchronous result object.
     * @return void
     * @throws CAmsException:未知异常
     * 
     **/
    public void end_FinishRegister(Ice.AsyncResult __result)
        throws CAmsException;

    /**
     * 退出
     *
     * @parameter serverInfo:Server信息
     * @return void
     *
     **/
    public void Quit(ServerNode serverInfo);

    /**
     * 退出
     *
     * @parameter serverInfo:Server信息
     * @param __ctx The Context map to send with the invocation.
     * @return void
     *
     **/
    public void Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx);

    /**
     * 退出
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo);

    /**
     * 退出
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx);

    /**
     * 退出
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, Ice.Callback __cb);

    /**
     * 退出
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 退出
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, Callback_CAmsApp_Quit __cb);

    /**
     * 退出
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, java.util.Map<String, String> __ctx, Callback_CAmsApp_Quit __cb);

    /**
     * 退出
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 退出
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 退出
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 退出
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_Quit(ServerNode serverInfo, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 退出
     * 
     * @param __result The asynchronous result object.
     * @return void
     * 
     **/
    public void end_Quit(Ice.AsyncResult __result);

    /**
     * 角色切换
     *
     * @parameter strServerName:Server名称信息
     * @parameter strIp:ip信息
     * @parameter port:端口信息
     * @parameter strRole:切换角色
     * @return void
     *
     **/
    public void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec);

    /**
     * 角色切换
     *
     * @parameter strServerName:Server名称信息
     * @parameter strIp:ip信息
     * @parameter port:端口信息
     * @parameter strRole:切换角色
     * @param __ctx The Context map to send with the invocation.
     * @return void
     *
     **/
    public void shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx);

    /**
     * 角色切换
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec);

    /**
     * 角色切换
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx);

    /**
     * 角色切换
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, Ice.Callback __cb);

    /**
     * 角色切换
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 角色切换
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, Callback_CAmsApp_shiftRole __cb);

    /**
     * 角色切换
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, String strServerName, String strIp, int port, String strRole, String strPart, String strSec, java.util.Map<String, String> __ctx, Callback_CAmsApp_shiftRole __cb);

    /**
     * 角色切换
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 角色切换
     * 
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 角色切换
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 角色切换
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_shiftRole(String strType, 
                                           String strServerName, 
                                           String strIp, 
                                           int port, 
                                           String strRole, 
                                           String strPart, 
                                           String strSec, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 角色切换
     * 
     * @param __result The asynchronous result object.
     * @return void
     * 
     **/
    public void end_shiftRole(Ice.AsyncResult __result);

    /**
     * 查询指定Server名称的角色
     *
     * @return string:返回角色值,master代表主,slave代表从，unknow代表未知
     * @throws Exception:其它原因
     *
     **/
    public String GetRole(String strServerName)
        throws CAmsException;

    /**
     * 查询指定Server名称的角色
     *
     * @param __ctx The Context map to send with the invocation.
     * @return string:返回角色值,master代表主,slave代表从，unknow代表未知
     * @throws Exception:其它原因
     *
     **/
    public String GetRole(String strServerName, java.util.Map<String, String> __ctx)
        throws CAmsException;

    /**
     * 查询指定Server名称的角色
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, Ice.Callback __cb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, Callback_CAmsApp_GetRole __cb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, java.util.Map<String, String> __ctx, Callback_CAmsApp_GetRole __cb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __userExceptionCb The lambda user exception callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_GetRole(String strServerName, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 查询指定Server名称的角色
     * 
     * @param __result The asynchronous result object.
     * @return string:返回角色值,master代表主,slave代表从，unknow代表未知
     * @throws Exception:其它原因
     * 
     **/
    public String end_GetRole(Ice.AsyncResult __result)
        throws CAmsException;

    public void HeartBeat(String strServerName)
        throws CAmsException;

    public void HeartBeat(String strServerName, java.util.Map<String, String> __ctx)
        throws CAmsException;

    public Ice.AsyncResult begin_HeartBeat(String strServerName);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, Ice.Callback __cb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, Callback_CAmsApp_HeartBeat __cb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, java.util.Map<String, String> __ctx, Callback_CAmsApp_HeartBeat __cb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    public Ice.AsyncResult begin_HeartBeat(String strServerName, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb);

    public void end_HeartBeat(Ice.AsyncResult __result)
        throws CAmsException;
}
